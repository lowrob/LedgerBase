/*------------------------------------------------------------------------
Source Name: roll_att.c
System     : Personnel/Payroll System.
Created  On: July 05th, 93.
Created  By: Andre Cormier.

DESCRIPTION:
	Program to purge attendance from employee attendance history file.

MODIFICATIONS:        

Programmer     YY/MM/DD       Description of modification
~~~~~~~~~~     ~~~~~~~~       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
------------------------------------------------------------------------*/

#define	MAIN		/* Main program. This is to declare Switches */

#define	SYSTEM		"ATTENDANCE"	/* Sub System Name */
#define	MOD_DATE	"05-JUL-93"		/* Program Last Modified */

#include <stdio.h>
#include <cfomstrc.h>
#include <bfs_defs.h>
#include <bfs_com.h>
#include <bfs_pp.h>
#include <repdef.h>

#define EXIT	   	12

/* User Interface define constants */
#ifdef ENGLISH
#define ROLLOVER	'R'
#define EXITOPT		'E'

#define	YES		'Y'
#define NO		'N'
#define	EDIT		'E'
#define	CANCEL		'C'
#else
#define ROLLOVER	'R'
#define EXITOPT		'F'

#define	YES		'O'
#define NO		'N'
#define	EDIT		'M'

#define	CANCEL		'A'
#endif

/* PROFOM Releted declarations */

#define	SCR_NAME	"roll_att"	/* PROFOM screen Name */

/* Field PROFOM numbers */
#define START_FLD 	400	/* Start Field in range */
#define	END_FLD		1600	/* Last Field of the screen */

#define	STEP		100

#define BARG1		400	/* Starting Bargaining Unit		*/
#define BARG2		500	/* Ending Bargaining Unit		*/
#define POS1		600	/* Starting Classification		*/
#define POS2		700	/* Ending Classification		*/
#define EMP1		800	/* Starting Employee Number		*/
#define EMP2		900	/* Ending Employee Number		*/
#define DATE1		1000	/* Payment for Pay Date			*/
#define DATE2		1100	/* Include from Pay Period		*/
#define OPTION		1200	/* */
#define MESSAGE		1300	/* */
#define RESPONSE	1400	/* */

/* roll_att.sth - header for C structure generated by PROFOM EDITOR */

typedef struct	{

	char	s_pgm[11];	/* 100 program name */
	long	s_rundate;	/* 300 run date */
	char	s_barg1[7];	/* 400 due date */
	char	s_barg2[7];	/* 500 transaction date */
	char	s_pos1[7];	/* 600 release holdbacks option */
	char 	s_pos2[7];	/* 700 starting supplier code */
	char	s_emp1[13];	/* 800 ending supllier code */
	char	s_emp2[13];	/* 900 starting trans ref. no. */
	long	s_date1;	/* 1000 ending trans ref. no. */
	long	s_date2;	/* 1100 past due date */
	char	s_option[2];	/* 1300 option choice */
	char	s_mesg[78];	/* 1500 message field */
	char	s_resp[2];	/* 1600 response field */
	} S_STRUCT;


S_STRUCT	s_sth;	/* PROFOM Screen Structure */
static	struct  stat_rec  sr;		/* PROFOM status rec */

/* File structures */
static	Emp_at_his	emp_att;
static	Att		att;
static	Barg_unit	barg_unit;
static	Position	position;
static	Emp		emp_rec;

static	char 	e_mesg[180];  		/* dbh will return err msg in this */

static	Validation();
static	WindowHelp();

static	int	PG_SIZE;
static	char	discfile[15];	/* for storing output name */
static	short 	pgcnt;		/* for page count */	

double 	D_Roundoff();
main(argc,argv)
int argc;
char *argv[];
{
	int 	retval;

	LNSZ = 132;
	retval = Initialize(argc,argv);	/* Initialization routine */

	if (retval == NOERROR) retval = Process();

	CloseRtn();			/* return to menu */
	if (retval != NOERROR) exit(1);
	exit(0);
}

/*-------------------------------------------------------------------*/
/* Initialize PROFOM */

Initialize(argc, argv)
int	argc ;
char	*argv[] ;
{
	int	retval ;

	/*
	*	Initialize DBH Environment
	*/
	strncpy(SYS_NAME,SYSTEM,50);	/* Sub system name */
	strncpy(CHNG_DATE,MOD_DATE,10);	/* Modification Date */

	proc_switch(argc, argv, CHEQUE) ; 	/* Process Switches */

	/*
	*	Initialize PROFOM & Screen
	*/
	STRCPY(sr.termnm,terminal);	/* Copy Terminal Name */
	fomin(&sr);
	ret(err_chk(&sr)) ;		/* Check for PROFOM Error */
	fomcf(1,1);			/* Enable Snap screen option */

	retval = InitScreen() ;		/* Initialize Screen */
	if(NOERROR != retval) return(retval) ;

	return(NOERROR) ;
}	/* Initialize() */

/*--------------------------------------------------------------------------*/
/* Close nessary files and environment before exiting program               */

CloseRtn() 
{
	/* Set terminal back to normal mode from PROFOM */
	fomcs();
	fomrt();

	close_dbh();	/* Close files */
	close_rep();	/* Close report */

	return(NOERROR);
}	/* CloseRtn() */
/*----------------------------------------------------------------*/
/* Initialize screen before going to process options */

InitScreen()
{
	/* move screen name to Profom status structure */
	STRCPY(sr.scrnam,NFM_PATH);
	strcat(sr.scrnam,SCR_NAME) ;

	STRCPY(s_sth.s_pgm,PROG_NAME);
	s_sth.s_rundate = get_date();	/* get Today's Date in YYYYMMDD format*/
	s_sth.s_option[0] = HV_CHAR;
	s_sth.s_mesg[0] = HV_CHAR ;
	s_sth.s_resp[0] = HV_CHAR ;

	/* Move Low Values to data fields */
	InitFields() ;

	return(NOERROR) ;
}	/* InitScreen() */

/*-------------------------------------------------------------------*/
/* Get Option from user and call corresponding function */

Process()
{
	int	retval;

	for( ; ; ){

		if((retval = ReadOption())<0) 
			return(retval);

		switch(s_sth.s_option[0]) {
		case  EXITOPT :
			return(NOERROR);
		case  ROLLOVER :
			CHKACC(retval,ADD,e_mesg);
			retval = ProcOption() ;
			break ;
		default :
			continue;
		}

		if(NOACCESS == retval)	fomen(e_mesg);
		if(PROFOM_ERR == retval)	return(PROFOM_ERR);  /* PROFOM ERROR */
		if(DBH_ERR == retval) {
			DispError((char *)&s_sth,e_mesg);
#ifdef ENGLISH
			sprintf(e_mesg,"%s %d Dberror: %d Errno: %d",
				"System Error... Iserror:",
				iserror, dberror, errno);
#else
			sprintf(e_mesg,"%s %d Dberror: %d Errno: %d",
				"Erreur du systeme... Iserror:",
				iserror, dberror, errno);
#endif
			DispError((char *)&s_sth,e_mesg);
			return(DBH_ERR); /* DBH ERROR */
		
		}
	}      /*   end of the for( ; ; )       */
}	/* Process() */
/*------------------------------------------------------------*/
ReadOption()
{

	s_sth.s_mesg[0] = HV_CHAR;
	DispMesgFld((char *)&s_sth);	
#ifdef ENGLISH
	fomer("R(ollover), E(xit)");
#else
	fomer("R(ouler), F(in)");
#endif
	sr.nextfld = OPTION;
	fomrf((char *)&s_sth);
	ret(err_chk(&sr));

}	/* ReadOption */
/*------------------------------------------------------------*/
ProcOption()
{
	int	i, retval ;

	for(i = START_FLD ; i <= END_FLD - 300 ; i += 100)
		fomca1(i, 19, 0) ;    /* disable dup control */

	retval = ReadRange(ADD) ;
	if(retval != NOERROR) return(retval) ;

	retval = Confirm() ;
	if(retval != YES) return(NOERROR) ;

	retval = ProcRanges() ;

	if(pgcnt){
		if(term < 99)
			last_page();
#ifndef		SPOOLER
		else
			rite_top();
#endif
		}

	return(NOERROR);
}	/* ProcSelection() */
/*------------------------------------------------------------*/
/* Get the Header details from user */

ReadRange(mode)
int	mode ;
{
	int	 i, retval ;

	if(mode == ADD) {
#ifdef ENGLISH
		STRCPY(s_sth.s_mesg,"Press ESC-F to Go to Option:");
#else
		STRCPY(s_sth.s_mesg,"Appuyer sur ESC-F pour retourner a Option:");
#endif
		DispMesgFld((char *)&s_sth);

		fomca1(BARG1, 19, 2) ;
		fomca1(BARG2, 19, 2) ;
		fomca1(POS1, 19, 2);
		fomca1(POS2, 19, 2) ;
		fomca1(EMP1, 19, 2) ;
		fomca1(EMP2, 19, 2) ;
		fomca1(DATE1, 19, 2) ;
		fomca1(DATE2, 19, 2) ;
		strcpy(s_sth.s_barg1, "     0");
		strcpy(s_sth.s_barg2, "ZZZZZZ");
		strcpy(s_sth.s_pos1, "     0");
		strcpy(s_sth.s_pos2, "ZZZZZZ");
		strcpy(s_sth.s_emp1, "           1");
		strcpy(s_sth.s_emp2, "ZZZZZZZZZZZZ");
		s_sth.s_date1 = 1 ;
		s_sth.s_date2 = 1 ;
		sr.nextfld = BARG1 ;
		sr.endfld = END_FLD - 300 ;
		fomud((char*)&s_sth);
		ret(err_chk(&sr));
	}
	InitFields() ;

	i = ReadFields((char *)&s_sth,START_FLD, END_FLD - 300,
			Validation, WindowHelp, 1) ;
	if(PROFOM_ERR == i || DBH_ERR == i) return(i) ;
	if(RET_USER_ESC == i) {	/* ESC-F */
		return(RET_USER_ESC) ;
	}

	return(NOERROR) ;
}	/* ReadRange() */
/*----------------------------------------------------------------*/
/* Validation function() for Key and Header fields when PROFOM returns
  RET_VAL_CHK */

static
Validation()
{
	switch(sr.curfld){
	case BARG1:  /* ending bargaining unit code */
		Right_Justify_Numeric(s_sth.s_barg1
					,(sizeof(s_sth.s_barg1)-1));

		ret( WriteFields((char *)&s_sth,BARG1, BARG1) ) ;

		break;
	case BARG2:  /* ending bargaining unit code */
		Right_Justify_Numeric(s_sth.s_barg2
					,(sizeof(s_sth.s_barg2)-1));
		if(strcmp(s_sth.s_barg2,s_sth.s_barg1) <0) {
#ifdef ENGLISH
			fomer("Ending code cannot precede starting code");
#else
			fomer("Code finissant ne peut pas preceder le code debutant");
#endif
			s_sth.s_barg2[0] = LV_CHAR;
		}

		ret( WriteFields((char *)&s_sth,BARG2, BARG2) ) ;

		break;
	case POS1:  
		Right_Justify_Numeric(s_sth.s_pos1
					,(sizeof(s_sth.s_pos1)-1));

		ret( WriteFields((char *)&s_sth,POS1, POS1) ) ;

		break;
	case POS2: 
		Right_Justify_Numeric(s_sth.s_pos2
					,(sizeof(s_sth.s_pos2)-1));
		if(strcmp(s_sth.s_pos2,s_sth.s_pos1) <0) {
#ifdef ENGLISH
			fomer("Ending code cannot precede starting code");
#else
			fomer("Code finissant ne peut pas preceder le code debutant");
#endif
			s_sth.s_pos2[0] = LV_CHAR;
		}

		ret( WriteFields((char *)&s_sth,POS2, POS2) ) ;

		break;
	case EMP1:
		Right_Justify_Numeric(s_sth.s_emp1
					,(sizeof(emp_rec.em_numb)-1));

		ret( WriteFields((char *)&s_sth,EMP1, EMP1) ) ;

		break;
	case EMP2:  /* ending employee code */
		Right_Justify_Numeric(s_sth.s_emp2
					,(sizeof(emp_rec.em_numb)-1));
		if(strcmp(s_sth.s_emp2,s_sth.s_emp1) <0) {
#ifdef ENGLISH
			fomer("Ending number cannot precede starting number");
#else
			fomer("Numero finissant ne peut pas preceder le numero debutant");
#endif
			s_sth.s_emp2[0] = LV_CHAR;
		}

		ret( WriteFields((char *)&s_sth,EMP2, EMP2) ) ;

		break;
	case DATE1:

		ret( WriteFields((char *)&s_sth,DATE1, DATE2) ) ;

		break;
	case DATE2:  /* ending employee code */
		if(s_sth.s_date2 < s_sth.s_date1) {
#ifdef ENGLISH
			fomer("Ending date cannot precede starting date");
#else
			fomer("Date finissant ne peut pas preceder la date debutante");
#endif
			s_sth.s_date2 = LV_LONG;
		}

		ret( WriteFields((char *)&s_sth,DATE1, DATE2) ) ;

		break;
	default :
#ifdef ENGLISH
		sprintf(e_mesg,"No Validity Check For Field#  %d",sr.curfld);
#else
		sprintf(e_mesg,"Pas de controle de validite pour le Champ#  %d",sr.curfld);
#endif
		fomen(e_mesg);
		get();
		return(ERROR) ;
	}	/* Switch sr.curfld */

	return(NOERROR) ;
}	/* Validation() */
/*----------------------------------------------------------------*/
/* Show Help Windows, if applicable, when user gives ESC-H in key
   and header fields */

static
WindowHelp()
{

	fomer("No Help Window for This Field");

	return(NOERROR) ;
}	/* HdrAndKeyWindowHelp() */
/*-----------------------------------------------------------------------*/
/* Take the confirmation from user for the header part */

Confirm()
{
	int	retval ;

	for( ; ; ) {
#ifdef ENGLISH
		retval = GetOption((char *)&s_sth,"Y(es), E(dit), C(ancel)", "YEC");
#else
		retval = GetOption((char *)&s_sth,"O(ui), M(odifier), A(nnuler)", "OMA");
#endif
		if(retval == PROFOM_ERR) return(retval) ;

		switch(retval) {
		case  YES :
			return(YES) ;
		case  EDIT  :
			retval = FieldEdit();
			break ;
		case  CANCEL :
#ifdef ENGLISH
			retval = GetOption((char *)&s_sth,"Confirm the Cancel (Y/N)?", "YN") ;
#else
			retval = GetOption((char *)&s_sth,"Confirmer l'annulation (O/N)?", "ON") ;
#endif
			if(retval == YES) { 
				roll_back(e_mesg) ;	/* Unlock  Records */
				return(CANCEL) ;
			}
			break ;
		}	/* switch retval */

		if(retval == PROFOM_ERR) return(retval) ;
		if(retval == DBH_ERR) return(retval) ;
	}	/* for(; ; ) */
}	/* Confirm() */
/*-----------------------------------------------------------------------*/
/*                                                                       */
/* Changing fields. Accept fld to be changed and read that fld 		 */

FieldEdit()
{
     	int	i,retval;

     	for ( i = START_FLD; i <= END_FLD - 300 ; i += 100 )
       		fomca1( i,19,2 );      		/*  enable Dup Control */

     	sr.nextfld = START_FLD;
     	sr.endfld = END_FLD - 300;
     	fomud( (char *) &s_sth );
     	ret(err_chk(&sr));

	retval = ReadRange(UPDATE);
	if(retval != NOERROR) return(retval) ;

     	return(NOERROR);
}	/* FieldEdit() */
/*-------------------------------------------------------------------------*/
/* Initialize Screen Header with either Low Values */

InitFields()
{
	s_sth.s_barg1[0] = LV_CHAR;
	s_sth.s_barg2[0] = LV_CHAR;
	s_sth.s_pos1[0] = LV_CHAR;
	s_sth.s_pos2[0] = LV_CHAR;
	s_sth.s_emp1[0] = LV_CHAR;
	s_sth.s_emp2[0] = LV_CHAR;
	s_sth.s_date1 = LV_LONG;
	s_sth.s_date2 = LV_LONG;
	
	return(NOERROR) ;
}	/* InitFields() */
/*-----------------------------------------------------------------------*/
ProcRanges()
{
	int	i, j, retval;

	strcpy(emp_rec.em_numb, s_sth.s_emp1);
	flg_reset(EMPLOYEE);

	for( ; ; ){
		retval = get_n_employee(&emp_rec,UPDATE,0,FORWARD,e_mesg);
		if(retval < 0) {
			if(retval == EFL) break;
			DispError((char *)&s_sth,e_mesg);
			seq_over(EMPLOYEE);
			return(retval);
		}
		if(strcmp(emp_rec.em_numb,s_sth.s_emp2) > 0)
			break ;

		if((strcmp(emp_rec.em_barg,s_sth.s_barg1) < 0) ||
		  (strcmp(emp_rec.em_barg,s_sth.s_barg2) > 0))
			continue ;

		if((strcmp(emp_rec.em_pos,s_sth.s_pos1) < 0) ||
		  (strcmp(emp_rec.em_pos,s_sth.s_pos2) > 0))
			continue ;

		sprintf(e_mesg,"Employee #: %s", emp_rec.em_numb);
		fomen(e_mesg);
		fflush(stdout) ;

		for(i=0;i<12;i++){
			emp_rec.em_sic_ent += emp_rec.em_sck_acc[i];
			emp_rec.em_vac_ent += emp_rec.em_vac_acc[i];
		}

		strcpy(emp_att.eah_numb,emp_rec.em_numb);
		emp_att.eah_date = s_sth.s_date1;
		flg_reset(EMP_ATT);

		for(;;) {
			retval=get_n_emp_at(&emp_att,BROWSE,0,FORWARD,e_mesg);
			if(retval < 0) {
				if(retval == EFL) break;
				DispError((char *)&s_sth,e_mesg);
				seq_over(EMPLOYEE);
				return(retval);
			}
			if(strcmp(emp_rec.em_numb,emp_att.eah_numb) != 0)
				break;

			if(emp_att.eah_date > s_sth.s_date2)
				break;

			strcpy(att.at_code, emp_att.eah_code);

			retval = get_att(&att,BROWSE,1,e_mesg);
			if(retval < 0)  {
				fomen(e_mesg);
				get();
				return(retval);
			}
			retval = ProcAtt();
			if(retval < 0)	return(retval);

		}
		retval = ProcEmp();
		if(retval < 0)	return(retval);

		inc_str(emp_rec.em_numb, sizeof(emp_rec.em_numb)-1, 
			FORWARD);
		flg_reset(EMPLOYEE);
	}
	seq_over(EMPLOYEE);

	return(NOERROR) ;
}
/*-----------------------------------------------------------------------*/
ProcAtt()
{
	int retval;

	if(strcmp(att.at_sick, "Y") == 0){
		emp_rec.em_sic_ent -= emp_att.eah_hours / emp_att.eah_sen_hours;

	}
	if(strcmp(att.at_vac, "Y") == 0){
	        emp_rec.em_vac_ent -= emp_att.eah_hours / emp_att.eah_sen_hours;
	} 

	retval = put_emp_at(&emp_att,P_DEL,e_mesg);	
	if(retval < 0) {
	 	DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
	  	return(ERROR);
	}
	return(NOERROR) ;
}
/*-----------------------------------------------------------------------*/
ProcEmp()
{
	int retval,i;


	for(i=0;i<12;i++){
		emp_rec.em_sck_acc[i] = 0;
		emp_rec.em_vac_acc[i] = 0;
	}

	retval = put_employee(&emp_rec,UPDATE,e_mesg);	
	if(retval < 0) {
	 	DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
	  	return(ERROR);
	}
	retval = commit(e_mesg);
	if(retval < 0) {
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(ERROR);
	}
	return(NOERROR) ;
}
/******************   END OF PROGRAM *******************************/
