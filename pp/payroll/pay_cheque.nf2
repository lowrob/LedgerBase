/*------------------------------------------------------------------------
Source Name: pay_cheque.c
System     : Personnel/Payroll.
Created  On: October 29, 1991.
Created  By: Eugene Roy.

DESCRIPTION:
	Program to print payroll cheques.

MODIFICATIONS:        

Programmer     YY/MM/DD       Description of modification
~~~~~~~~~~     ~~~~~~~~       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Andre Cormier  92/09/16       Put some close_file() ; too many ISAM files
			      were openned at the same time for processing
			      one employee at a time.

Andre Cormier  92/09/17       Add code to update journal history file.

Andre Cormier  92/09/18       Change deletion of journal one by one when
			      updating journal history file instead of doing
			      an unlink_file.

L.Robichaud	1994/05/12	Add a new function for the pay advance feature
			called ProcessAdv();
L.Robichaud	1996/09/	Add code and modify screen to allow the user
			to enter the date to appear on the top of the cheque.

L.Robichaud	97/05/20	In about April I add code to this program to 
			recognize a S11 and S12 attendance code to e for a half
			day sick and a full day sick accordingly.  This was 
			added for the employees of the Avalon East School Board.
			Today I added the code needed to recognize a V11 and a 
			V12 for vacations in the same manner.
------------------------------------------------------------------------*/
#define 	MAIN 
#define		MAINFL	CHQHIST		/* main file used */

#include <stdio.h>
#include <cfomstrc.h>
#include <repdef.h>
#include <bfs_defs.h>
#include <bfs_com.h>
#include <bfs_pp.h>

#define	SYSTEM		"ACCOUNTS PAYABLE"	/* Sub System Name */
#define	MOD_DATE	"23-JAN-90"		/* Program Last Modified */
#define	SCR_NAME	"pay_cheque"		/* First screen */

#define	SHORT_CHQS 	SW1

#define	ST_FLD		400 
#define	END_FLD		1500 
#define MESG_FLD	1400
#define FUND_FLD	400
#define ACCT_FLD	500
#define CHQNO_FLD	600
#define CHQDATE_FLD	700
#define PRINTER_FLD	800
#define OPTION_FLD	900

#define EXIT	12

#ifdef ENGLISH
#define PAID_Y	"Y"
#define PAID_N	"N"

#define PAY_SYS	'P'
#define PROCCHQ	'C'
#define EXITOPT	'E'

#define	YES	'Y'
#define NO	'N'
#define EDIT	'E'
#define CANCEL	'C'

#define MANUAL	'M'
#else
#define PAID_Y	"O"
#define PAID_N	"N"

#define PAY_SYS	'P'
#define PROCCHQ	'T'
#define EXITOPT	'F'

#define	YES	'O'
#define NO	'N'
#define EDIT	'M'
#define CANCEL	'A'

#define MANUAL	'M'
#endif
/* cheque.sth - header for C structure generated by PROFOM EDITOR */

typedef struct	{

	char	s_pgm[11];	/* STRING XXXXXXXXXX 	Field 100 */
	long	s_rundate;	/* NUMERIC 9999F99F99 	Field 300 */
	short	s_funds;	/* NUMERIC 999		Field 400 */
	char	s_acct[19];	/* STRING X(18)		Field 500 */
	long	s_chq_no;	/* NUMERIC 999999 	Field 600 */
	long	s_chq_date;	/* Date to be on cheque for cashing */
	short	s_printer;	/* NUMERIC 99 		Field 800 */
	char	s_resp[2]; 	/* STRING X 		Field 900 */
	long	s_no_man;	/* NUMERIC 99999 	Field 1000 */
	long	s_no_writ;	/* NUMERIC 99999 	Field 1000 */
	long	s_no_tot;	/* NUMERIC 99999 	Field 1100 */
	double	s_netpay;	/* NUMERIC 999999999.99 Field 1400 */
	char	s_mesg[78];	/* STRING X(78) 	Field 1500 */
	char	s_opt[2];	/* STRING X 		Field 1600 */
	} S_STRUCT;

static	S_STRUCT	s_sth ;

/* PROFOM Related variables */

struct  	stat_rec  sr;	/* PROFOM status rec */

static	Chq_hist	chq_hist ;	/* Cheque History record */
static	Chq_reg	chq_reg ;	/* Cheque Register record */
static	Gl_rec		gl_rec ;	/* gl master record */
static 	Tr_hdr		tr_hdr ;
static	Tr_item		tr_item ;
static	Pa_rec		pa_rec ;
static	Sen_par		sen_par ;

static	Pay_param	pay_param;
static	Jr_ent		jr_ent;
static	Jrh_ent		jrh_ent;
static	Time	time_rec;
static	Time_his	time_his;
static	Pay_earn	pp_earn;
static	Pp_ben		pp_ben;
static	Pay_ded		pp_ded;
static	Pay_garn	pp_garn;
static	Pay_loan	pp_loan;

static	Emp	emp_rec;
static	Emp_garn	emp_garn;
static	Emp_earn	emp_earn;
static	Emp_ded	emp_ded;
static	Emp_ins	emp_ins;
static	Emp_bh	emp_bh;
static	Emp_dh	emp_dh;
static	Emp_gr_his	emp_gh;
static	Emp_loan	emp_loan;
static	Emp_ln_his	emp_lh;
static	Emp_sched1	emp_sched1;
static	Earn	earnings;
static	Deduction	deduction;
static	Class	class;
static	Pay_per	pay_period;
static	Pay_per_it	pay_per_it;
static	Man_chq	man_chq;
static	Reg_pen	reg_pen;
static	Ded_group	ded_grp;
static	Emp_at_his	att_his, tmp_att_his;
static	Barg_unit	barg_unit;
static	Att	att;

Ctl_rec		ctl_rec ;	/* Control record */

char 	e_mesg[100];	/* dbh will return err msg in this */
static	long	chq_no,	temp_chq_no  ;
static	int	no_of_items ;
static	char	temp_buf[80] ;	/* work variable for tedit */
static	double	employer_share;
static	double	total_gross;
static	double	total_deductions;
static	double	ded_tot;
static	double	bank_amt ;
static 	long	parm_date ; 
static  int	NO_OF_ITEMS ;
static	double	ytd_gross;
static	double	ytd_tax;
static	double	ytd_uic;
static	double	ytd_cpp;
static	double	ytd_reg;
static	double	ytd_ben;
static	double	ytd_uic_earn;
static	double	tot_units;
static	double	rate;
static	int	no_lines;
static	double	man_amount;

int	Validation();
int	Window();

double 	D_Roundoff();

static	long	tmp_seq_no;
static	short	bank_item_no;
static	short	item_no;
static long	w_chq_no ;
static char	emp_name[48];

main(argc,argv)
int argc;
char *argv[];
{
int 	retval ;

	strncpy(SYS_NAME,SYSTEM,50);	/* Sub system name */
	strncpy(CHNG_DATE,MOD_DATE,10);	/* Modification Date */
	proc_switch(argc, argv, CHQHIST) ; 	/* Process Switches */

	if (SHORT_CHQS)
		NO_OF_ITEMS = 9;  
	else
		NO_OF_ITEMS = 9;  

	STRCPY(sr.termnm,terminal);	/* Copy Terminal Name */

	retval = get_param(&pa_rec, BROWSE, 1, e_mesg) ;
	if(retval < 1) {

#ifdef ENGLISH
		printf("Parameters Are Not Setup..") ;
#else
		printf("Parametres ne sont pas etablis..") ;
#endif
		close_dbh() ;
		exit(-1) ;
	}
	close_file(PARAM);

	if (Initialize()<0)
		exit(-1);		/* Initialization routine */

	if ( Process() < 0) { 		/* Initiate Process */
		Close();
		exit(-1);
	}

	Close();			/* return to menu */
	exit(NOERROR);

} /* END OF MAIN */

/*-------------------------------------------------------------------*/
/* Reset information */
Close()
{
	/* Set terminal back to normal mode from PROFOM */

	fomcs();
	fomrt();
	close_dbh();			/* Close files */
	close_rep();
}
/*-------------------------------------------------------------------*/
/* Initialize PROFOM  and Screens*/
Initialize()
{
	if(InitProfom()<0) { 			/* Initialize PROFOM */
		fomcs();
		fomrt();
		return(-1);
	}	
	if(InitScreens()<0) { 
		fomcs();
		fomrt();
		return(-1);
	}	
	return(NOERROR);
}

/*-------------------------------------------------------------------*/
/* Initialize PROFOM */

InitProfom()
{
	fomin(&sr);
	/* Check for Error */
	ret( err_chk(&sr) );

	fomcf(1,1);			/* Enable Print screen option */
	return(NOERROR);
}	/* InitProfom() */
/*----------------------------------------------------------------*/
/* Initialize screens before going to process options */
InitScreens()
{
	int	retval ;

	STRCPY(sr.scrnam,NFM_PATH);
	strcat(sr.scrnam,SCR_NAME) ;

	STRCPY(s_sth.s_pgm,PROG_NAME);
	s_sth.s_rundate = get_date();	/* get Today's Date in YYMMDD format */
	s_sth.s_mesg[0] = HV_CHAR ;
	s_sth.s_opt[0] = HV_CHAR ;

	/* Move High Values to 1st screen data fields & Display */
	retval = ClearScreen() ;
	if( retval < 0 ) return(-1) ;

	return(NOERROR);

}	/* InitScreens() */
/*-----------------------------------------------------------------*/
InitPrinter()
{
	char	resp[2] ;
	char	discfile[15] ;

	/* Always to Printer */
	STRCPY( resp, "P" );
	discfile[0] = '\0';

	if( opn_prnt( resp, discfile, s_sth.s_printer, e_mesg, 0 )<0 ){
		fomen(e_mesg); get();
		return(-1);
	}
	return(NOERROR) ;
}
/*-----------------------------------------------------------------*/
InitPrinter1()
{
	char	resp[2] ;
	char	discfile[15] ;

	/* Always to Printer */
	STRCPY( resp, "F" );
	strcpy(discfile,"paychq.dat");

	if( opn_prnt( resp, discfile, s_sth.s_printer, e_mesg, 0 )<0 ){
		fomen(e_mesg); get();
		return(-1);
	}
	return(NOERROR) ;
}
/*-----------------------------------------------------------------*/
/* Clears the screen. 						   */
ClearScreen()
{
	s_sth.s_funds = LV_SHORT;
	s_sth.s_acct[0] = LV_CHAR;
	s_sth.s_chq_no = LV_LONG;
	s_sth.s_chq_date = LV_LONG;
	s_sth.s_printer = LV_SHORT;
	s_sth.s_resp[0] = LV_CHAR ;
	s_sth.s_no_man = HV_LONG;
	s_sth.s_no_writ = HV_LONG;
	s_sth.s_no_tot = HV_LONG;
	s_sth.s_netpay = HV_DOUBLE;
	
	return(WriteFields((char *)&s_sth,ST_FLD,END_FLD) ) ;
}
/*-----------------------------------------------------------------*/
Process()
{
	int	err;

	s_sth.s_mesg[0] = HV_CHAR;
	DispMesgFld((char *)&s_sth);	
	for( ; ; ){

#ifdef ENGLISH
		fomer("C(heque Processing), E(xit)");
#else
		fomer("T(raitement de cheque), F(in)");
#endif
		sr.nextfld = OPTION_FLD;
		fomrf((char *)&s_sth);
		ret(err_chk(&sr));

		switch(s_sth.s_resp[0]) {
		case  EXITOPT :
			return(EXIT);
		case  PROCCHQ :
			CHKACC(err,ADD,e_mesg);	
			CHKACC(err,UPDATE,e_mesg);	
			err = ChqProcess() ;
			break ;
		default :
			continue;
		}

		if(NOACCESS == err) {
			fomen(e_mesg);
			get();
		}
		if(PROFOM_ERR == err)	return(PROFOM_ERR);  /* PROFOM ERROR */
		if(DBH_ERR == err) {
			DispError((char *)&s_sth,e_mesg);
#ifdef ENGLISH
			sprintf(e_mesg,"%s %d Dberror: %d Errno: %d",
				"System Error... Iserror:",
				iserror, dberror, errno);
#else
			sprintf(e_mesg,"%s %d Dberror: %d Errno: %d",
				"Erreur du systeme... Iserror:",
				iserror, dberror, errno);
#endif
			DispError((char *)&s_sth,e_mesg);
			return(DBH_ERR); /* DBH ERROR */
		
		}
	}      /*   end of the for( ; ; )       */
}
/*-----------------------------------------------------------------*/
ChqProcess()
{
	int 	retval ;
	int	prntno;
	char	devname[30];

	retval = ReadInfo() ;
	if( retval < 0 ) return(retval) ;
	if( retval == EXIT ) return(NOERROR) ;

	retval = ConfirmScreen() ;
	if( retval != YES ) 
		return(NOERROR) ;
	
#ifdef ENGLISH
        retval = GetOption((char *)&s_sth, "Are you ready to print CHEQUES (Y/N)?","YN") ;
#else
        retval = GetOption((char *)&s_sth, "Etes-vous prets a imprimer les cheques (O/N)?","ON") ;
#endif

	if(retval != YES) 
	return(NOERROR) ;

	if(InitPrinter()<0) {
		return(-1);
	}	

	retval = DoTestPrint() ;

	close_rep();
	if(InitPrinter1()<0) {
		return(-1);
	}	

	retval = ChequeProcess();
	if( retval < 0 ) 
		return(retval) ;

	close_rep();

	/* Printer option */
	prntno = s_sth.s_printer;
	retval = get_prn_fd(prntno,devname);
	if(retval < 0){

#ifdef ENGLISH
		strcpy(s_sth.s_mesg,"Given Printer# NOT Found in Terminal/Printer ");
		strcat(s_sth.s_mesg,"Maintenance File");
#else
		strcpy(s_sth.s_mesg,"#d'imprimante donne pas retrouve dans le Dossier d'entretien");
		strcat(s_sth.s_mesg," du term/imprimante");
#endif
		return(-1);
	}
#ifdef ENGLISH
	STRCPY(s_sth.s_mesg, "CHEQUES being Printed, PLEASE WAIT");
#else
	STRCPY(s_sth.s_mesg, "Les CHEQUES sont en train d'etre imprimer, ATTENDEZ S.V.P.");
#endif
	DispMesgFld((char *)&s_sth);
	fflush(stdout) ;

	strcpy(e_mesg,"cat paychq.dat > ");
	strcat(e_mesg,devname);
	system(e_mesg);
	strcpy(e_mesg,"echo  > ");
	strcat(e_mesg,devname);
	system(e_mesg);

	for( ; ; ) {
#ifdef ENGLISH
        	retval = GetOption((char *)&s_sth, "Are you ready to print reports (Y/N)?","YN") ;
#else
        	retval = GetOption((char *)&s_sth, "Etes-vous prets a imprimer le REGISTRE DES CHEQUES (O/N)?","ON") ;
#endif
		if(retval == YES) 
			break ;
	}

#ifdef ENGLISH
	STRCPY(s_sth.s_mesg, "Generating and Printing the CHEQUE REGISTER") ;
#else
	STRCPY(s_sth.s_mesg, "Engendre et imprime le REGISTRE DES CHEQUES") ;
#endif
	DispMesgFld((char *)&s_sth);
	fflush(stdout) ;

	retval = cheqreg(1);
	if(retval < 0) return(retval);

	for( ; ; ){
		strcpy(e_mesg,"cat cheqreg.dat > ");
		strcat(e_mesg,devname);
		system(e_mesg);
		strcpy(e_mesg,"echo  > ");
		strcat(e_mesg,devname);
		system(e_mesg);

		for( ; ; ) {
#ifdef ENGLISH
       		 	retval = GetOption((char *)&s_sth, "Reprint CHEQUE REGISTER (Y/N)?","YN") ;
#else
       		 	retval = GetOption((char *)&s_sth, "Re-imprimer le REGISTRE DES CHEQUES (O/N)?","ON") ;
#endif
			if(retval == YES || retval == NO) 
				break ;
		}
		if(retval == NO) break;
	}

#ifdef ENGLISH
	STRCPY(s_sth.s_mesg, "Generating and Printing the JOURNAL LISTING") ;
#else

	STRCPY(s_sth.s_mesg, "Engendre et imprime la LISTE DE JOURNAL ") ;
#endif
	DispMesgFld((char *)&s_sth);
	fflush(stdout) ;

	retval = joursum(1);
	if(retval < 0) return(retval);

	for( ; ; ){
		strcpy(e_mesg,"cat joursum.dat > ");
		strcat(e_mesg,devname);
		system(e_mesg);
		strcpy(e_mesg,"echo  > ");
		strcat(e_mesg,devname);
		system(e_mesg);
	
		for( ; ; ) {
#ifdef ENGLISH
       		 	retval = GetOption((char *)&s_sth, "Reprint JOURNAL LISTING (Y/N)?","YN") ;
#else
       		 	retval = GetOption((char *)&s_sth, "Re-imprimer le LISTE DE JOURNAL (O/N)?","ON") ;
#endif
			if(retval == YES || retval == NO) 
				break ;
		}
		if(retval == NO) break;
	}

	unlink_file(JR_ENT);
	unlink_file(CHQ_REG);
	return(NOERROR) ;
}
/*-----------------------------------------------------------------------*/
/*                                                                       */
/* Reads Cheque processing information.                                  */
ReadInfo()
{
	int 	i,retval ;

	/* In Add mode turn off dup control for key fields.
	   Other modes reverse it */
	for(i = FUND_FLD ; i <= CHQDATE_FLD ; i += 100) {
		fomca1(i,19,2) ;	/* Off Dup Control */
		fomca1(i,10,1) ;
	}
	fomca1(750,19,2) ;	/* The printer duplication and ESC F */
	fomca1(750,10,1) ;

	sr.nextfld = FUND_FLD;
	sr.endfld = PRINTER_FLD;
	fomud((char*)&s_sth);	/* Update Dup Buffers */

#ifdef ENGLISH
	STRCPY(s_sth.s_mesg,"Press ESC-F to Go Back to Option:");
#else
	STRCPY(s_sth.s_mesg,"Appuyer sur ESC-F pour retourner a Option:");
#endif
	DispMesgFld((char *)&s_sth);

	s_sth.s_funds = 1 ;
	retval = WriteFields((char *)&s_sth,FUND_FLD,FUND_FLD) ;
	if (retval < 0) return(retval) ; 
	s_sth.s_funds = LV_SHORT ;
	s_sth.s_printer = 1 ;
	retval = WriteFields((char *)&s_sth,PRINTER_FLD,PRINTER_FLD) ;
	if (retval < 0) return(retval) ; 
	s_sth.s_printer = LV_SHORT ;

	i = ReadFields((char *)&s_sth,FUND_FLD, PRINTER_FLD,Validation,Window,1); 
	if(PROFOM_ERR == i || DBH_ERR == i) return(i) ;
	if(EXIT == i){
		s_sth.s_mesg[0] = HV_CHAR;
		DispMesgFld((char *)&s_sth);
		return(i) ;
	}
	return(NOERROR) ;
}
/*-----------------------------------------------------------------------*/
/*  Printing the Test as many times needed for cheques to line up        */
DoTestPrint()
{
	int 	i,	retval ;

	STRCPY(temp_buf, "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX") ;

	for( ; ; ) {
#ifdef ENGLISH
		retval = GetOption((char *)&s_sth,"Do you want a Test Print (Y/N)?","YN") ;
#else
		retval = GetOption((char *)&s_sth,"Desirez-vous un test d'impression (O/N)?","ON") ;
#endif

		if( retval == NO ) 
			break ;

		mkln(19,"999",3);	/* fund */
		mkln(24,"999999",6) ;	/* cheque number */
		mkln(32,"999999999999",12) ;	/* employee number */
		mkln(46,"99/99/99",8) ;		/* date */
		mkln(57,"$99,999,999.99-",15) ;	/* cheque amount */
		for(i = 0;i<=2;i++)
			if( prnt_line() < 0) return(-1) ;

		mkln(8,temp_buf,48);	/* employee name */
		if( prnt_line() < 0) return(-1) ;
		mkln(8,temp_buf,30);	/* employee address 1 */
		if( prnt_line() < 0) return(-1) ;
		mkln(8,temp_buf,30);	/* employee address 2 */
		if( prnt_line() < 0) return(-1) ;
		mkln(8,temp_buf,30);	/* employee address 3 */
		if( prnt_line() < 0) return(-1) ;
		mkln(8,temp_buf,30);	/* city */
		if( prnt_line() < 0) return(-1) ;
		mkln(8,temp_buf,10) ;	/* postal code */
		for( i=0; i<=8 ;i++)   		/* print blank lines */
			if( prnt_line() < 0) return(-1) ;

		if( prnt_line() < 0) return(-1) ;
		mkln(3,"999",3);	/* fund */
		mkln(8,"999999",6) ;	/* cheque number */
		mkln(16,"999999999999",12) ;	/* employee number */
		mkln(32,temp_buf,40);	/* employee name */

		if( prnt_line() < 0) return(-1) ;
		if( prnt_line() < 0) return(-1) ;
		if( prnt_line() < 0) return(-1) ;
		mkln(3,"XXXXXX",6) ;	/* earnings code */
		mkln(10,"99.99-",6) ;	/* earnings units */
		mkln(16,"99.99-",6) ;	/* earnings rate */
		mkln(22,"99,999.99-",10) ;	/* earnings amount */
		mkln(32,"XXXXXX",6) ;	/* deduction code */
		mkln(39,"ZZ9.99-",7) ;	/* deduction amount */
		mkln(46,"ZZ9.99-",7) ;	/* employer share */
		mkln(54,"XXXXXX",6) ;	/* deduction code */
		mkln(61,"ZZ9.99-",7) ;	/* deduction amount */
		mkln(69,"ZZ9.99-",7) ;	/* employer share */
		if( prnt_line() < 0) return(-1) ;
		for( i=0; i<(NO_OF_ITEMS) ;i++)    	/* print blank lines */
			if( prnt_line() < 0) return(-1) ;

		if( prnt_line() < 0) return(-1) ;

		mkln(28,"99,999.99-",10) ; 	/* vacation bank balance */
		if( prnt_line() < 0) return(-1) ;
		mkln(29,"9,999.99-",9) ; 	/* sick bank balance */
		mkln(43,"9,999.99-",9) ;	/* gross pay */
		mkln(54,"9,999.99-",9) ;	/* deductions */
		mkln(64,"999,999.99-",11) ;	/* net pay */

		if( prnt_line() < 0) return(-1) ;
		if( prnt_line() < 0) return(-1) ;

		mkln(3,"999,999.99-",11) ;	/* year to date gross pay */
		mkln(15,"9,999.99-",9) ;	/* year to date income tax */
		mkln(25,"999.99-",9) ;	/* year to date cpp */
		mkln(34,"999.99-",9) ;	/* year to date uic */
		mkln(43,"999.99-",9) ;	/* year to date uic earn */
		mkln(52,"999,999.99-",11) ;	/* year to date benefits */
		mkln(64,"999,999.99-",11) ;	/* year to date pension */

		if( prnt_line() < 0) return(-1) ;
		if( prnt_line() < 0) return(-1) ;
		if( prnt_line() < 0) return(-1) ;
		if( prnt_line() < 0) return(-1) ;
		if( prnt_line() < 0) return(-1) ;
		if( prnt_line() < 0) return(-1) ;
		if( prnt_line() < 0) return(-1) ;
#ifdef ENGLISH
		fomen("The Test Print Is Printing. Press any key to continue.");
#else
		fomen("La copie d'essaie imprime. Appuyer une touche pour continuer.");
#endif
		get();
/*		rite_top();*/
	}
	return(NOERROR) ;
}
/*-----------------------------------------------------------------------*/
/* Process manual cheque associated with employee cheque */

ProcessAdv()
{
	int	retval;

	man_amount = 0;
	strcpy(man_chq.mc_emp_numb,emp_rec.em_numb);
	man_chq.mc_date = pp_earn.pe_date;
	flg_reset(MAN_CHQ);

	/* get all the advances and add together */
	for(;;){
		retval = get_n_man_chq(&man_chq,BROWSE,1,FORWARD,e_mesg) ;
		if( retval == EFL)
			break;
		if( retval < 0 ) {
			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
			return(retval) ;
			}
		if(strcmp(man_chq.mc_emp_numb,emp_rec.em_numb)==0 &&
		  man_chq.mc_date == pp_earn.pe_date)
			man_amount += man_chq.mc_amount;
		else
			break;
	}

	man_chq.mc_chq_numb = pp_earn.pe_date;
	flg_reset(MAN_CHQ);
	/* Get any adjustments for this cheque */
	for(;;){
		retval = get_n_man_chq(&man_chq,BROWSE,2,FORWARD,e_mesg) ;
		if( retval == EFL)
			break;
		if( retval < 0 ) {
			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
			return(retval) ;
		}
		if(strcmp(man_chq.mc_emp_numb,emp_rec.em_numb)==0 &&
		  man_chq.mc_chq_numb == pp_earn.pe_date)
			man_amount += (man_chq.mc_amount * -1);
		else
			if(man_chq.mc_chq_numb > pp_earn.pe_date)
				break;
	}
	return(NOERROR);
}		
/*-----------------------------------------------------------------------*/
/*                                                                       */
/* Reads the cheque and prints the cheque after accumulating invoices.   */
ChequeProcess()
{
	int	retval ;

#ifdef ENGLISH
	STRCPY(s_sth.s_mesg, "CHEQUES being Generated, PLEASE WAIT");
#else
	STRCPY(s_sth.s_mesg, "Les CHEQUES sont en train d'etre traiter, ATTENDEZ S.V.P.");
#endif
	DispMesgFld((char *)&s_sth);
	fflush(stdout) ;

	s_sth.s_no_man = 0;
	s_sth.s_no_writ = 0 ;
	s_sth.s_no_tot = 0 ;
	s_sth.s_netpay = 0.00 ;
	
	bank_amt = 0.00 ;

	temp_chq_no = s_sth.s_chq_no+1;

	/* Processing Regular Earnings for Employees.	*/
	pp_earn.pe_cc = 0;
	pp_earn.pe_numb[0] = '\0';
	pp_earn.pe_pp = 0;
	pp_earn.pe_date = 0;
	flg_reset(PP_EARN) ;

	for( ; ; ) {
		retval = get_n_pp_earn(&pp_earn,UPDATE,1,FORWARD,e_mesg) ;
		if( retval == EFL ) 
			break;
		if( retval < 0) {
			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
			seq_over(PP_EARN);
			return(retval) ;
		}

		/* Check to see if a rerun or if earnings are negative */
		/* If condition is satisfied then no cheque is printed	*/

		if ( pp_earn.pe_cp_chq_no != 0 || pp_earn.pe_net <= 0) {
			continue ;
		}

		strcpy(emp_rec.em_numb,pp_earn.pe_numb);
		retval = get_employee(&emp_rec,BROWSE,0,e_mesg);
		if(retval < 0){
			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
			return(-1);
		}
		strcpy(emp_name,emp_rec.em_first_name);
		strcat(emp_name," ");
		strcat(emp_name,emp_rec.em_last_name);

		strcpy(barg_unit.b_code,emp_rec.em_barg);
		barg_unit.b_date = get_date();
		flg_reset(BARG);

		retval = get_n_barg(&barg_unit,BROWSE,0,BACKWARD,e_mesg);
		if(retval == EFL ||
			strcmp(barg_unit.b_code, emp_rec.em_barg) != 0){
			sprintf(e_mesg,"Bargaining Unit does no exist: %s",
				emp_rec.em_barg);
  			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			continue;
		}
		if(retval < 0){
  			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			continue;
		}
		seq_over(BARG);

		/* Process manual cheque associated with employee cheque */
		retval = ProcessAdv();
		if(retval < 0) return(retval);

		/* Calculate Employee YTD Earnings	*/
		retval = EmpYtd() ;
		if(retval < 0){
			roll_back(e_mesg);
			return(-1);
		}

		/* Write Cheque to Cheque History	*/
		/* Type "R" for regular cheque.		*/
		retval = InitChqHist("R") ;
		if(retval < 0){
			roll_back(e_mesg);
			return(-1);
		}
	
		/* Print Cheque				*/
		retval = PrntRec() ;
		if(retval < 0){
			roll_back(e_mesg);
			return(-1);
		}

		/* Update Employee History	 	*/
		if( UpdtEmp()<0) {
			roll_back(e_mesg);
			return(-1);
		}

		/* Write Time Records to Time History	*/
		if( UpdtTime()<0) {	
			roll_back(e_mesg);
			return(-1);
		}

		/* Write Cheque to Cheque Register for report	*/
		if( InitChqReg() < 0){
			roll_back(e_mesg);
			return(-1);
		}

		/* Update Control File With Last Cheque Number	*/
		if( WriteRecords() < 0 ){
			roll_back(e_mesg);
			return(-1);
		}

		pp_earn.pe_cp_chq_no = temp_chq_no ;
		/* Update PP Earn File With Cheque Number	*/
		if( put_pp_earn(&pp_earn,UPDATE,e_mesg) < 0){
			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
			return(-1);
		}
		if( commit(e_mesg)<0 ){	/* If everything goes right, commit */
			DispError((char *)&s_sth,e_mesg) ;
			return(-1);
		}

		s_sth.s_no_tot++ ;
		s_sth.s_no_writ++ ;
		s_sth.s_netpay += D_Roundoff(pp_earn.pe_net + man_amount);
		temp_chq_no ++;
	}
	seq_over(PP_EARN);
	close_file(PP_EARN);

	if(temp_chq_no == 0){
#ifdef ENGLISH
		DispError((char *)&s_sth,"No CHEQUES to Process");
#else
		DispError((char *)&s_sth,"Pas de CHEQUES a traiter");

#endif
		return(ERROR) ;
	}

	/* Processing Manual Cheques - Advances for employees not	*/
	/* receiving cheques. 						*/
	man_chq.mc_emp_numb[0] = LV_CHAR;
	man_chq.mc_date = pp_earn.pe_date;
	flg_reset(MAN_CHQ);

	for( ; ; ){
		retval = get_n_man_chq(&man_chq,BROWSE,1,FORWARD,e_mesg) ;
		if( retval == EFL )
			break;

		if( retval < 0) {
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg) ;
			seq_over(MAN_CHQ);
			return(retval) ;
		}

		strcpy(emp_rec.em_numb,man_chq.mc_emp_numb);

		retval = get_employee(&emp_rec,BROWSE,0,e_mesg);
		if(retval < 0){
			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
			return(-1);
		}

		strcpy(emp_name,emp_rec.em_first_name);
		strcat(emp_name," ");
		strcat(emp_name,emp_rec.em_last_name);

		/* Write Manual Cheque to Cheque History	*/
		retval = InitChqHist(MANUAL) ;
		if(retval < 0){
			roll_back(e_mesg);
			return(-1);
		}
		s_sth.s_no_man++;
	}
	seq_over(MAN_CHQ);
	close_file(MAN_CHQ);

	/* Update General Ledger		*/
	if( UpdtGl()<0) {
		roll_back(e_mesg);
		return(-1);
	}
	if( commit(e_mesg)<0 ){	/* If everything goes right, commit */
		DispError((char *)&s_sth,e_mesg) ;
		return(-1);
	}

	retval = WriteFields((char *)&s_sth,ST_FLD, END_FLD - 200) ;
	if (retval < 0) return(-1) ;

	return(NOERROR) ;

}
/*----------------------------------------------------------------------------*/
UpdtTime()
{
	int	retval, i;

	strcpy(time_rec.tm_numb,emp_rec.em_numb);
	time_rec.tm_date = pp_earn.pe_date;
	time_rec.tm_no = 0;
	flg_reset(TIME);

	for( ;  ; ){
		retval = get_n_ptime(&time_rec,UPDATE,0,FORWARD,e_mesg) ;
		if(retval == EFL ||
		   strcmp(time_rec.tm_numb,emp_rec.em_numb) != 0 ||
		   time_rec.tm_date != pp_earn.pe_date )
			break;

		if( retval < 0) {
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg) ;
			seq_over(TIME);
			return(retval) ;
		}

		if(strcmp(time_rec.tm_earn,"OB10") == 0 ||
		   strcmp(time_rec.tm_earn,"OB15") == 0 ||
		   strcmp(time_rec.tm_earn,"OB20") == 0)  {
			retval = UpdtOvBank();
			if(retval < 0)	return(retval);
		}

		strcpy(time_his.tmh_numb,time_rec.tm_numb);
		time_his.tmh_date = time_rec.tm_date;
		time_his.tmh_no = time_rec.tm_no;
		time_his.tmh_pp = time_rec.tm_pp;
		time_his.tmh_week = time_rec.tm_week;
		time_his.tmh_fund = time_rec.tm_fund;
		strcpy(time_his.tmh_adj,time_rec.tm_adj);
		strcpy(time_his.tmh_class,time_rec.tm_class);
		strcpy(time_his.tmh_earn,time_rec.tm_earn);
		strcpy(time_his.tmh_exp,time_rec.tm_exp);
		strcpy(time_his.tmh_trans,time_rec.tm_trans);
		for(i=0;i<7;i++){
			time_his.tmh_units[i] = time_rec.tm_units[i];
		}
		time_his.tmh_tot_amt = time_rec.tm_tot_amt;
		time_his.tmh_cost = time_rec.tm_cost;
		strcpy(time_his.tmh_comment,time_rec.tm_comment);
		strcpy(time_his.tmh_stat,time_rec.tm_stat);
		time_his.tmh_year = time_rec.tm_year;

		retval = get_time_his(&time_his,UPDATE,0,e_mesg) ;
		if( retval < 0 && retval != UNDEF) {
			DispError((char *)&s_sth,e_mesg) ;
			seq_over(TIME_HIS);
			return(retval) ;
		}

		if(retval == UNDEF){
			retval = put_time_his(&time_his,ADD,e_mesg);
			if( retval < 0) {
				roll_back(e_mesg);
				DispError((char *)&s_sth,e_mesg) ;
				return(retval) ;
			}
		}

		retval = put_ptime(&time_rec,P_DEL,e_mesg);
		if( retval < 0) {
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg) ;
			return(retval) ;
		}
		if( commit(e_mesg)<0 ){
			DispError((char *)&s_sth,e_mesg) ;
			return(retval);
		}
		time_rec.tm_no++;
		flg_reset(TIME);
	}
	seq_over(TIME);
	close_file(TIME);
	return(NOERROR);
}

/*----------------------------------------------------------------------------*/
UpdtEmp()
{
	int	retval, week_no;
	int	mode;

	week_no = 0;

	for( ; ; ){
	  if(week_no >= 2) break;
	  if(pp_earn.pe_week_inc[week_no] != 0 ||
		 pp_earn.pe_week_hinc[week_no] != 0){
	    strcpy(pay_per_it.ppi_code,barg_unit.b_pp_code);
	    pay_per_it.ppi_numb = pp_earn.pe_pp;
	    pay_per_it.ppi_year = 9999;
	    flg_reset(PAY_PER_ITEM);

	    retval = get_n_pp_it(&pay_per_it,BROWSE,3,BACKWARD,e_mesg);
	    if(retval<0 || strcmp(pay_per_it.ppi_code,barg_unit.b_pp_code)!=0 ||
		pay_per_it.ppi_numb != pp_earn.pe_pp){
	  	fomer("Error Reading Pay Period Item File") ;
	  	return(NOERROR);
	    }
	    seq_over(PAY_PER_ITEM);
	
	    strcpy(emp_earn.en_numb,emp_rec.em_numb);
	    emp_earn.en_year = pay_per_it.ppi_year;
	    emp_earn.en_pp = pp_earn.pe_pp;
	    emp_earn.en_week = week_no+1;

	    retval = get_emp_earn(&emp_earn,BROWSE,1,e_mesg) ;
	    if( retval < 0 && retval != UNDEF) {
		DispError((char *)&s_sth,e_mesg) ;
		seq_over(EMP_EARN);
		return(retval) ;
	    }

	    if(retval == UNDEF){
	  	mode = ADD;
	    	strcpy(emp_earn.en_numb,emp_rec.em_numb);
	  	emp_earn.en_date = pay_per_it.ppi_end_date;
	    	emp_earn.en_year = pay_per_it.ppi_year;
	   	emp_earn.en_pp = pp_earn.pe_pp;
	  	emp_earn.en_week = week_no+1;

	  	emp_earn.en_reg_inc = D_Roundoff(pp_earn.pe_week_inc[week_no]); 
	  	emp_earn.en_reg_units =
			 D_Roundoff(pp_earn.pe_week_units[week_no]);
	  	emp_earn.en_high_units =
			 D_Roundoff(pp_earn.pe_week_hunits[week_no]);
	  	emp_earn.en_high_inc =
			 D_Roundoff(pp_earn.pe_week_hinc[week_no]);
	  	emp_earn.en_def_inc =
			 D_Roundoff(pp_earn.pe_wk_def_inc[week_no]);
	 	emp_earn.en_cpp =
			 D_Roundoff(pp_earn.pe_week_cpp[week_no]);
		emp_earn.en_cpp_pen =
			 D_Roundoff(pp_earn.pe_wk_cpp_pen[week_no]);
		emp_earn.en_uic =
			 D_Roundoff(pp_earn.pe_week_uic[week_no]);
		emp_earn.en_reg1 =
			 D_Roundoff(pp_earn.pe_week_reg1[week_no]);
		emp_earn.en_reg2 =
			 D_Roundoff(pp_earn.pe_week_reg2[week_no]);
		emp_earn.en_reg3 =
			 D_Roundoff(pp_earn.pe_week_reg3[week_no]);
		emp_earn.en_reg_prior =
			 D_Roundoff(pp_earn.pe_wk_reg_pr[week_no]);
		emp_earn.en_reg_opt =
			 D_Roundoff(pp_earn.pe_wk_reg_opt[week_no]);
		emp_earn.en_reg_nonm =
			 D_Roundoff(pp_earn.pe_wk_reg_nonm[week_no]);
		emp_earn.en_tax =
			 D_Roundoff(pp_earn.pe_week_tax[week_no]);
		emp_earn.en_net =
			 D_Roundoff(pp_earn.pe_week_net[week_no]);
	    }
	    else{
		DispError((char *)&s_sth,e_mesg);
		return(retval);
	    }

	    /* Write the cheque number to the employees file L.R. March 95*/
	    emp_earn.en_chq_no = temp_chq_no;

	    emp_earn.en_year = pay_per_it.ppi_year;
	    strcpy(emp_earn.en_reg_pen,emp_rec.em_reg_pen);

	    retval = put_emp_earn(&emp_earn,mode,e_mesg);
	    if( retval < 0) {
		roll_back(e_mesg);
		DispError((char *)&s_sth,e_mesg) ;
		return(retval) ;
	    }
	    retval = commit(e_mesg);
	    if(retval < 0) {
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(ERROR);
	    }
	    week_no++;
	  }
	  else
	    week_no++;
	}
	seq_over(EMP_EARN);
	close_file(EMP_EARN);

	strcpy(emp_ins.in_numb,emp_rec.em_numb);
	emp_ins.in_pp = pp_earn.pe_pp;
	emp_ins.in_date = pp_earn.pe_date;

	retval = get_emp_ins(&emp_ins,UPDATE,0,e_mesg) ;
	if( retval < 0 && retval != UNDEF) {
		roll_back(e_mesg);
		DispError((char *)&s_sth,e_mesg) ;
		return(retval) ;
	}
	if( retval == UNDEF){
	  emp_ins.in_uic_ins = D_Roundoff(pp_earn.pe_uic_ins);
	  emp_ins.in_num_ins_wk = pp_earn.pe_num_ins_wk;

	  retval = put_emp_ins(&emp_ins,ADD,e_mesg);
	  if( retval < 0) {
		roll_back(e_mesg);
		DispError((char *)&s_sth,e_mesg) ;
		return(retval) ;
	  }
	  if( commit(e_mesg)<0 ){	/* If everything goes right, commit */
		DispError((char *)&s_sth,e_mesg) ;
		return(-1);
	  }
	}
	else{
		DispError((char *)&s_sth,
		"Record Already Exists In Employee Insurable Earnings History");
		return(retval); 
	}
	close_file(EMP_INS);

	emp_bh.ebh_amount = 0.00;

	strcpy(pp_ben.pb_numb,emp_rec.em_numb);
	pp_ben.pb_pp = LV_SHORT;
	pp_ben.pb_date = LV_LONG;
	pp_ben.pb_fund = LV_SHORT;
	pp_ben.pb_acct[0] = LV_CHAR;
	pp_ben.pb_code[0] = LV_CHAR;
	flg_reset(PP_BEN) ;

	for( ; ; ) {
		retval = get_n_pp_ben(&pp_ben,BROWSE,0,FORWARD,e_mesg) ;
		if( retval == EFL ||
			strcmp(pp_ben.pb_numb,emp_rec.em_numb) != 0)
			break;

		if( retval < 0 ) {
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg) ;
			seq_over(PP_BEN);
			return(retval) ;
		}

		strcpy(emp_bh.ebh_numb,emp_rec.em_numb);
		strcpy(emp_bh.ebh_code,pp_ben.pb_code);
		emp_bh.ebh_pp = pp_earn.pe_pp;
		emp_bh.ebh_date = pp_earn.pe_date;

		retval = get_emp_bhis(&emp_bh,UPDATE,0,e_mesg) ;
		if( retval < 0 && retval != UNDEF){ 
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg);
			return(retval) ;
		}
		if(retval == UNDEF){
		  if(strcmp(emp_bh.ebh_code,pp_ben.pb_code) != 0){

		    if(emp_bh.ebh_amount != 0){
			retval = put_emp_bhis(&emp_bh,ADD,e_mesg);
			if( retval < 0) {
				roll_back(e_mesg);
				DispError((char *)&s_sth,e_mesg) ;
				return(retval) ;
			}
	  		if( commit(e_mesg)<0 ){	
				DispError((char *)&s_sth,e_mesg) ;
				return(-1);
			}
			emp_bh.ebh_amount = 0;
		    }
		  }
		  strcpy(emp_bh.ebh_code,pp_ben.pb_code);
		  emp_bh.ebh_amount += pp_ben.pb_amount;
		}
		else{
			DispError((char *)&s_sth,"Record Already Exists in Employee Benefit History File") ;
			return(retval) ;
		}
	}
	seq_over(PP_BEN);

	strcpy(pp_ded.pd_numb,emp_rec.em_numb);
	pp_ded.pd_pp = 0;
	pp_ded.pd_date = 0;
	pp_ded.pd_fund = 0;
	pp_ded.pd_acct[0] = '\0';
	pp_ded.pd_code[0] = '\0';
	flg_reset(PP_DED) ;

	for( ; ; ){
		retval = get_n_pp_ded(&pp_ded,BROWSE,0,FORWARD,e_mesg) ;
		if( retval == EFL ||
			strcmp(pp_ded.pd_numb,emp_rec.em_numb) != 0)
			break;

		if( retval < 0) {
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg) ;
			seq_over(PP_DED);
			return(retval) ;
		}

		strcpy(emp_dh.edh_numb,emp_rec.em_numb);
		emp_dh.edh_pp = pp_earn.pe_pp;
		emp_dh.edh_date = pp_earn.pe_date;
		strcpy(emp_dh.edh_code,pp_ded.pd_code);
		strcpy(emp_dh.edh_group,pp_ded.pd_group);

		retval = get_emp_dhis(&emp_dh,UPDATE,0,e_mesg) ;
		if( retval < 0 && retval != UNDEF){
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg);
			return(retval) ;
		}
		if( retval == UNDEF){
		
		  emp_dh.edh_amount = pp_ded.pd_amount;

		  retval = put_emp_dhis(&emp_dh,ADD,e_mesg);
		  if( retval < 0) {
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg) ;
			return(retval) ;
		  }
	  	  if( commit(e_mesg)<0 ){
			DispError((char *)&s_sth,e_mesg) ;
			return(-1);
		  }
		}
		else{
			DispError((char *)&s_sth,"Record Already Exists in Employee Deduction History File") ;
			return(retval) ;
		}
	}
	seq_over(PP_DED);

	strcpy(pp_garn.pg_numb,emp_rec.em_numb);
	pp_garn.pg_pr_cd = 0;
	pp_garn.pg_seq = 0;
	pp_garn.pg_pp = 0;
	pp_garn.pg_fund = 0;
	pp_garn.pg_date = 0;
	flg_reset(PP_GARN) ;

	for( ; ; ) {
		retval = get_n_pp_garn(&pp_garn,BROWSE,0,FORWARD,e_mesg) ;
		if( retval == EFL ||
			strcmp(pp_garn.pg_numb,emp_rec.em_numb) != 0)
			break;

		if( retval < 0) {
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg) ;
			seq_over(PP_GARN);
			return(retval) ;
		}
		strcpy(emp_gh.egh_numb,emp_rec.em_numb);
		emp_gh.egh_pr_cd = pp_garn.pg_pr_cd;
		emp_gh.egh_seq = pp_garn.pg_seq;
		emp_gh.egh_pp = pp_earn.pe_pp;
		emp_gh.egh_date = pp_earn.pe_date;

		retval = get_emp_ghis(&emp_gh,UPDATE,0,e_mesg) ;
		if( retval < 0 && retval != UNDEF) {
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg) ;
			return(retval) ;
		}

		if(retval == UNDEF){
		  emp_gh.egh_amount = pp_garn.pg_amount;

		  retval = put_emp_ghis(&emp_gh,ADD,e_mesg);
		  if( retval < 0) {
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg) ;
			return(retval) ;
		  }
	  	  if( commit(e_mesg)<0 ){
			DispError((char *)&s_sth,e_mesg) ;
			return(-1);
		  }
		}
		else{
			DispError((char *)&s_sth,"Record Already Exists in Employee Garnishment History File") ;
			return(retval) ;
		}

		strcpy(emp_garn.eg_numb, emp_rec.em_numb);
		emp_garn.eg_pr_cd = emp_gh.egh_pr_cd;
		emp_garn.eg_seq = emp_gh.egh_seq;

		retval = get_emp_garn(&emp_garn, UPDATE, 0, e_mesg);
		if(retval < 0){
			DispError((char *)&s_sth,e_mesg);
			return(retval);
		}
		emp_garn.eg_amnt_out -= emp_gh.egh_amount;
		
		retval = put_emp_garn(&emp_garn,UPDATE,e_mesg);
		if(retval < 0){
			DispError((char *)&s_sth,e_mesg);
			return(retval);
		}
	  	if( commit(e_mesg)<0 ){
			DispError((char *)&s_sth,e_mesg) ;
			return(-1);
		}

	}
	seq_over(PP_GARN);

	strcpy(pp_loan.pc_numb,emp_rec.em_numb);
	pp_loan.pc_pp = 0;
	pp_loan.pc_date = 0;
	pp_loan.pc_code[0] = '\0';
	pp_loan.pc_seq = 0;
	pp_loan.pc_fund = 0;
	pp_loan.pc_acct[0] = '\0';
	flg_reset(PP_LOAN) ;

	for( ; ; ) {
		retval = get_n_pp_loan(&pp_loan,BROWSE,0,FORWARD,e_mesg) ;
		if( retval == EFL ||
			strcmp(pp_loan.pc_numb,emp_rec.em_numb) != 0)
			break;

		if( retval < 0) {
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg) ;
			seq_over(PP_LOAN);
			return(retval) ;
		}

		strcpy(emp_lh.elh_numb,emp_rec.em_numb);
		emp_lh.elh_pp = pp_earn.pe_pp;
		emp_lh.elh_date = pp_earn.pe_date;
		strcpy(emp_lh.elh_code,pp_loan.pc_code);
		emp_lh.elh_seq = pp_loan.pc_seq;

		retval = get_emp_lhis(&emp_lh,BROWSE,0,e_mesg) ;/* ANDRE */
		if( retval < 0 && retval != UNDEF) {
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg) ;
			return(retval) ;
		}
		if(retval == UNDEF){

		  emp_lh.elh_amount = pp_loan.pc_amount;
		  emp_lh.elh_int_amt = pp_loan.pc_int_amt;

		  retval = put_emp_lhis(&emp_lh,ADD,e_mesg);
		  if( retval < 0) {
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg) ;
			return(retval) ;
		  }
	  	  if( commit(e_mesg)<0 ){
			DispError((char *)&s_sth,e_mesg) ;
			return(-1);
		  }
		}
		else{
			DispError((char *)&s_sth,"Record Already Exists in Employee Loan History File") ;
			return(retval) ;
		}

		strcpy(emp_loan.el_numb,emp_rec.em_numb);
		strcpy(emp_loan.el_code,pp_loan.pc_code);
		emp_loan.el_seq = pp_loan.pc_seq;

		retval = get_emp_loan(&emp_loan,UPDATE,0,e_mesg);
		if(retval < 0){
			DispError((char *)&s_sth,e_mesg) ;
		  	return(ERROR);
		}
		emp_loan.el_amnt_out = D_Roundoff(emp_loan.el_amnt_out -
				 pp_loan.pc_amount);
		emp_loan.el_pp_num_el -= emp_loan.el_pp_num_el;
		
		retval = put_emp_loan(&emp_loan,UPDATE,e_mesg) ;
		if(retval < 0) {
			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
			return(retval);
		}
		retval = commit(e_mesg) ;
	  	if(retval < 0) {
			DispError((char *)&s_sth,e_mesg) ;
		  	roll_back(e_mesg);
		  	return(retval);
		}
	}
	seq_over(PP_LOAN);

	return(NOERROR) ;
}
/*----------------------------------------------------------------------------*/
InitChqHist(type)
char	*type;
{
	int	retval;

	chq_hist.ch_sys[0] = PAY_SYS ;
	if(strcmp(type,MANUAL) == 0){
		STRCPY(chq_hist.ch_accno, man_chq.mc_acct);
		chq_hist.ch_chq_no = man_chq.mc_chq_numb ;
		chq_hist.ch_funds = man_chq.mc_fund;
		chq_hist.ch_date = man_chq.mc_date ;
		chq_hist.ch_net_amt = man_chq.mc_amount; 
	}
	else{
		STRCPY(chq_hist.ch_accno, s_sth.s_acct) ;
		chq_hist.ch_chq_no = temp_chq_no ;
		chq_hist.ch_funds = s_sth.s_funds ;
		chq_hist.ch_date = pp_earn.pe_date ;
		chq_hist.ch_net_amt = pp_earn.pe_net + man_amount; 
	}
	STRCPY( chq_hist.ch_name, emp_name) ;
	chq_hist.ch_status[0] = 'O';

	chq_hist.ch_net_amt = D_Roundoff(chq_hist.ch_net_amt);

	retval = put_chqhist(&chq_hist,ADD,e_mesg);
	if(retval == DUPE) return(NOERROR);
	if(retval < 0){
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(retval);
	}
	if( commit(e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg) ;
		return(retval);
	}

	return(NOERROR);
}
/*----------------------------------------------------------------------------*/
InitChqReg()
{
	int	retval;

	chq_reg.cr_numb = temp_chq_no;
	chq_reg.cr_date = pp_earn.pe_date ;
	strcpy(chq_reg.cr_emp_numb,emp_rec.em_numb);
	strcpy(chq_reg.cr_status,"O");
	chq_reg.cr_amount = D_Roundoff(pp_earn.pe_net+man_amount);

	retval = put_chq_reg(&chq_reg,ADD,e_mesg);
	if(retval < 0){
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(retval);
	}
	if( commit(e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg) ;
		return(retval);
	}

	return(NOERROR);
}
/*----------------------------------------------------------------------------*/
/* Writes Cheque History and Cheque Register records.			      */
WriteRecords()
{
	int	retval ;

	if(strcmp(pp_earn.pe_chq_type,"R") == 0){ 
		if( UpdtControl()<0) {
			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
			return(-1);
		}
	}

	if( commit(e_mesg)<0 ){	/* If everything goes right, commit */
		DispError((char *)&s_sth,e_mesg) ;
		return(-1);
	}
	return(NOERROR) ;
}
/*----------------------------------------------------------------*/
/* Validation function() for Key and Header fields when PROFOM returns
  RET_VAL_CHK */

Validation()
{
	int	err,	begin_fld,	end_fld ;

	switch(sr.curfld){
	case	FUND_FLD	:	/* Fund :	*/
		err = CheckFund(s_sth.s_funds,BROWSE) ;
		if(DBH_ERR == err) return(DBH_ERR) ;
		if(err < 0) {
			s_sth.s_funds = LV_SHORT ;
			return(ERROR) ;
		}
		fomer(ctl_rec.desc);
		begin_fld = sr.curfld ;
		end_fld = sr.endfld ;
		STRCPY( s_sth.s_acct, ctl_rec.bank2_acnt) ;
		WriteFields((char *)&s_sth, ACCT_FLD, ACCT_FLD ) ;
		s_sth.s_acct[0] = LV_CHAR ;
		sr.curfld = begin_fld ;
		sr.endfld = end_fld ;
		break ;
	case	ACCT_FLD	:	/* Acct No:	*/
		if (acnt_chk(s_sth.s_acct) < 0)  {
			s_sth.s_acct[0] = LV_CHAR ;
#ifdef ENGLISH
			fomer("Invalid GL Account Number");
#else
			fomer("Numero de compte G/L invalide");
#endif
			return(ERROR) ;
		}
		if( ((strcmp(s_sth.s_acct, ctl_rec.bank2_acnt)) != 0) &&
		    ((strcmp(s_sth.s_acct, ctl_rec.bank2_acnt)) != 0) ) {
#ifdef ENGLISH
			fomer("Must be a Bank Account Number") ;
#else
			fomer("Doit etre un numero de compte de banque") ;
#endif
			s_sth.s_acct[0] = LV_CHAR ;
			return(ERROR) ;
		}
		err = LockGlRecords() ;
		if(err < 0) {
			s_sth.s_acct[0] = LV_CHAR ;
			return(ERROR) ;
		}
		fomer(gl_rec.desc);
		if(strcmp(s_sth.s_acct, ctl_rec.bank2_acnt) == 0) 
			w_chq_no = ctl_rec.bank2_chq ;
		else
			w_chq_no = ctl_rec.bank2_chq ;
			
		begin_fld = sr.curfld ;
		end_fld = sr.endfld ;
		s_sth.s_chq_no = w_chq_no ;
		WriteFields((char *)&s_sth, CHQNO_FLD, CHQNO_FLD ) ;
		s_sth.s_chq_no = LV_LONG ;
		sr.curfld = begin_fld ;
		sr.endfld = end_fld ;
		break ;
	case	CHQNO_FLD	:	/* Cheque no: */

		if(s_sth.s_chq_no < w_chq_no ) {
#ifdef ENGLISH
			fomer("Cheque Number must be greater than last cheque number");
#else
			fomer("Numero de cheque doit etre plus gros que le dernier numero de cheque");
#endif
			s_sth.s_chq_no = LV_LONG;
			return(ERROR) ;
		} 
		begin_fld = sr.curfld ;
		end_fld = sr.endfld ;
		s_sth.s_chq_date = get_date() ;
		WriteFields((char *)&s_sth, CHQDATE_FLD, CHQDATE_FLD ) ;
		s_sth.s_chq_date = LV_LONG;
		sr.curfld = begin_fld ;
		sr.endfld = end_fld ;
		break ;
	case	CHQDATE_FLD	:	/* Cheque Cashing date: */
		break;
	default :
#ifdef ENGLISH
		sprintf(e_mesg,"No Validity Check For Field#  %d",sr.curfld);
#else
		sprintf(e_mesg,"Pas de controle de validite pour le Champ#  %d",sr.curfld);
#endif
		fomen(e_mesg);
		get();
		return(ERROR) ;
	}	/* Switch sr.curfld */

	return(NOERROR) ;
}	/* Validation() */
/*----------------------------------------------------------------*/
Window()
{
	return(NOERROR);
}
/*----------------------------------------------------------------*/
/* Check the given funds availability in file */

CheckFund(fund,mode)
short	fund ;
int	mode ;
{
	int	err ;

	ctl_rec.fund = fund ;

	err = get_ctl(&ctl_rec, mode, 0, e_mesg) ;
	if(ERROR == err) return(DBH_ERR);
	if(err < 0) {
		fomer(e_mesg) ;
		return(ERROR) ;
	}
	return(NOERROR) ;
}	/* CheckFund() */
/*---------------------------------------------------------------*/
/* Lock Ordinary, Contract, Bank and discount records from the   */
/* chart of accounts 						 */
LockGlRecords()
{
	int 	err ;

	err = CheckGlAcnt(ctl_rec.ap_gen_acnt,BROWSE) ;
	if(DBH_ERR == err) return(DBH_ERR) ;
	if(err < 0) return(ERROR) ;

	err = CheckGlAcnt(ctl_rec.ap_cnt_acnt,BROWSE) ;
	if(DBH_ERR == err) return(DBH_ERR) ;
	if(err < 0) return(ERROR) ;

	err = CheckGlAcnt(ctl_rec.dis_acnt,BROWSE) ;
	if(DBH_ERR == err) return(DBH_ERR) ;
	if(err < 0) return(ERROR) ;
	
	err = CheckFund(s_sth.s_funds,BROWSE) ;
	if(DBH_ERR == err) return(DBH_ERR) ;
	if(err < 0) return(ERROR) ;

	err = CheckGlAcnt(s_sth.s_acct,BROWSE) ;
	if(DBH_ERR == err) return(DBH_ERR) ;
	if(err < 0) return(ERROR) ;

	return(NOERROR) ;
}
/*----------------------------------------------------------------*/
/* Check the given GL account availability in file */

CheckGlAcnt(accno,mode)
char	*accno ;
int	mode ;
{
	int	err ;

	gl_rec.funds = s_sth.s_funds ;
	STRCPY( gl_rec.accno, accno);
	gl_rec.reccod = 99;
	err = get_gl(&gl_rec, mode, 0, e_mesg) ;
	if(ERROR == err) return(err);
	if(err < 0) {
		DispError((char *)&s_sth,e_mesg) ;
		return(ERROR) ;
	}
	return(NOERROR) ;
}	/* CheckGlAcnt() */
/*-----------------------------------------------------------------------*/
/*                                                                       */
ConfirmScreen() 
{
	int	err ;

	for( ; ; ) {
#ifdef ENGLISH
		err = GetOption((char *)&s_sth,"Y(es), E(dit), C(ancel)", "YEC");
#else
		err = GetOption((char *)&s_sth,"O(ui), M(odifier), A(nnuler)",
									 "OMA");
#endif
		if(err == PROFOM_ERR) return(err) ;

		switch(err) {
		case  YES :
			return(YES) ;
		case  EDIT  :
			err = ReadInfo();
			break ;
		case  CANCEL :
#ifdef ENGLISH
			err = GetOption((char *)&s_sth,"Confirm the Cancel (Y/N)?", "YN") ;
#else
			err = GetOption((char *)&s_sth,"Confirmer l'annulation (O/N)?", "ON") ;
#endif
			if(err == YES) { 
				roll_back(e_mesg) ;	/* Unlock  Records */
				return(CANCEL) ;
			}
			break ;
		}	/* switch err */

		if(err == PROFOM_ERR) return(err) ;
		if(err == DBH_ERR) return(err) ;
	}	/* for(; ; ) */
}	/* ConfirmScreen() */

/*-----------------------------------------------------------------------*/
/*                                                                       */
PrntRec()
{
	int retval;

	retval = PrintCheque();
	if(retval < 0){
		DispError((char *)&s_sth,e_mesg) ;
		roll_back(e_mesg);
		return(-1);
	}
	retval = PrintHeader();
	if(retval < 0){
		DispError((char *)&s_sth,e_mesg) ;
		roll_back(e_mesg);
		return(-1);
	}
	retval = PrntLines();
	if(retval < 0){
		DispError((char *)&s_sth,e_mesg) ;
		roll_back(e_mesg);
		return(-1);
	}

	retval = PrintStub();
	if(retval < 0){
		DispError((char *)&s_sth,e_mesg) ;
		roll_back(e_mesg);
		return(-1);
	}

	return(retval);
}
/*----------------------------------------------------------------------------*/
/*  Prints Cheque after all cheque stub information is printed		      */
PrintCheque()
{
	int	i , prt_count;
	double	net_amt ;

	tedit((char *)&s_sth.s_funds,"_0_",temp_buf,R_SHORT);
	mkln(19,temp_buf,3);
	tedit((char *)&temp_chq_no,"____0_",temp_buf,R_LONG) ;
	mkln(24,temp_buf,6) ;
	mkln(32,emp_rec.em_numb,12) ;
	/* Louis R. cashing date chang.
	tedit((char *)&pp_earn.pe_date,"__/__/__",temp_buf,R_LONG) ;
	*/
	tedit((char *)&s_sth.s_chq_date,"__/__/__",temp_buf,R_LONG) ;
	mkln(46,temp_buf, 8) ;
	net_amt = D_Roundoff(pp_earn.pe_net + man_amount);
	tedit((char *)&net_amt,"$$$,$$$,$$_.__-",temp_buf,R_DOUBLE) ;
	mkln(57,temp_buf,15) ; 
	if( prnt_line() < 0) return(-1) ;

	for(i=0;i<=2;i++) 
		if( prnt_line() < 0) return(-1) ;

	strcpy(emp_name,emp_rec.em_first_name);
	strcat(emp_name," ");
	strcat(emp_name,emp_rec.em_last_name);
	mkln(8,emp_name,48);
	if( prnt_line() < 0) return(-1) ;

	prt_count=0;
	if (emp_rec.em_add1[0] != '\0'){
		mkln(8,emp_rec.em_add1,30);
		if( prnt_line() < 0) return(-1) ;
	}	
	else{
		prt_count++;
	}

	if (emp_rec.em_add2[0] != '\0'){
		mkln(8,emp_rec.em_add2,30);
		if( prnt_line() < 0) return(-1) ;
	}	
	else{
		prt_count++;
	}

	if (emp_rec.em_add3[0] != '\0'){
		mkln(8,emp_rec.em_add3,30);
		if( prnt_line() < 0) return(-1) ;
	}
	else{
		prt_count++;
	}

	if (emp_rec.em_add4[0] != '\0') {
		mkln(8,emp_rec.em_add4,30);
		if( prnt_line() < 0) return(-1) ;	
	}
	else{
  		prt_count++;
	}

	mkln(8,emp_rec.em_pc,10);
	if( prnt_line() < 0) return(-1) ;

	prt_count+=4;
	for(i=0;i<prt_count;i++){
		if( prnt_line() < 0) return(-1) ;
	}

	return(NOERROR) ;
}
/*----------------------------------------------------------------------------*/
/*  Print Cheque Stub header information				      */

PrintHeader()
{
	int	i;

	for( i=0; i<=3 ;i++)    		/* print blank lines */
		if( prnt_line() < 0) return(-1) ;

	tedit((char *)&s_sth.s_funds,"_0_",temp_buf,R_SHORT);
	mkln(3,temp_buf,3);
	tedit((char *)&temp_chq_no,"____0_",temp_buf,R_LONG) ;
	mkln(8,temp_buf,6) ;
	mkln(16,emp_rec.em_numb,12) ;
	mkln(32,emp_name,48);
	if( prnt_line() < 0) return(-1) ;
	if( prnt_line() < 0) return(-1) ;
	if( prnt_line() < 0) return(-1) ;

	return(NOERROR) ;
}

/*******************				****************/
/*  Print Stub Summary						*/

PrintStub()
{
	int	i, retval;
	double	net_amt ;

	retval = CalcAtt();

	net_amt = D_Roundoff(pp_earn.pe_reg_inc1 + pp_earn.pe_reg_inc2 +
				 pp_earn.pe_high_inc + pp_earn.pe_ben +
				 pp_earn.pe_vac);
	tedit((char *)&net_amt,"_,_0_.__-",temp_buf,R_DOUBLE) ;
	mkln(43,temp_buf,9) ; 
	ded_tot = net_amt - pp_earn.pe_net;
	tedit((char *)&ded_tot,"_,_0_.__-",temp_buf,R_DOUBLE) ;
	mkln(54,temp_buf,9) ; 
	net_amt = D_Roundoff(pp_earn.pe_net + man_amount);
	tedit((char *)&net_amt,"___,_0_.__-",temp_buf,R_DOUBLE) ;
	mkln(64,temp_buf,11) ; 
	if( prnt_line() < 0) return(-1) ;
	if( prnt_line() < 0) return(-1) ;
	tedit((char *)&ytd_gross,"___,_0_.__-",temp_buf,R_DOUBLE) ;
	mkln(3,temp_buf,11) ; 
	tedit((char *)&ytd_tax,"_,_0_.__-",temp_buf,R_DOUBLE) ;
	mkln(15,temp_buf,9) ; 
	tedit((char *)&ytd_cpp,"_,_0_.__-",temp_buf,R_DOUBLE) ;
	mkln(25,temp_buf,9) ; 
	tedit((char *)&ytd_uic,"_,_0_.__-",temp_buf,R_DOUBLE) ;
	mkln(34,temp_buf,9) ; 
	tedit((char *)&ytd_uic_earn,"_,_0_.__-",temp_buf,R_DOUBLE) ;
	mkln(43,temp_buf,9) ; 
	tedit((char *)&ytd_ben,"___,_0_.__-",temp_buf,R_DOUBLE) ;
	mkln(52,temp_buf,11) ; 
	tedit((char *)&ytd_reg,"___,_0_.__",temp_buf,R_DOUBLE) ;
	mkln(64,temp_buf,10) ; 

	if( prnt_line() < 0) return(-1) ;
	if( prnt_line() < 0) return(-1) ;
	if( prnt_line() < 0) return(-1) ;
	if( prnt_line() < 0) return(-1) ;
	if( prnt_line() < 0) return(-1) ;
	if( prnt_line() < 0) return(-1) ;
	if( prnt_line() < 0) return(-1) ;

	return(NOERROR) ;
}
/*-----------------------------------------------------------------------*/
/*                                                                       */
static
PrntLines()
{
	char	code[7];
	char	prev_earn[7];
	char	txt_buff[132];
	int	count;
	int	earn_flag;
	int	ded_flag;
	int	retval, col,i;
	double	units, temp_calc, income, empr_share, tot_ytd_reg;
	int	schedule;

	sprintf(e_mesg,"Employee #: %s", emp_rec.em_numb);
	fomen(e_mesg);
	fflush(stdout) ;

	no_lines = 0;
	prev_earn[0] = '\0';
	earn_flag = 1;
	schedule = 0;
	income = 0;
	units = 0;

	strcpy(time_rec.tm_numb,emp_rec.em_numb);
	time_rec.tm_earn[0] = '\0';
	time_rec.tm_date = 0;
	time_rec.tm_no = 0;
	flg_reset(TIME);

	strcpy(emp_sched1.es_numb,emp_rec.em_numb);
	emp_sched1.es_week = 0;
	emp_sched1.es_fund = 0;
	emp_sched1.es_class[0] = '\0';
	emp_sched1.es_cost = 0;
	flg_reset(EMP_SCHED1);

	for( ; ; ){
	  retval = get_n_ptime(&time_rec,BROWSE,4,FORWARD,e_mesg);
	  if((strcmp(time_rec.tm_numb,emp_rec.em_numb)!=0) ||
	    (retval == EFL)){
		if(income == 0){
			schedule = 1;
			break;
		}
		earn_flag = 0;
		break;
	  }
	  else if (retval < 0){
		DispError((char *)&s_sth,e_mesg) ;
		seq_over(TIME);
		return(ERROR);
	  }
	  else {
	    if(time_rec.tm_date != pp_earn.pe_date)	continue;

	    if(prev_earn[0] == '\0')
			strcpy(prev_earn, time_rec.tm_earn);
	    if(strcmp(prev_earn, time_rec.tm_earn) != 0){
		flg_reset(TIME);
		break;
	    }
	    for(i=0;i<7;i++){
		units += time_rec.tm_units[i];
	    }
	    strcpy(class.c_code,time_rec.tm_class);
	    class.c_date = s_sth.s_rundate;
	    flg_reset(CLASSIFICATION);

	    retval = get_n_class(&class,BROWSE,0,BACKWARD,e_mesg);
	    if(retval < 0){
		DispError((char *)&s_sth,e_mesg) ;
		seq_over(CLASSIFICATION);
		return(ERROR);
	    }
	    if(retval == EFL ||
	      (strcmp(class.c_code,
		time_rec.tm_class) != 0)) return(NOERROR);
	
	    if(class.c_units != 0){
	      temp_calc = class.c_yrly_inc / class.c_units; 
	    }
	    else{
	      temp_calc = 0;
	    }

	    strcpy(earnings.ea_code,time_rec.tm_earn);
	    earnings.ea_date = s_sth.s_rundate;
	    flg_reset(EARN);

	    retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
	    if(retval < 0 && retval != EFL){
	  	DispError((char *)&s_sth,e_mesg) ;
		seq_over(EARN);
	  	return(retval);
	    }
	    if(strcmp(earnings.ea_code,time_rec.tm_earn) != 0
	       || retval == EFL){
	  	DispError((char *)&s_sth,"Time Entry Earnings Code not Setup") ;
		seq_over(EARN);
	  	return(retval);
	    }
	    seq_over(EARN);

	    if(earnings.ea_type[0] == 'P')
	    	temp_calc *= earnings.ea_amount;
	    else
		temp_calc = earnings.ea_amount;

	    strcpy(code,time_rec.tm_earn);
	    rate = D_Roundoff(temp_calc);
	    income += time_rec.tm_tot_amt;
	  }
	}
	if(schedule == 1){
	  for( ; ; ){
	    retval = get_n_emp_sched1(&emp_sched1,BROWSE,0,FORWARD,e_mesg);
	    if((strcmp(emp_sched1.es_numb,emp_rec.em_numb)!=0) ||
	      (retval == EFL)){
		earn_flag = 0;
		break;
	    }
	    for(i=0;i<7;i++){
		units += emp_sched1.es_units[i];
	    }
	    income += emp_sched1.es_amount;
	    temp_calc = income / units; 

	    strcpy(code, pay_param.pr_reg_earn);
	    rate = D_Roundoff(temp_calc);
	  } 
	}
	mkln(3,code,6);
	tedit((char*)&units,
		"0_.__-",temp_buf,R_DOUBLE);
	mkln(10,temp_buf,6);
	tedit((char*)&rate,
		"_0_.__-",temp_buf,R_DOUBLE);
	mkln(16,temp_buf,6);
	tedit((char*)&income,
		"__,_0_.__-",temp_buf,R_DOUBLE);
	mkln(22,temp_buf,10);

	strcpy(prev_earn, time_rec.tm_earn);
	/***** DEDUCTIONS *****/

	mkln(32,"CPP",3);
	tedit((char*)&pp_earn.pe_cpp,"_0_.__-",temp_buf,R_DOUBLE);
	mkln(39,temp_buf,7);
	tedit((char*)&pp_earn.pe_cpp,"_0_.__-",temp_buf,R_DOUBLE);
	mkln(46,temp_buf,7);

	mkln(54,"UIC",3);
	tedit((char*)&pp_earn.pe_uic,"_0_.__-",temp_buf,R_DOUBLE);
	mkln(61,temp_buf,7);
	tedit((char*)&pp_earn.pe_uic_employer,"_0_.__-",temp_buf,R_DOUBLE);
	mkln(69,temp_buf,7);

	if( prnt_line()<0 )	return(REPORT_ERR);
	ded_tot = D_Roundoff(pp_earn.pe_cpp);
	ded_tot += D_Roundoff(pp_earn.pe_uic);
	no_lines ++;

	get_pay_param(&pay_param,BROWSE,1,e_mesg);

	strcpy(pp_ded.pd_numb, emp_rec.em_numb);
	pp_ded.pd_pp = 0;
	pp_ded.pd_date = 0;
	pp_ded.pd_code[0] = '\0';
	pp_ded.pd_fund = 0;
	pp_ded.pd_acct[0] = '\0';
	flg_reset(PP_DED);

	strcpy(pp_loan.pc_numb,emp_rec.em_numb);
	pp_loan.pc_pp = 0;
	pp_loan.pc_code[0] = '\0';
	pp_loan.pc_seq = 0;
	pp_loan.pc_fund = 0;
	pp_loan.pc_acct[0] = '\0';
	flg_reset(PP_LOAN);

	strcpy(pp_garn.pg_numb,emp_rec.em_numb);
	pp_garn.pg_pp = 0;
	pp_garn.pg_date = 0;
	pp_garn.pg_pr_cd = 0;
	pp_garn.pg_seq = 0;
	pp_garn.pg_fund = 0;
	pp_garn.pg_acct[0] = '\0';
	flg_reset(PP_GARN);

	ded_flag = 4;
	count = 0;

	for(;;) {
		col= 1;
		units = 0;
		if(earn_flag == 0 && ded_flag == 0){
			break;
		}
		if(earn_flag == 1){
		  if(schedule != 1){
		   income = 0;
		   units = 0;
		   for( ; ; ){
		    retval = get_n_ptime(&time_rec,BROWSE,4,FORWARD,e_mesg);
		    if((strcmp(time_rec.tm_numb,emp_rec.em_numb)!=0) ||
	  	    (retval == EFL)){
			earn_flag = 0;
			break;
		    }
	    	    else{
	    		if(time_rec.tm_date != pp_earn.pe_date)	continue;

			if(strcmp(prev_earn, time_rec.tm_earn) != 0){
				flg_reset(TIME);
				break;
			}
	  		for(i=0;i<7;i++){
				units += time_rec.tm_units[i];
	  		}
			strcpy(class.c_code,time_rec.tm_class);
			class.c_date = s_sth.s_rundate;
			flg_reset(CLASSIFICATION);

			retval = get_n_class(&class,BROWSE,0,BACKWARD,e_mesg);
			if(retval < 0){
			  fomer("Classification Code Does Not Exist");
				return(ERROR);
			}
			if(retval == EFL ||
			      (strcmp(class.c_code,
				time_rec.tm_class) != 0)) return(NOERROR);
	
			if(class.c_units != 0){
			    temp_calc = class.c_yrly_inc / class.c_units; 

			}
			else{
	 		 temp_calc = 0;
			}
	    		strcpy(earnings.ea_code,time_rec.tm_earn);
	    		earnings.ea_date = s_sth.s_rundate;
	    		flg_reset(EARN);

	    		retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
	    		if(retval < 0 && retval != EFL){
	  			DispError((char *)&s_sth,e_mesg) ;
				seq_over(EARN);
	  			return(retval);
	    		}
	    		if(strcmp(earnings.ea_code,time_rec.tm_earn) != 0
	       		|| retval == EFL){
	  			DispError((char *)&s_sth,"Time Entry Earnings Code not Setup") ;
				seq_over(EARN);
	  			return(retval);
	    		}
	    		seq_over(EARN);

	    		if(earnings.ea_type[0] == 'P')
	    			temp_calc *= earnings.ea_amount;
	    		else
				temp_calc = earnings.ea_amount;
			strcpy(code, prev_earn);
			rate = D_Roundoff(temp_calc);
			income += time_rec.tm_tot_amt;
		    }
		   }
		  }
		  mkln(3,code,6);
		  tedit((char*)&units,
				"0_.__-",temp_buf,R_DOUBLE);
		  mkln(10,temp_buf,6);
		  tedit((char*)&rate,
				"_0_.__-",temp_buf,R_DOUBLE);
		  mkln(16,temp_buf,6);
		  tedit((char*)&income,
				"__,_0_.__-",temp_buf,R_DOUBLE);
		  mkln(22,temp_buf,10);
		}
		strcpy(prev_earn, time_rec.tm_earn);
	/*****  Deductions *****/
		if(ded_flag == 4) {
		    mkln(32,"TAX",3);
		    tedit((char*)&pp_earn.pe_tax,"_0_.__-",
				txt_buff,R_DOUBLE);
		    mkln(39,txt_buff,7);
		    ded_flag = 3;
		    col =2;

		    ded_tot += D_Roundoff(pp_earn.pe_tax);
		    tot_ytd_reg = (pp_earn.pe_reg1 + pp_earn.pe_reg2 + 
			    pp_earn.pe_reg3 + pp_earn.pe_reg_prior +
			    pp_earn.pe_reg_opt + pp_earn.pe_reg_nonm);
		    if(tot_ytd_reg != 0) {

			mkln(54, emp_rec.em_reg_pen,6);
			tedit((char*)&tot_ytd_reg,"_0_.__-",
				txt_buff,R_DOUBLE);
			mkln(61,txt_buff,7);

			strcpy(reg_pen.rg_code,emp_rec.em_reg_pen);
			strcpy(reg_pen.rg_pp_code,barg_unit.b_pp_code);

			retval = get_reg_pen(&reg_pen,BROWSE,0,e_mesg);
			if(retval != NOERROR && retval != UNDEF){
				DispError((char *)&s_sth,e_mesg) ;
			  	return(ERROR);
			}

			if(retval != UNDEF){
				tot_ytd_reg = D_Roundoff(tot_ytd_reg *
				 ((double)reg_pen.rg_employer_sh /
			 	 ((double)reg_pen.rg_employer_sh -
					 100.00))); 
				tedit((char*)&tot_ytd_reg,"_0_.__",							temp_buf,R_DOUBLE); 
				mkln(69,temp_buf,6);
			}
			ded_tot += D_Roundoff(tot_ytd_reg);
			col =1;
			if( prnt_line()<0 )	return(REPORT_ERR);
			no_lines++;
			continue;
		    }
		  }
		  if(ded_flag == 3){

		   for(; col<=2;col++){

		    retval = get_n_pp_ded(&pp_ded,BROWSE,0,
					 FORWARD,e_mesg);

		    if(strcmp(pp_ded.pd_numb,emp_rec.em_numb) != 0 ||
					retval == EFL){
			ded_flag = 2;
			break;

		    }
		    else{
		      strcpy(deduction.dd_code,pp_ded.pd_code);
		      strcpy(deduction.dd_pp_code,barg_unit.b_pp_code);

		      get_deduction(&deduction,BROWSE,0,e_mesg);

		      strcpy(ded_grp.dg_code,pp_ded.pd_code);
		      strcpy(ded_grp.dg_pp_code,barg_unit.b_pp_code);
		      strcpy(ded_grp.dg_group,pp_ded.pd_group);
      
		      retval = get_ded_grp(&ded_grp,BROWSE,0,e_mesg);
		      if(retval < 0){
			DispError((char *)&s_sth,e_mesg) ;
		      }
		  	
		      empr_share = D_Roundoff(pp_ded.pd_amount *
			 	((double)ded_grp.dg_employer_sh /
				 ((double)ded_grp.dg_employer_sh - 100))); 
		      if(col==1){
		       mkln(32,pp_ded.pd_code,6);
		       tedit((char*)&pp_ded.pd_amount,"_0_.__-",
		  	temp_buf,R_DOUBLE);
		       mkln(39,temp_buf,7);

	    	       tedit((char*)&empr_share,"_0_.__",
		    			temp_buf,R_DOUBLE);
		       mkln(46,temp_buf,6);
		      }
		      if(col==2){
		       mkln(54,pp_ded.pd_code,6);
		       tedit((char*)&pp_ded.pd_amount,"_0_.__-",
				temp_buf,R_DOUBLE);
		       mkln(61,temp_buf,7);

	    	       tedit((char*)&empr_share,"_0_.__",
		    			temp_buf,R_DOUBLE);
	  	       mkln(69,temp_buf,6);
	              }
		      ded_tot += D_Roundoff(pp_ded.pd_amount);
		    }
		  }
		}
		if(ded_flag == 2) {
		 for(; col<=2;col++){
		  retval = get_n_pp_loan(&pp_loan,BROWSE,0,FORWARD,e_mesg);

		  if((strcmp(pp_loan.pc_numb,emp_rec.em_numb)!=0) || 
		    (retval == EFL)) {
			ded_flag = 1;
			break;
		  }
		  else{

		    if(col==1){
		      mkln(32,pp_loan.pc_code,6);
		      tedit((char*)&pp_loan.pc_amount,"_0_.__-",
				temp_buf,R_DOUBLE);
		      mkln(39,temp_buf,7);
	    	    }
		    else if(col==2){
		      mkln(54,pp_loan.pc_code,6);
		      tedit((char*)&pp_loan.pc_amount,"_0_.__-",
				temp_buf,R_DOUBLE);
		      mkln(61,temp_buf,7);
		    }
		    ded_tot += D_Roundoff(pp_loan.pc_amount);
		  }
		 }
		}
		if(ded_flag == 1) {
		 for(; col<=2;col++){
		  retval = get_n_pp_garn(&pp_garn,BROWSE,0,FORWARD,e_mesg);
		  if((strcmp(pp_garn.pg_numb,emp_rec.em_numb)!=0) ||
		    (retval == EFL)) {
			ded_flag = 0;
			break;
		  }
		  else{
		    if(col==1){
		      mkln(32,"GARN  ",6);
		      tedit((char*)&pp_garn.pg_amount,"_0_.__-",
				temp_buf,R_DOUBLE);
		      mkln(39,temp_buf,7);
		    }
		    else if(col==2){
		      mkln(54,"GARN  ",6);
		      tedit((char*)&pp_garn.pg_amount,"_0_.__-",
				temp_buf,R_DOUBLE);
		      mkln(61,temp_buf,7);
		    }
		    ded_tot += D_Roundoff(pp_garn.pg_amount);
		  }
		 }
		}
		if( prnt_line()<0 )	return(REPORT_ERR);
		no_lines++;
	}

	if(no_lines < NO_OF_ITEMS){
	  if(man_amount != 0.00){
		mkln(54,"Advance",7) ; 
		tedit((char*)&man_amount,"_,_0_.__-",
					temp_buf,R_DOUBLE);
		mkln(62,temp_buf,9);
		if( prnt_line()<0 )	return(REPORT_ERR);
		no_lines++;
	  }
	}
	for( i= no_lines; i<= NO_OF_ITEMS+1 ;i++) 
		if( prnt_line() < 0) return(-1) ;

	return(NOERROR);

}
/*-----------------------------------------------------------------------*/
/*                                                                       */
EmpYtd()
{
	int 	retval;

	ytd_gross = 0.00;
	ytd_tax = 0.00;
	ytd_cpp = 0.00;
	ytd_uic = 0.00;
	ytd_uic_earn = 0.00;
	ytd_ben = 0.00;
	ytd_reg = 0.00;

	strcpy(emp_earn.en_numb,emp_rec.em_numb);
	emp_earn.en_date = pay_param.pr_cal_st_dt;
	emp_earn.en_pp = 0;
	emp_earn.en_week = 0;
	flg_reset(EMP_EARN) ;

	for( ; ; ) {
		retval = get_n_emp_earn(&emp_earn,BROWSE,0,FORWARD,e_mesg) ;
		if( retval == EFL ||
			strcmp(emp_earn.en_numb,emp_rec.em_numb) != 0)
			break;

		if( retval < 0) {
			roll_back(e_mesg);
			DispError((char *)&s_sth,e_mesg) ;
			seq_over(EMP_EARN);
			return(retval) ;
		}

		ytd_gross += D_Roundoff(emp_earn.en_reg_inc +
					 emp_earn.en_high_inc);
		ytd_tax += D_Roundoff(emp_earn.en_tax);
		ytd_cpp += D_Roundoff(emp_earn.en_cpp);
		ytd_uic += D_Roundoff(emp_earn.en_uic);
		ytd_reg += D_Roundoff(emp_earn.en_reg1 + emp_earn.en_reg2 +
					 emp_earn.en_reg3);
	}
	seq_over(EMP_EARN);

	ytd_gross += D_Roundoff(pp_earn.pe_reg_inc1 + pp_earn.pe_reg_inc2 +
				 pp_earn.pe_high_inc + pp_earn.pe_ben +
				 pp_earn.pe_vac);
	ytd_tax += D_Roundoff(pp_earn.pe_tax);
	ytd_cpp += D_Roundoff(pp_earn.pe_cpp);
	ytd_uic += D_Roundoff(pp_earn.pe_uic);
	ytd_reg += D_Roundoff(pp_earn.pe_reg1 + pp_earn.pe_reg2 +
					 pp_earn.pe_reg3);

	bank_amt += D_Roundoff(pp_earn.pe_net + man_amount);
	total_gross += D_Roundoff(pp_earn.pe_reg_inc1 + pp_earn.pe_reg_inc2 +
				 pp_earn.pe_high_inc + pp_earn.pe_ben + 
				 pp_earn.pe_vac);

	strcpy(emp_bh.ebh_numb,emp_rec.em_numb);
	emp_bh.ebh_date = pay_param.pr_cal_st_dt;
	flg_reset(EMP_BEN_HIS) ;

	for( ; ; ) {
		retval = get_n_emp_bhis(&emp_bh,BROWSE,0,FORWARD,e_mesg) ;
		if( retval == EFL ||
			strcmp(emp_bh.ebh_numb,emp_rec.em_numb) != 0)
			break;

		if( retval < 0) {
			DispError((char *)&s_sth,e_mesg) ;
			seq_over(EMP_BEN_HIS);
			return(retval) ;
		}
		ytd_ben += D_Roundoff(emp_bh.ebh_amount);
	}
	seq_over(EMP_BEN_HIS);

	ytd_gross += D_Roundoff(ytd_ben);
	ytd_ben += D_Roundoff(pp_earn.pe_ben);

	strcpy(emp_ins.in_numb,emp_rec.em_numb);
	emp_ins.in_pp = 0;
	emp_ins.in_date = 0;
	flg_reset(EMP_INS) ;

	for( ; ; ) {
		retval = get_n_emp_ins(&emp_ins,BROWSE,0,FORWARD,e_mesg) ;
		if( retval == EFL ||
			strcmp(emp_ins.in_numb,emp_rec.em_numb) != 0)
			break;

		if( retval < 0) {
			DispError((char *)&s_sth,e_mesg) ;
			seq_over(EMP_INS);
			return(retval) ;
		}
		if(emp_ins.in_date < pay_param.pr_cal_st_dt)
			continue;
		ytd_uic_earn += D_Roundoff(emp_ins.in_uic_ins);
	}
	seq_over(EMP_INS);

	ytd_uic_earn += D_Roundoff(pp_earn.pe_uic_ins);

	return(NOERROR);
}
/*----------------------------------------------------------------------------*/
UpdtControl()
{
	int retval;

	if( temp_chq_no == s_sth.s_chq_no ) return(NOERROR) ;

	if( (strcmp(s_sth.s_acct, ctl_rec.bank2_acnt)) == 0 ) 
		ctl_rec.bank2_chq = temp_chq_no;
	else
		ctl_rec.bank2_chq = temp_chq_no;

	retval = put_ctl(&ctl_rec,UPDATE,e_mesg);
	if(retval<0) {
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(retval);
	}
	if( commit(e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}

	return(NOERROR);
}
/*-----------------------------------------------------------------------*/ 

GetFilename(ptr)
char	*ptr;
{
	return(0);
}
GetOutputon(ptr)
char	*ptr;
{
	return(0);
}
GetNbrCopies(par)
short	par;
{
	return(0);
}
Confirm()
{
	return(0);
}
/*-----------------------------------------------------------------------*/ 
CalcAtt()
{
	int 	retval, i, j, curr_day, curr_month, last_month;
	long	attdate;
	double	bal_sick, bal_vac;

	bal_sick = emp_rec.em_sic_ent;
	bal_vac = emp_rec.em_vac_ent;
	
	for(i=0;i<12;i++){
		bal_sick += emp_rec.em_sck_acc[i];
		bal_vac += emp_rec.em_vac_acc[i];
	}
		

	strcpy(att_his.eah_numb, emp_rec.em_numb);
	att_his.eah_date = 0;
	flg_reset(EMP_ATT);

	for(;;){

		retval = get_n_emp_at(&att_his, BROWSE, 0, FORWARD, e_mesg);
		if( retval == EFL ||		
		    (strcmp(att_his.eah_numb, emp_rec.em_numb) != 0)){
			break;
		}
		if(retval < 0) {
			fomen(e_mesg);
			get();
			seq_over(EMP_ATT);
			return(-1);
		}

		strcpy(att.at_code, att_his.eah_code);

		retval = get_att(&att,BROWSE,1,e_mesg);
		if(retval < 0)  {
			fomen(e_mesg);
			get();
			return(retval);
		}

		if(strcmp(att.at_sick,"Y") == 0){
			if(strcmp(att.at_code, "S11") == 0)
				bal_sick -= .5;
			else if(strcmp(att.at_code, "S12") == 0)
				bal_sick -= 1;
			else
				bal_sick -=
				(att_his.eah_hours/att_his.eah_sen_hours);
		}
		if(strcmp(att.at_vac,"Y") == 0)
			if(strcmp(att.at_code, "V11") == 0)
				bal_vac -= .5;
			else if(strcmp(att.at_code, "V12") == 0)
				bal_vac -= 1;
			else
	  		    bal_vac -=(att_his.eah_hours/att_his.eah_sen_hours);

/**********
fomer("checking the vacation bank for changes");
fflush(stdout) ;
get();
*********/
		/* Apr,95 Louis added to keep a running total of vac. bank */
		if(strcmp(att.at_vacbank, "Y") == 0 &&
		    strcmp(att_his.eah_vacproc, "Y") != 0){
			emp_rec.em_vac_bk -= 
		      		(att_his.eah_hours/att_his.eah_sen_hours);
			retval = get_emp_at(&att_his, UPDATE, 0, e_mesg);
			if(retval < 0)  {
				fomen(e_mesg);
				get();
				return(retval);
			}
			att_his.eah_vacproc[0] = 'Y';
			retval = put_emp_at(&att_his, UPDATE, e_mesg);
			if(retval < 0)  {
				fomen(e_mesg);
				get();
				return(retval);
			}
/***********
			retval = commit(e_mesg);
			if(retval < 0) {
				DispError((char *)&s_sth,e_mesg);
				roll_back(e_mesg);
				return(ERROR);
			}
*************/
		}
	}
	seq_over(EMP_ATT);

	/* Apr,95 Louis added to update overtime bank changes. */
	retval = put_employee(&emp_rec,UPDATE,e_mesg);
	if( retval < 0) {
		DispError((char *)&s_sth,e_mesg) ;
		get();
		roll_back(e_mesg);
		return(retval) ;
	}
	retval = commit(e_mesg);
	if(retval < 0) {
		DispError((char *)&s_sth,e_mesg);
		get();
		roll_back(e_mesg);
		return(ERROR);
	}
	tedit((char *)&pp_earn.pe_date,"__/__/__",temp_buf,R_LONG) ;
	mkln(2,temp_buf, 8) ;
	tedit((char *)&bal_vac,"__,_0_.__-",temp_buf,R_DOUBLE) ;
	mkln(28,temp_buf,10) ; 
	if( prnt_line() < 0) return(-1) ;
	tedit((char *)&bal_sick,"_,_0_.__-",temp_buf,R_DOUBLE) ;
	mkln(29,temp_buf,9) ; 

	return(NOERROR);
}
/*-----------------------------------------------------------------------*/ 
UpdtGl()
{
	int retval, err;
	char	prev_acct[19], prev_acct2[19];
	double	tot_amt, bank_amount, tot_db;
	short	prev_fund, prev_fund2;
	double	dbcr_amt;

#ifdef ENGLISH
	STRCPY(s_sth.s_mesg, "Updating GL Master File, PLEASE WAIT");
#else
	STRCPY(s_sth.s_mesg, "Le GL est en train de faire les mises a jour, ATTENDEZ S.V.P.");
#endif
	DispMesgFld((char *)&s_sth);
	fflush(stdout) ;

	prev_acct[0] = '\0';
	prev_fund = 0;

	bank_amount = 0;
	tot_db = 0;
	dbcr_amt = 0;
	item_no = 1;

	if((retval = WriteTrHdr(s_sth.s_funds,
				0.00))< 0 ) return(retval);
	tmp_seq_no = tr_hdr.th_seq_no;

	for( ; ; ){
		tot_amt = 0;

		jr_ent.jr_fund = prev_fund;
		strcpy(jr_ent.jr_acct,prev_acct);
		flg_reset(JR_ENT);

		for( ; ; ) {
			err = get_n_jr_ent(&jr_ent,BROWSE,5,FORWARD,e_mesg) ;
			if(err == EFL) break;
			if( err < 0) {
				DispError((char *)&s_sth,e_mesg) ;
				return(err) ;
			}

			if(prev_acct[0] == '\0'){
				strcpy(prev_acct, jr_ent.jr_acct);
				prev_fund = jr_ent.jr_fund;
			}

			if(prev_fund != jr_ent.jr_fund) {
				break;
			}

			if(strcmp(jr_ent.jr_acct,prev_acct) != 0) {
				break;
			}

			if(strcmp(jr_ent.jr_type,"P") == 0)
				continue;

			retval = ProcessJrh();
			if(retval == UNDEF) continue;
			if(retval < 0)	return(retval);

			tot_amt += jr_ent.jr_amount;

			bank_amount += jr_ent.jr_amount;
			if(jr_ent.jr_amount > 0.00)
				tot_db += jr_ent.jr_amount;

			dbcr_amt += jr_ent.jr_amount;
		}

		sprintf(e_mesg,"acct # %s",prev_acct);
		fomen(e_mesg);
		fflush(stdout) ;

		strcpy(prev_acct2, jr_ent.jr_acct);
		prev_fund2 = jr_ent.jr_fund;
		if((retval = WriteGlmast(prev_fund,
				prev_acct,tot_amt))< 0 ) return(retval);

		if((retval = WriteTrItems(prev_fund,
				prev_acct,tot_amt,0))< 0 ) return(retval);

		if(err == EFL)  break;

		item_no ++;
		if(prev_fund == s_sth.s_funds)
			bank_item_no = item_no;

		if(jr_ent.jr_fund != prev_fund){
			item_no = 1;
			if(prev_fund != s_sth.s_funds){
			  if((retval = WriteTrHdr(prev_fund,
				dbcr_amt))< 0 ) return(retval);
			}
			dbcr_amt = 0;
		}

		strcpy(prev_acct, prev_acct2);
		prev_fund = prev_fund2;
	}
	seq_over(JR_ENT);
	if(prev_fund != s_sth.s_funds){
		if((retval = WriteTrHdr(prev_fund,
				dbcr_amt))< 0 ) return(retval);
	}

	tr_hdr.th_fund = s_sth.s_funds;
	tr_hdr.th_reccod = 99;
	tr_hdr.th_create[0] = 'G';
	tr_hdr.th_seq_no = tmp_seq_no;

	retval = get_trhdr( &tr_hdr, UPDATE, 0, e_mesg );
	if( retval==ERROR ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}

	tr_hdr.th_debits = tr_hdr.th_credits = tot_db;

	/*  Roundoff double items that have calculated values  */
	tr_hdr.th_debits 	= D_Roundoff(tr_hdr.th_debits);
	tr_hdr.th_credits 	= D_Roundoff(tr_hdr.th_credits);

	retval = put_trhdr( &tr_hdr, UPDATE, e_mesg );
	if(retval<0) {
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(retval);
	}
	if( commit(e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}
	bank_amount = (bank_amount * -1.0);

	if((retval = WriteJr(s_sth.s_funds,
			s_sth.s_acct,bank_amount))< 0 ) return(retval);

	if((retval = WriteTrItems(s_sth.s_funds,
			s_sth.s_acct,bank_amount,1))< 0 ) return(retval);

	for(;;) {
		gl_rec.funds = s_sth.s_funds;
		strcpy(gl_rec.accno, s_sth.s_acct);
		gl_rec.reccod = 99;
		retval = get_gl( &gl_rec, UPDATE, 0, e_mesg );
		if( retval==NOERROR )	break;
		if( retval==LOCKED ){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			continue;
		}
		if( retval!=NOERROR ){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		}
	}
	gl_rec.currel[pa_rec.pa_cur_period-1] += bank_amount; 
	gl_rec.ytd += bank_amount;
	if(bank_amount > 0.00)
		gl_rec.curdb += bank_amount;
	else
		gl_rec.curcr += bank_amount;

	gl_rec.currel[pa_rec.pa_cur_period-1] =
			 D_Roundoff(gl_rec.currel[pa_rec.pa_cur_period-1]);
	gl_rec.ytd = D_Roundoff(gl_rec.ytd);
	gl_rec.curdb = D_Roundoff(gl_rec.curdb);
	gl_rec.curcr = D_Roundoff(gl_rec.curcr);

	retval = put_gl( &gl_rec, UPDATE, e_mesg );
	if( retval!=NOERROR ){
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(retval);
	}
	if( commit(e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}

	return(NOERROR);
}
/*-----------------------------------------------------------------------*/ 
WriteJr(fund, acct, amount)
short	fund;
char	acct[19];
double	amount;
{
	int	retval;

	jr_ent.jr_fund = fund;
	retval = GetJr(fund);
	if(retval < 0) {
		return(NOERROR);
	}
	jr_ent.jr_fund = fund;
	strcpy(jr_ent.jr_acct,acct);

	jr_ent.jr_amount = D_Roundoff(amount);
	jr_ent.jr_emp_numb[0] = '\0';
	jr_ent.jr_code[0] = '\0';
	strcpy(jr_ent.jr_type,"P");

	if(jr_ent.jr_amount != 0.00) {
		jr_ent.jr_amount = jr_ent.jr_amount;
		retval = put_jr_ent(&jr_ent,ADD,e_mesg);	
		if(retval < 0) {
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
		}
	        retval = commit(e_mesg) ;
	        if(retval < 0) {
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
		}
	}
	return(NOERROR);
}
/*-----------------------------------------------------------------------*/ 
GetJr(fund)
short	fund;
{
	int	retval;

	jr_ent.jr_no = HV_SHORT;
	flg_reset(JR_ENT);

	retval = get_n_jr_ent(&jr_ent,UPDATE,0,BACKWARD,e_mesg);
	if(retval < 0 && retval != EFL){
		DispError((char *)&s_sth,e_mesg);
	  	roll_back(e_mesg);
		seq_over(JR_ENT);
		return(retval);
	}
	if(retval == EFL || jr_ent.jr_no < 1 || jr_ent.jr_fund != fund){
	  jr_ent.jr_fund = fund;
	  jr_ent.jr_no = 1;
	}
	else 
	  jr_ent.jr_no ++;
	jr_ent.jr_date = pp_earn.pe_date;

	return(NOERROR);
}
/*-----------------------------------------------------------------------*/ 
ProcessJrh()
{
	int	retval;

	strcpy(chq_reg.cr_emp_numb,jr_ent.jr_emp_numb);
	chq_reg.cr_date = jr_ent.jr_date ;

	retval = get_chq_reg(&chq_reg,BROWSE,1,e_mesg);
	if(retval < 0){
		DispError((char *)&s_sth,e_mesg);
		return(UNDEF);
	}

	jrh_ent.jrh_fund = jr_ent.jr_fund;
	jrh_ent.jrh_no = jr_ent.jr_no;
	jrh_ent.jrh_cheque = chq_reg.cr_numb;
	jrh_ent.jrh_date = jr_ent.jr_date;
	strcpy(jrh_ent.jrh_acct,jr_ent.jr_acct);
	strcpy(jrh_ent.jrh_emp_numb,jr_ent.jr_emp_numb);
	strcpy(jrh_ent.jrh_code,jr_ent.jr_code);
	strcpy(jrh_ent.jrh_type,jr_ent.jr_type);
	jrh_ent.jrh_amount = jr_ent.jr_amount;
	strcpy(jrh_ent.jrh_class,jr_ent.jr_class);

	if( put_jrh_ent(&jrh_ent,ADD,e_mesg) < 0){
		DispError((char *)&s_sth,e_mesg) ;
		roll_back(e_mesg);
		return(-1);
	}
	if( commit(e_mesg)<0 ){	/* If everything goes right, commit */
		DispError((char *)&s_sth,e_mesg) ;
		return(-1);
	}

	return(NOERROR);
}
/*-----------------------------------------------------------------------*/ 
WriteTrHdr(fund, amount)
short	fund;
double	amount;
{
	int	retval;

	long	sysdt ;
#ifdef ORACLE
	long	sno, get_maxsno();
#endif
	tr_hdr.th_fund = fund;
	tr_hdr.th_reccod = 99;
	tr_hdr.th_create[0] = 'G';

#ifndef ORACLE
	tr_hdr.th_seq_no = HV_SHORT;
	retval = get_n_trhdr( &tr_hdr, BROWSE, 0, BACKWARD, e_mesg );
	seq_over( GLTRHDR );
	if( retval==ERROR ){
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(-1);
	}
	if( retval==EFL || 
	    tr_hdr.th_fund != fund ||	
	    tr_hdr.th_reccod != 99 || tr_hdr.th_create[0] != 'G' ){
		tr_hdr.th_fund = fund;
		tr_hdr.th_reccod = 99;
		tr_hdr.th_create[0] = 'G';
		tr_hdr.th_seq_no = 1;
	}
	else
		tr_hdr.th_seq_no++;
#else
	sno = get_maxsno(GLTRHDR,(char *)&tr_hdr,0,-1,e_mesg);
	if(sno < 0) {
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(-1);
	}
	tr_hdr.th_seq_no = sno + 1;
#endif

	strcpy( tr_hdr.th_userid, User_Id );
	tr_hdr.th_sys_dt = sysdt = get_date() ;
	tr_hdr.th_period = pa_rec.pa_cur_period;
	tr_hdr.th_date = get_date();
	tr_hdr.th_debits = tr_hdr.th_credits = amount;

	/*  Roundoff double items that have calculated values  */
	tr_hdr.th_debits 	= D_Roundoff(tr_hdr.th_debits);
	tr_hdr.th_credits 	= D_Roundoff(tr_hdr.th_credits);

	strcpy(tr_hdr.th_descr, "PAYROLL CHEQUE RUN");
	tr_hdr.th_supp_cd[0] = '\0';
	tr_hdr.th_type[0] = 'P';
	tr_hdr.th_print[0] = 'N';
	strcpy(tr_hdr.th_reference, "PAYROLL");

	retval = put_trhdr( &tr_hdr, ADD, e_mesg );
	if(retval<0) {
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(retval);
	}
	if( commit(e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}
	return(0);
}
/*-----------------------------------------------------------------------*/ 
WriteTrItems(fund, acct, amount,flag)
short	fund;
char	*acct;
double	amount;
int	flag;
{
	int	retval;

	tr_item.ti_fund = fund;
	tr_item.ti_reccod = 99;
	tr_item.ti_create[0] = 'G';
	tr_item.ti_seq_no = tr_hdr.th_seq_no;
	if(flag == 0)
		tr_item.ti_item_no = item_no;
	else
		tr_item.ti_item_no = bank_item_no + 1;
	tr_item.ti_sys_dt = tr_hdr.th_sys_dt;
	tr_item.ti_period = tr_hdr.th_period;
	strcpy(tr_item.ti_accno,acct);
	tr_item.ti_section = gl_rec.sect;
	tr_item.ti_amount = amount;
	tr_item.ti_status = 0;

	/* Roundoff ti_amount which is double	*/
	tr_item.ti_amount = D_Roundoff(tr_item.ti_amount);

	if( put_tritem(&tr_item, ADD, e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(-1);
	}
	if( commit(e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}

	if (fund == s_sth.s_funds) return(0);

	/**************************************************** 
	 if Cr Fund not equal to Db Fund then we must also 
	 perform the following reverse entries 
	 ****************************************************/

	/* read the ctl record for the duetofrom_acct number for the Db Fund */

	ctl_rec.fund = fund;
	retval = get_ctl( &ctl_rec, BROWSE, 0, e_mesg );
	if( retval < 0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}

	tr_item.ti_fund = fund;
	tr_item.ti_reccod = 99;
	tr_item.ti_create[0] = 'G';
	tr_item.ti_seq_no = tr_hdr.th_seq_no;
	item_no ++;
	tr_item.ti_item_no = item_no;
	tr_item.ti_sys_dt = tr_hdr.th_sys_dt;
	tr_item.ti_period = tr_hdr.th_period;
	strcpy(tr_item.ti_accno,ctl_rec.duetofrom_acct);

	tr_item.ti_amount = (-1 * amount);
	tr_item.ti_status = 0;

	tr_item.ti_section = gl_rec.sect;

	/* Roundoff ti_amount which is double	*/
	tr_item.ti_amount = D_Roundoff(tr_item.ti_amount);

	if( put_tritem(&tr_item, ADD, e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(-1);
	}
	if( commit(e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}

	/* read the ctl record for the duetofrom_acct number for the Cr Fund */

	ctl_rec.fund = s_sth.s_funds;
	retval = get_ctl( &ctl_rec, BROWSE, 0, e_mesg );
	if( retval < 0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}

	tr_item.ti_fund = s_sth.s_funds;
	tr_item.ti_reccod = 99;
	tr_item.ti_create[0] = 'G';
	tr_item.ti_seq_no = tmp_seq_no;
	bank_item_no ++;
	tr_item.ti_item_no = bank_item_no;
	tr_item.ti_sys_dt = tr_hdr.th_sys_dt;
	tr_item.ti_period = tr_hdr.th_period;
	strcpy(tr_item.ti_accno,ctl_rec.duetofrom_acct);
	tr_item.ti_amount = amount;
	tr_item.ti_status = 0;

	tr_item.ti_section = gl_rec.sect;

	/* Roundoff ti_amount which is double	*/
	tr_item.ti_amount = D_Roundoff(tr_item.ti_amount);

	if( put_tritem(&tr_item, ADD, e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(-1);
	}
	if( commit(e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}
	return(NOERROR);
}
/*-----------------------------------------------------------------------*/ 
WriteGlmast(fund, acct, amount)
short	fund;
char	*acct;
double	amount;
{
	double	tempamount;
	int	retval;

	for(;;) {
		gl_rec.funds = fund;
		strcpy(gl_rec.accno, acct);
		gl_rec.reccod = 99;
		retval = get_gl( &gl_rec, UPDATE, 0, e_mesg );
		if( retval==NOERROR )	break;
		if( retval==LOCKED ){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			continue;
		}
		if( retval!=NOERROR ){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		}
	}
	gl_rec.currel[pa_rec.pa_cur_period-1] += amount; 
	gl_rec.ytd += amount;
	if(amount > 0.00)
		gl_rec.curdb += amount;
	else
		gl_rec.curcr += amount;

	gl_rec.currel[pa_rec.pa_cur_period-1] =
			 D_Roundoff(gl_rec.currel[pa_rec.pa_cur_period-1]);
	gl_rec.ytd = D_Roundoff(gl_rec.ytd);
	gl_rec.curdb = D_Roundoff(gl_rec.curdb);
	gl_rec.curcr = D_Roundoff(gl_rec.curcr);

	retval = put_gl( &gl_rec, UPDATE, e_mesg );
	if( retval!=NOERROR ){
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(retval);
	}
	if( commit(e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}

	if (fund == s_sth.s_funds) return(0);

	/**************************************************** 
	 if Cr Fund not equal to Db Fund then we must also 
	 perform the following reverse entries 
	 ****************************************************/

	/* read the ctl record for the duetofrom_acct number for the Db Fund */

	ctl_rec.fund = fund;
	retval = get_ctl( &ctl_rec, BROWSE, 0, e_mesg );
	if( retval < 0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}

	for(;;) {
		gl_rec.funds = fund;
		strcpy( gl_rec.accno, ctl_rec.duetofrom_acct );
		gl_rec.reccod = 99;
		retval = get_gl( &gl_rec, UPDATE, 0, e_mesg );
		if( retval==NOERROR )	break;
		if( retval==LOCKED ){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			continue;
		}
		if( retval!=NOERROR ){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		}
	}

	/* reverse the transaction for the duetofrom acct for the fund */

	amount = amount * -1;

	if((retval = WriteJr(fund,
			ctl_rec.duetofrom_acct,amount))< 0 ) return(retval);

	gl_rec.currel[pa_rec.pa_cur_period-1] += amount;
	gl_rec.ytd += amount;
	if(amount > 0.00)
		gl_rec.curdb += amount;
	else
		gl_rec.curcr += amount ;

	/*  Round off double items that may have been calculated  */
	gl_rec.currel[pa_rec.pa_cur_period-1] =
		D_Roundoff(gl_rec.currel[pa_rec.pa_cur_period-1]);
	gl_rec.ytd	= D_Roundoff(gl_rec.ytd);
	gl_rec.curdb	= D_Roundoff(gl_rec.curdb);
	gl_rec.curcr	= D_Roundoff(gl_rec.curcr);

	retval = put_gl( &gl_rec, UPDATE, e_mesg );
	if( retval!=NOERROR ){
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(retval);
	}
	if( commit(e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}

	/* read the ctl record for the duetofrom_acct number for the Cr Fund */

	ctl_rec.fund = s_sth.s_funds;
	retval = get_ctl( &ctl_rec, BROWSE, 0, e_mesg );
	if( retval < 0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}

	for(;;) {
		gl_rec.funds = s_sth.s_funds;
		STRCPY( gl_rec.accno, ctl_rec.duetofrom_acct );
		gl_rec.reccod = 99;
		retval = get_gl( &gl_rec, UPDATE, 0, e_mesg );
		if( retval==NOERROR )	break;
		if( retval==LOCKED ){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			continue;
		}
		if( retval!=NOERROR ){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		}
	}

	/* reverse the transaction for the duetofrom acct for the fund2 */
	amount = amount * -1;

	if((retval = WriteJr(fund,
			ctl_rec.duetofrom_acct,amount))< 0 ) return(retval);

	gl_rec.currel[pa_rec.pa_cur_period-1] += amount;
	gl_rec.ytd += amount;
	if(amount > 0.00)
		gl_rec.curdb += amount;
	else
		gl_rec.curcr += amount;

	/*  Round off double items that may have been calculated  */
	gl_rec.currel[pa_rec.pa_cur_period-1] =
		D_Roundoff(gl_rec.currel[pa_rec.pa_cur_period-1]);
	gl_rec.ytd	= D_Roundoff(gl_rec.ytd);
	gl_rec.curdb	= D_Roundoff(gl_rec.curdb);
	gl_rec.curcr	= D_Roundoff(gl_rec.curcr);

	retval = put_gl( &gl_rec, UPDATE, e_mesg );
	if( retval!=NOERROR ){
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(retval);
	}
	if( commit(e_mesg)<0 ){
		DispError((char *)&s_sth,e_mesg);
		return(-1);
	}
	return(NOERROR);

}
/****************************************************************************/
static
UpdtOvBank()
{
	int	j,retval;
	double	temp_units;


	strcpy(sen_par.sn_position,emp_rec.em_pos);
	sen_par.sn_eff_date = get_date();
	flg_reset(SEN_PAR);

	retval = get_n_sen_par(&sen_par, BROWSE, 0, BACKWARD, e_mesg);
	if(retval < 0) {
  		DispError((char *)&s_sth,e_mesg);
		return(NOERROR);
	}
	seq_over(SEN_PAR);
	if(strcmp(sen_par.sn_position,emp_rec.em_pos)!=0){
		DispError((char *)&s_sth,"Seniority Parameter Record Not on File");
		return(NOERROR);
	}

	temp_units = 0;
	for(j=0 ; j<7 ; j++) {
	    temp_units += time_rec.tm_units[j];
	}

	strcpy(earnings.ea_code,time_rec.tm_earn);
	earnings.ea_date = s_sth.s_rundate;
	flg_reset(EARN);

	retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
	if(retval < 0 && retval != EFL){
	  	DispError((char *)&s_sth,e_mesg) ;
		seq_over(EARN);
	  	return(retval);
	}
	if(strcmp(earnings.ea_code,time_rec.tm_earn) != 0
	       || retval == EFL){
	  	DispError((char *)&s_sth,"Time Entry Earnings Code not Setup") ;
		seq_over(EARN);
	  	return(retval);
	}

	temp_units = temp_units / sen_par.sn_num_hrs_day * earnings.ea_amount;

	emp_rec.em_vac_bk += D_Roundoff(temp_units);

	retval = put_employee(&emp_rec,UPDATE,e_mesg);
	if( retval < 0) {
		roll_back(e_mesg);
		DispError((char *)&s_sth,e_mesg) ;
		return(retval) ;
	}
	retval = commit(e_mesg);
	if(retval < 0) {
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(ERROR);
	}
	return(NOERROR);
}
/*-------------------- E n d   O f   P r o g r a m ---------------------*/
