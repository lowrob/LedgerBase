/*------------------------------------------------------------------------
Source Name: pay_sel.c
System     : Personnel/Payroll System.
Created  On: 14th October 91.
Created  By: Eugene Roy.

DESCRIPTION:
	Program to enter pay period payment selections.

MODIFICATIONS:        

Programmer     YY/MM/DD       Description of modification
~~~~~~~~~~     ~~~~~~~~       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
------------------------------------------------------------------------*/

#define	MAIN		/* Main program. This is to declare Switches */

#define	SYSTEM		"CHEQUE PRE-SELECTION"	/* Sub System Name */
#define	MOD_DATE	"14-OCT-91"		/* Program Last Modified */

#include <stdio.h>
#include <cfomstrc.h>
#include <bfs_defs.h>
#include <bfs_com.h>
#include <bfs_pp.h>
#include <repdef.h>

#define EXIT	   	12

/* User Interface define constants */
#ifdef ENGLISH
#define SELECT		'S'
#define EXITOPT		'E'

#define	YES		'Y'
#define NO		'N'
#define	EDIT		'E'
#define	CANCEL		'C'
#else
#define SELECT		'C'
#define EXITOPT		'F'

#define	YES		'O'
#define NO		'N'
#define	EDIT		'M'

#define	CANCEL		'A'
#endif

/* PROFOM Releted declarations */

#define	SCR_NAME	"pay_sel"	/* PROFOM screen Name */

/* Field PROFOM numbers */
#define START_FLD 	400	/* Start Field in range */
#define	END_FLD		1600	/* Last Field of the screen */

#define	STEP		100

#define BARG1		400	/* Starting Bargaining Unit		*/
#define BARG2		500	/* Ending Bargaining Unit		*/
#define POS1		600	/* Starting Classification		*/
#define POS2		700	/* Ending Classification		*/
#define EMP1		800	/* Starting Employee Number		*/
#define EMP2		900	/* Ending Employee Number		*/
#define PAYDATE		1000	/* Payment for Pay Date			*/
#define PAYPER1		1100	/* Include from Pay Period		*/
#define OPTION		1200	/* */
#define MESSAGE		1300	/* */
#define RESPONSE	1400	/* */

/* pselect.sth - header for C structure generated by PROFOM EDITOR */

typedef struct	{

	char	s_pgm[11];	/* 100 program name */
	long	s_rundate;	/* 300 run date */
	char	s_barg1[7];	/* 400 due date */
	char	s_barg2[7];	/* 500 transaction date */
	char	s_pos1[7];	/* 600 release holdbacks option */
	char 	s_pos2[7];	/* 700 starting supplier code */
	char	s_emp1[13];	/* 800 ending supllier code */
	char	s_emp2[13];	/* 900 starting trans ref. no. */
	long	s_paydate;	/* 1000 ending trans ref. no. */
	short	s_payper1;	/* 1100 past due date */
	char	s_option[2];	/* 1300 option choice */
	char	s_mesg[78];	/* 1500 message field */
	char	s_resp[2];	/* 1600 response field */
	} S_STRUCT;


S_STRUCT	s_sth;	/* PROFOM Screen Structure */
static	struct  stat_rec  sr;		/* PROFOM status rec */

/* File structures */
static	Pa_rec	pa_rec;
static	Time	time_rec;
static	Barg_unit	barg_unit;
static	Cert	cert;
static	Position	position;
static	Class	class;
static	Emp	emp_rec;
static	Emp_sched1	emp_sched1;
static	Pay_per	pay_period;
static	Pay_per_it	pay_per_it;
static	Pay_param	pay_param;
static	Emp_ben	emp_ben;
static	Emp_extra	emp_extra;
static	Benefit	benefit;
static	Earn	earnings;
static	Pay_earn	pp_earn;
static	Pp_ben	pp_ben;
static	Gl_rec	gl_rec;
static	Gl_acct	gl_acct;
static	Jr_ent	jr_ent;
static	Man_chq	man_chq;

static	char 	e_mesg[180];  		/* dbh will return err msg in this */

static	Validation();
static	WindowHelp();

static	int	PG_SIZE;
static	char	discfile[15];	/* for storing output name */
static	short 	pgcnt;		/* for page count */	

static  double disc_taken;
static  double disc_lost;
static  double gross_pay;

double 	D_Roundoff();
main(argc,argv)
int argc;
char *argv[];
{
	int 	retval;

	LNSZ = 132;
	retval = Initialize(argc,argv);	/* Initialization routine */

	if (retval == NOERROR) retval = Process();

	CloseRtn();			/* return to menu */
	if (retval != NOERROR) exit(1);
	exit(0);
}

/*-------------------------------------------------------------------*/
/* Initialize PROFOM */

Initialize(argc, argv)
int	argc ;
char	*argv[] ;
{
	int	err ;

	/*
	*	Initialize DBH Environment
	*/
	strncpy(SYS_NAME,SYSTEM,50);	/* Sub system name */
	strncpy(CHNG_DATE,MOD_DATE,10);	/* Modification Date */

	proc_switch(argc, argv, CHEQUE) ; 	/* Process Switches */

	/*
	*	Initialize PROFOM & Screen
	*/
	STRCPY(sr.termnm,terminal);	/* Copy Terminal Name */
	fomin(&sr);
	ret(err_chk(&sr)) ;		/* Check for PROFOM Error */
	fomcf(1,1);			/* Enable Snap screen option */

	err = InitScreen() ;		/* Initialize Screen */
	if(NOERROR != err) return(err) ;

	return(NOERROR) ;
}	/* Initialize() */

/*--------------------------------------------------------------------------*/
/* Close nessary files and environment before exiting program               */

CloseRtn() 
{
	/* Set terminal back to normal mode from PROFOM */
	fomcs();
	fomrt();

	close_dbh();	/* Close files */
	close_rep();	/* Close report */

	return(NOERROR);
}	/* CloseRtn() */
/*----------------------------------------------------------------*/
/* Initialize screen before going to process options */

InitScreen()
{
	/* move screen name to Profom status structure */
	STRCPY(sr.scrnam,NFM_PATH);
	strcat(sr.scrnam,SCR_NAME) ;

	STRCPY(s_sth.s_pgm,PROG_NAME);
	s_sth.s_rundate = get_date();	/* get Today's Date in YYYYMMDD format*/
	s_sth.s_option[0] = HV_CHAR;
	s_sth.s_mesg[0] = HV_CHAR ;
	s_sth.s_resp[0] = HV_CHAR ;

	/* Move Low Values to data fields */
	InitFields() ;

	return(NOERROR) ;
}	/* InitScreen() */

/*-------------------------------------------------------------------*/
/* Get Option from user and call corresponding function */

Process()
{
	int	err;

	for( ; ; ){

		if((err = ReadOption())<0) 
			return(err);

		switch(s_sth.s_option[0]) {
		case  EXITOPT :
			return(NOERROR);
		case  SELECT :
			CHKACC(err,ADD,e_mesg);
			err = ProcOption() ;
			break ;
		default :
			continue;
		}

		if(NOACCESS == err)	fomen(e_mesg);
		if(PROFOM_ERR == err)	return(PROFOM_ERR);  /* PROFOM ERROR */
		if(DBH_ERR == err) {
			DispError((char *)&s_sth,e_mesg);
#ifdef ENGLISH
			sprintf(e_mesg,"%s %d Dberror: %d Errno: %d",
				"System Error... Iserror:",
				iserror, dberror, errno);
#else
			sprintf(e_mesg,"%s %d Dberror: %d Errno: %d",
				"Erreur du systeme... Iserror:",
				iserror, dberror, errno);
#endif
			DispError((char *)&s_sth,e_mesg);
			return(DBH_ERR); /* DBH ERROR */
		
		}
	}      /*   end of the for( ; ; )       */
}	/* Process() */
/*------------------------------------------------------------*/
ReadOption()
{

	s_sth.s_mesg[0] = HV_CHAR;
	DispMesgFld((char *)&s_sth);	
#ifdef ENGLISH
	fomer("S(elect), E(xit)");
#else
	fomer("C(hoisir), F(in)");
#endif
	sr.nextfld = OPTION;
	fomrf((char *)&s_sth);
	ret(err_chk(&sr));

}	/* ReadOption */
/*------------------------------------------------------------*/
ProcOption()
{
	int	i, err ;

	for(i = START_FLD ; i <= END_FLD - 300 ; i += 100)
		fomca1(i, 19, 0) ;    /* disable dup control */

	err = ReadRange(ADD) ;
	if(err != NOERROR) return(err) ;

	err = Confirm() ;
	if(err != YES) return(NOERROR) ;

	/* Check to see if payroll in process */
	jr_ent.jr_fund = 0;
	jr_ent.jr_no = 0;
	flg_reset(JR_ENT);

	err = get_n_jr_ent(&jr_ent,UPDATE,0,FORWARD,e_mesg);
	if(err < 0 && err != EFL){
	  	DispError((char *)&s_sth,e_mesg) ;
		seq_over(JR_ENT);
		roll_back(e_mesg);
	  	return(ERROR);
	}
	if(err != EFL && jr_ent.jr_pay_sen[0] == 'S'){
	  	DispError((char *)&s_sth,"End of period in process, can't continue") ;
		return(NOERROR);
	}

	unlink_file(PP_EARN);
	unlink_file(PP_BEN);
	unlink_file(PP_DED);
	unlink_file(PP_LOAN);
	unlink_file(PP_GARN);
	unlink_file(JR_ENT);
	
	err = ProcRanges() ;

	if(pgcnt){
		if(term < 99)
			last_page();
#ifndef		SPOOLER
		else
			rite_top();
#endif
		}

	return(NOERROR);
}	/* ProcSelection() */
/*------------------------------------------------------------*/
/* Get the Header details from user */

ReadRange(mode)
int	mode ;
{
	int	 i, err ;

	if(mode == ADD) {
#ifdef ENGLISH
		STRCPY(s_sth.s_mesg,"Press ESC-F to Go to Option:");
#else
		STRCPY(s_sth.s_mesg,"Appuyer sur ESC-F pour retourner a Option:");
#endif
		DispMesgFld((char *)&s_sth);

		fomca1(BARG1, 19, 2) ;
		fomca1(BARG2, 19, 2) ;
		fomca1(POS1, 19, 2);
		fomca1(POS2, 19, 2) ;
		fomca1(EMP1, 19, 2) ;
		fomca1(EMP2, 19, 2) ;
		fomca1(PAYDATE, 19, 2) ;
		strcpy(s_sth.s_barg1, "     0");
		strcpy(s_sth.s_barg2, "ZZZZZZ");
		strcpy(s_sth.s_pos1, "     0");
		strcpy(s_sth.s_pos2, "ZZZZZZ");
		strcpy(s_sth.s_emp1, "           1");
		strcpy(s_sth.s_emp2, "ZZZZZZZZZZZZ");
		s_sth.s_paydate = 99991231 ;
		s_sth.s_payper1 = 1 ;
		sr.nextfld = BARG1 ;
		sr.endfld = END_FLD - 300 ;
		fomud((char*)&s_sth);
		ret(err_chk(&sr));
	}
	InitFields() ;

	i = ReadFields((char *)&s_sth,START_FLD, END_FLD - 300,
			Validation, WindowHelp, 1) ;
	if(PROFOM_ERR == i || DBH_ERR == i) return(i) ;
	if(RET_USER_ESC == i) {	/* ESC-F */
		return(RET_USER_ESC) ;
	}

	return(NOERROR) ;
}	/* ReadRange() */
/*----------------------------------------------------------------*/
/* Validation function() for Key and Header fields when PROFOM returns
  RET_VAL_CHK */

static
Validation()
{
	switch(sr.curfld){
	case BARG1:  /* ending bargaining unit code */
		Right_Justify_Numeric(s_sth.s_barg1
					,(sizeof(s_sth.s_barg1)-1));

		ret( WriteFields((char *)&s_sth,BARG1, BARG1) ) ;

		break;
	case BARG2:  /* ending bargaining unit code */
		Right_Justify_Numeric(s_sth.s_barg2
					,(sizeof(s_sth.s_barg2)-1));
		if(strcmp(s_sth.s_barg2,s_sth.s_barg1) <0) {
#ifdef ENGLISH
			fomer("Ending code cannot precede starting code");
#else
			fomer("Code finissant ne peut pas preceder le code debutant");
#endif
			s_sth.s_barg2[0] = LV_CHAR;
		}

		ret( WriteFields((char *)&s_sth,BARG2, BARG2) ) ;

		break;
	case POS1:  
		Right_Justify_Numeric(s_sth.s_pos1
					,(sizeof(s_sth.s_pos1)-1));

		ret( WriteFields((char *)&s_sth,POS1, POS1) ) ;

		break;
	case POS2: 
		Right_Justify_Numeric(s_sth.s_pos2
					,(sizeof(s_sth.s_pos2)-1));
		if(strcmp(s_sth.s_pos2,s_sth.s_pos1) <0) {
#ifdef ENGLISH
			fomer("Ending code cannot precede starting code");
#else
			fomer("Code finissant ne peut pas preceder le code debutant");
#endif
			s_sth.s_pos2[0] = LV_CHAR;
		}

		ret( WriteFields((char *)&s_sth,POS2, POS2) ) ;

		break;
	case EMP1:
		Right_Justify_Numeric(s_sth.s_emp1
					,(sizeof(emp_rec.em_numb)-1));

		ret( WriteFields((char *)&s_sth,EMP1, EMP1) ) ;

		break;
	case EMP2:  /* ending employee code */
		Right_Justify_Numeric(s_sth.s_emp2
					,(sizeof(emp_rec.em_numb)-1));
		if(strcmp(s_sth.s_emp2,s_sth.s_emp1) <0) {
#ifdef ENGLISH
			fomer("Ending number cannot precede starting number");
#else
			fomer("Numero finissant ne peut pas preceder le numero debutant");
#endif
			s_sth.s_emp2[0] = LV_CHAR;
		}

		ret( WriteFields((char *)&s_sth,EMP2, EMP2) ) ;

		break;
	default :
#ifdef ENGLISH
		sprintf(e_mesg,"No Validity Check For Field#  %d",sr.curfld);
#else
		sprintf(e_mesg,"Pas de controle de validite pour le Champ#  %d",sr.curfld);
#endif
		fomen(e_mesg);
		get();
		return(ERROR) ;
	}	/* Switch sr.curfld */

	return(NOERROR) ;
}	/* Validation() */
/*----------------------------------------------------------------*/
/* Show Help Windows, if applicable, when user gives ESC-H in key
   and header fields */

static
WindowHelp()
{

	fomer("No Help Window for This Field");

	return(NOERROR) ;
}	/* HdrAndKeyWindowHelp() */
/*-----------------------------------------------------------------------*/
/* Take the confirmation from user for the header part */

Confirm()
{
	int	err ;

	for( ; ; ) {
#ifdef ENGLISH
		err = GetOption((char *)&s_sth,"Y(es), E(dit), C(ancel)", "YEC");
#else
		err = GetOption((char *)&s_sth,"O(ui), M(odifier), A(nnuler)", "OMA");
#endif
		if(err == PROFOM_ERR) return(err) ;

		switch(err) {
		case  YES :
			return(YES) ;
		case  EDIT  :
			err = FieldEdit();
			break ;
		case  CANCEL :
#ifdef ENGLISH
			err = GetOption((char *)&s_sth,"Confirm the Cancel (Y/N)?", "YN") ;
#else
			err = GetOption((char *)&s_sth,"Confirmer l'annulation (O/N)?", "ON") ;
#endif
			if(err == YES) { 
				roll_back(e_mesg) ;	/* Unlock  Records */
				return(CANCEL) ;
			}
			break ;
		}	/* switch err */

		if(err == PROFOM_ERR) return(err) ;
		if(err == DBH_ERR) return(err) ;
	}	/* for(; ; ) */
}	/* Confirm() */
/*-----------------------------------------------------------------------*/
/*                                                                       */
/* Changing fields. Accept fld to be changed and read that fld 		 */

FieldEdit()
{
     	int	i,retval;

     	for ( i = START_FLD; i <= END_FLD - 300 ; i += 100 )
       		fomca1( i,19,2 );      		/*  enable Dup Control */

     	sr.nextfld = START_FLD;
     	sr.endfld = END_FLD - 300;
     	fomud( (char *) &s_sth );
     	ret(err_chk(&sr));

	retval = ReadRange(UPDATE);
	if(retval != NOERROR) return(retval) ;

     	return(NOERROR);
}	/* FieldEdit() */
/*-------------------------------------------------------------------------*/
/* Initialize Screen Header with either Low Values */

InitFields()
{
	s_sth.s_barg1[0] = LV_CHAR;
	s_sth.s_barg2[0] = LV_CHAR;
	s_sth.s_pos1[0] = LV_CHAR;
	s_sth.s_pos2[0] = LV_CHAR;
	s_sth.s_emp1[0] = LV_CHAR;
	s_sth.s_emp2[0] = LV_CHAR;
	s_sth.s_paydate = LV_LONG;
	s_sth.s_payper1 = LV_SHORT;
	
	return(NOERROR) ;
}	/* InitFields() */
/*-----------------------------------------------------------------------*/
ProcRanges()
{
	int	i, j, retval, err;
	int	gl_true;


 	retval = get_pay_param(&pay_param,BROWSE,1,e_mesg);
	if(retval < 0) {
  	    DispError((char *)&s_sth,e_mesg);
	    return(retval);
	}

	if(InitPrinter1()<0){
		return(-1);
	}

	retval = PrntHdg();
	if(retval < 0)	return(retval);

	strcpy(earnings.ea_code,pay_param.pr_reg_earn);
	earnings.ea_date = s_sth.s_rundate;
	flg_reset(EARN);

	retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
	if(retval < 0 && retval != EFL){
	  	DispError((char *)&s_sth,e_mesg) ;
		seq_over(EARN);
	  	return(retval);
	}
	if(strcmp(earnings.ea_code,pay_param.pr_reg_earn) != 0
	   || retval == EFL){
	  	DispError((char *)&s_sth,"Regular Earnings Code not Setup") ;
		seq_over(EARN);
	  	return(NOERROR);
	}
	seq_over(EARN);

	strcpy(earnings.ea_code,pay_param.pr_vac_earn);
	earnings.ea_date = s_sth.s_rundate;
	flg_reset(EARN);

	retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
	if(retval < 0 && retval != EFL){
	  	DispError((char *)&s_sth,e_mesg) ;
		seq_over(EARN);
	  	return(retval);
	}
	if(strcmp(earnings.ea_code,pay_param.pr_vac_earn) != 0
	   || retval == EFL){
	  	DispError((char *)&s_sth,"Vacation Earnings Code not Setup") ;
		seq_over(EARN);
	  	return(NOERROR);
	}
	seq_over(EARN);

	retval = Calc_Time();
	if(retval != NOERROR){
		DispError((char *)&s_sth,e_mesg) ;
		return(ERROR);
	}

	strcpy(emp_rec.em_numb, s_sth.s_emp1);
	flg_reset(EMPLOYEE);

	for( ; ; ){
			
	  retval = get_n_employee(&emp_rec,BROWSE,0,FORWARD,e_mesg);
	  if(retval < 0) {
		if(retval == EFL) break;
		DispError((char *)&s_sth,e_mesg);
		retval = PrntRec(e_mesg);
		if(retval < 0)
			DispError((char *)&s_sth,e_mesg);
		seq_over(EMPLOYEE);
		return(retval);
	  }
	  if(strcmp(emp_rec.em_numb,s_sth.s_emp2) > 0)
	  	break;

	  if((strcmp(emp_rec.em_barg,s_sth.s_barg1) < 0) ||
	     (strcmp(emp_rec.em_barg,s_sth.s_barg2) > 0))
	  	continue ;

  	  if((strcmp(emp_rec.em_pos,s_sth.s_pos1) < 0) ||
   	    (strcmp(emp_rec.em_pos,s_sth.s_pos2) > 0))
	  	continue ;

	  if(emp_rec.em_term_dt!=0)
		continue;

	  if(strcmp(emp_rec.em_status,"ACT")!=0){
		sprintf(e_mesg,"Employee Status: %s", emp_rec.em_status);
		retval = PrntRec(e_mesg);
		if(retval < 0)
			DispError((char *)&s_sth,e_mesg);
		continue;
	  }

	  strcpy(barg_unit.b_code,emp_rec.em_barg);
	  barg_unit.b_date = get_date();
	  flg_reset(BARG);

	  err = get_n_barg(&barg_unit,BROWSE,0,BACKWARD,e_mesg);
	  if(err == EFL ||
	     strcmp(barg_unit.b_code, emp_rec.em_barg) != 0){
		sprintf(e_mesg,"Bargaining Unit does no exist: %s",
			emp_rec.em_barg);
  		DispError((char *)&s_sth,e_mesg);
	  	retval = PrntRec(e_mesg) ;
	  	if(retval < 0){
	  		DispError((char *)&s_sth,e_mesg) ;
	  	}
		return(NOERROR);
	  }
	  if(err < 0){
  		DispError((char *)&s_sth,e_mesg);
	  	retval = PrntRec(e_mesg) ;
	  	if(retval < 0){
	  		DispError((char *)&s_sth,e_mesg) ;
	  	}
  		return(ERROR);
	  }
	  seq_over(BARG);

	  strcpy(pay_per_it.ppi_code,barg_unit.b_pp_code);
	  pay_per_it.ppi_year = 1993;
	  pay_per_it.ppi_numb = s_sth.s_payper1;

	  retval = get_pp_it(&pay_per_it,BROWSE,0,e_mesg);
	  if(retval < 0){ 
		strcpy(e_mesg,"Employee is Not Setup For Pay Period");
		retval = PrntRec(e_mesg);
		if(retval < 0)
			DispError((char *)&s_sth,e_mesg);
		continue;
	  }

	  sprintf(e_mesg,"Employee #: %s", emp_rec.em_numb);
	  fomen(e_mesg);
	  fflush(stdout) ;

	  retval = Pre_Sched();
	  if(retval < 0 && retval != UNDEF){
		DispError((char *)&s_sth,e_mesg) ;
		continue;
	  }
	  if(retval == UNDEF) continue;

	/* this section of code has to be changed so I have removed it
	   for now
	  retval = Calc_Resp();
	  if(retval != NOERROR){
		DispError((char *)&s_sth,e_mesg) ;
		continue;
	  } */

	  retval = Calc_Ben();
	  if(retval != NOERROR){
		DispError((char *)&s_sth,e_mesg) ;
		continue;
	  }

	}
	seq_over(EMPLOYEE);
	close(EMPLOYEE);

	retval = Calc_Adv();
	if(retval != NOERROR){
		DispError((char *)&s_sth,e_mesg) ;
		return(ERROR);
	}

	return(NOERROR) ;
}
/*--------------------------------------------------------------*/
/* Read all time entry info for the key's given 		*/

Pre_Sched()
{
	int retval, err;
	int last_pp;
	int i, j ;
	double	temp_units;
	double	reg_inc;
	int	no_weeks;
	double	temp_total;
	int	add_cent;
	long	temp_mod, modula;

	strcpy(barg_unit.b_code,emp_rec.em_barg);
	barg_unit.b_date = get_date();
	flg_reset(BARG);

	err = get_n_barg(&barg_unit,BROWSE,0,BACKWARD,e_mesg);
	if(err == EFL ||
		strcmp(barg_unit.b_code, emp_rec.em_barg) != 0){
		sprintf(e_mesg,"Bargaining Unit does no exist: %s",
			emp_rec.em_barg);
  		DispError((char *)&s_sth,e_mesg);
	  	retval = PrntRec(e_mesg) ;
	  	if(retval < 0){
	  		DispError((char *)&s_sth,e_mesg) ;
	  	}
		return(NOERROR);
	}
	if(err < 0){
  		DispError((char *)&s_sth,e_mesg);
	  	retval = PrntRec(e_mesg) ;
	  	if(retval < 0){
	  		DispError((char *)&s_sth,e_mesg) ;
	  	}
  		return(ERROR);
	}
	seq_over(BARG);

	strcpy(pay_period.pp_code, barg_unit.b_pp_code);
	pay_period.pp_year = 0;
	flg_reset(PAY_PERIOD);

	err = get_n_pay_per(&pay_period,BROWSE, 0, FORWARD, e_mesg) ;
	if(err < 0) {
  		DispError((char *)&s_sth,e_mesg);
	  	retval = PrntRec(e_mesg) ;
	  	if(retval < 0){
	  		DispError((char *)&s_sth,e_mesg) ;
	  	}
		if(err == UNDEF)
			 return(NOERROR);
		return(ERROR) ;
	}
	if(strcmp(pay_period.pp_code,barg_unit.b_pp_code)!=0){
		sprintf(e_mesg,"Error Reading Pay Period File: %s",
			barg_unit.b_pp_code);
  		DispError((char *)&s_sth,e_mesg);
	  	retval = PrntRec(e_mesg) ;
	  	if(retval < 0){
	  		DispError((char *)&s_sth,e_mesg) ;
	  	}
		return(ERROR);
	}
	seq_over(PAY_PERIOD);

	strcpy(pp_earn.pe_numb, emp_rec.em_numb);
	pp_earn.pe_pp = s_sth.s_payper1;
	pp_earn.pe_date = s_sth.s_paydate;

	err = get_pp_earn(&pp_earn,BROWSE,0,e_mesg);
	if(err < 0 && err != UNDEF){
	  	DispError((char *)&s_sth,e_mesg) ;
		retval = PrntRec(e_mesg);
		if(retval < 0)
	  		DispError((char *)&s_sth,e_mesg) ;
	  	return(ERROR);
	}
	if(err == 0) return(NOERROR);

	strcpy(emp_sched1.es_numb,emp_rec.em_numb);
	emp_sched1.es_week = 0;
	emp_sched1.es_fund = 0;
	emp_sched1.es_class[0] = '\0';
	emp_sched1.es_cost = 0;
	flg_reset(EMP_SCHED1);

	for( ; ; ) {
		retval = get_n_emp_sched1(&emp_sched1,BROWSE,0, FORWARD,e_mesg);
		if(retval < 0) {
			if(retval == EFL) break;
			DispError((char *)&s_sth,e_mesg);
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			seq_over(EMP_SCHED1);
			return(retval);
		}
		if(strcmp(emp_sched1.es_numb,emp_rec.em_numb) !=0)
			break;

		strcpy(pp_earn.pe_numb, emp_rec.em_numb);
		pp_earn.pe_pp = s_sth.s_payper1;
		pp_earn.pe_date = s_sth.s_paydate;

		err = get_pp_earn(&pp_earn,UPDATE,0,e_mesg);
		if(err < 0 && err != UNDEF){
		  	DispError((char *)&s_sth,e_mesg) ;
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
		  	return(ERROR);
		}
		if(err == UNDEF){
			InitPpEarn();
		}
		pp_earn.pe_cc = emp_rec.em_cc;

		temp_units = 0;
		for(j=0 ; j<7 ; j++) {
		    temp_units += emp_sched1.es_units[j];
		}

		gl_acct.gl_fund = emp_sched1.es_fund;
		gl_acct.gl_cc = emp_sched1.es_cost;

		strcpy(gl_acct.gl_type, "S");
		strcpy(gl_acct.gl_class,emp_sched1.es_class);
			
		strcpy(gl_acct.gl_earn, pay_param.pr_reg_earn);
		flg_reset(GLACCT);

		retval = get_n_glacct(&gl_acct,BROWSE,0,FORWARD,e_mesg);
		if(retval < 0 && retval != EFL){
		  	DispError((char *)&s_sth,e_mesg) ;
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
			seq_over(GLACCT);
		  	return(ERROR);
		}
		if(retval == EFL || gl_acct.gl_fund != emp_sched1.es_fund ||
		   gl_acct.gl_cc != emp_sched1.es_cost ||
		   strcmp(gl_acct.gl_type,"S")!=0 ||
		   strcmp(gl_acct.gl_class,emp_sched1.es_class)!=0 ||
		   strcmp(gl_acct.gl_earn,pay_param.pr_reg_earn)!=0){
			sprintf(e_mesg,"G/L Account Not Setup For Fund: %d, CC: %d, Type: S, Class: %s, Earn Code: %s", emp_sched1.es_fund, 
			  emp_sched1.es_cost,emp_sched1.es_class,
			  pay_param.pr_reg_earn);
		  	DispError((char *)&s_sth,e_mesg) ;
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
			continue;
		}
		seq_over(GLACCT);

		jr_ent.jr_fund = gl_acct.gl_fund;
		retval = GetJr(gl_acct.gl_fund);
		if(retval < 0){
		  	return(ERROR);
		}
		strcpy(jr_ent.jr_emp_numb,emp_rec.em_numb);
		strcpy(jr_ent.jr_acct,gl_acct.gl_acct);
		jr_ent.jr_date = s_sth.s_paydate;
		strcpy(jr_ent.jr_code,pay_param.pr_reg_earn);
		strcpy(jr_ent.jr_type,"E");

		jr_ent.jr_amount = D_Roundoff(emp_sched1.es_amount);

		strcpy(jr_ent.jr_class,emp_sched1.es_class);
		strcpy(jr_ent.jr_pay_sen,"P");

		/*  if no income return	*/
		if(jr_ent.jr_amount != 0) {
			retval = put_jr_ent(&jr_ent,ADD,e_mesg);	
			if(retval < 0) {
			 	DispError((char *)&s_sth,e_mesg);
				retval = PrntRec(e_mesg);
				if(retval < 0)
	  				DispError((char *)&s_sth,e_mesg) ;
				roll_back(e_mesg);
			  	return(ERROR);
			}
			retval = commit(e_mesg);
			if(retval < 0) {
		  		DispError((char *)&s_sth,e_mesg);
				retval = PrntRec(e_mesg);
				if(retval < 0)
	  				DispError((char *)&s_sth,e_mesg) ;
				roll_back(e_mesg);
		  		return(ERROR);
			}
		}

		no_weeks = 52 / pay_period.pp_numb;

		strcpy(pp_earn.pe_chq_type,"R");
		if(err == UNDEF){
			pp_earn.pe_reg_units = temp_units;
			pp_earn.pe_reg_inc1 = D_Roundoff(emp_sched1.es_amount);
			pp_earn.pe_week_units[emp_sched1.es_week-1] =
				 temp_units;
			pp_earn.pe_week_inc[emp_sched1.es_week-1] =
				 D_Roundoff(emp_sched1.es_amount);
			if(pp_earn.pe_reg_inc1 != 0)
	  			retval = put_pp_earn(&pp_earn,ADD,e_mesg);	
		}
		else{
			pp_earn.pe_reg_units += temp_units;
			pp_earn.pe_reg_inc1 += D_Roundoff(emp_sched1.es_amount);
			pp_earn.pe_week_units[emp_sched1.es_week-1] +=
				 temp_units;
			pp_earn.pe_week_inc[emp_sched1.es_week-1] +=
				 D_Roundoff(emp_sched1.es_amount);

			if(pp_earn.pe_reg_inc1 != 0)
		  		retval = put_pp_earn(&pp_earn,UPDATE,e_mesg);	
		}
		if(retval < 0) {
		 	DispError((char *)&s_sth,e_mesg);
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
		  	return(ERROR);
		}
		retval = commit(e_mesg);
		if(retval < 0) {
		  	DispError((char *)&s_sth,e_mesg);
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
		  	return(ERROR);
		}
	}		
	seq_over(EMP_SCHED1);
	close(EMP_SCHED1);

	return(NOERROR);
}
/*-----------------------------------------------------------------------*/
Calc_Time()
{
	int	i, j, retval, err;
	int	gl_true;

	strcpy(time_rec.tm_numb,s_sth.s_emp1);
	if(s_sth.s_paydate == 99991231)
		time_rec.tm_date = 0;
	else
		time_rec.tm_date = s_sth.s_paydate;
	time_rec.tm_no = 0;

	flg_reset(TIME);

 	for( ; ; ) {
	
		retval = get_n_ptime(&time_rec,BROWSE,0,FORWARD,e_mesg);
		if(retval == EFL)
			break ;
		if(retval < 0){
			DispError((char *)&s_sth,e_mesg) ;
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			seq_over(TIME);
			return(ERROR);
		}
	
	  	if(strcmp(time_rec.tm_numb,s_sth.s_emp2) > 0) 
			break;

		if(time_rec.tm_date != s_sth.s_paydate)  
			continue;

		strcpy(emp_rec.em_numb,time_rec.tm_numb);

		retval = get_employee(&emp_rec,BROWSE,0,e_mesg);
		if(retval != NOERROR){
	  		DispError((char *)&s_sth,e_mesg) ;
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			if(retval == UNDEF)	continue;
	  		return(ERROR);
	  	}
	  	if(emp_rec.em_term_dt!=0)
			continue;

	  	if(strcmp(emp_rec.em_status,"ACT")!=0){
			sprintf(e_mesg,"Employee Status: %s",emp_rec.em_status);
			retval = PrntRec(e_mesg);
			if(retval < 0)
				DispError((char *)&s_sth,e_mesg);
			continue;
	  	}

	 	if((strcmp(emp_rec.em_barg,s_sth.s_barg1) < 0) ||
	   	  (strcmp(emp_rec.em_barg,s_sth.s_barg2) > 0))
			continue;

	  	if((strcmp(emp_rec.em_pos,s_sth.s_pos1) < 0) ||
	   	  (strcmp(emp_rec.em_pos,s_sth.s_pos2) > 0))
	  		continue ;

		sprintf(e_mesg,"Employee #: %s", emp_rec.em_numb);
		fomen(e_mesg);
		fflush(stdout) ;

		/*******************			*****************/
		/*  Calculating Gross Earnings for the Employee		*/
	
		strcpy(pp_earn.pe_numb, time_rec.tm_numb);
		pp_earn.pe_pp = s_sth.s_payper1;
		pp_earn.pe_date = time_rec.tm_date;

		err = get_pp_earn(&pp_earn,UPDATE,0,e_mesg);
		if(err < 0 && err != UNDEF){
		  	DispError((char *)&s_sth,e_mesg) ;
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
		  	return(ERROR);
		}
		if(err == UNDEF){
			InitPpEarn();
		}
		pp_earn.pe_cc = emp_rec.em_cc;
	
		strcpy(earnings.ea_code,time_rec.tm_earn);
		earnings.ea_date = s_sth.s_rundate;
		flg_reset(EARN);

		retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
		if(retval < 0 && retval != EFL){
		    DispError((char *)&s_sth,e_mesg) ;
		    retval = PrntRec(e_mesg);
		    if(retval < 0)
	  		DispError((char *)&s_sth,e_mesg) ;
		    seq_over(EARN);
		    roll_back(e_mesg);
		    return(retval);
		}
		if(strcmp(earnings.ea_code,time_rec.tm_earn) != 0 ||
		   retval == EFL){
			sprintf(e_mesg,"Earnings Code Does Not Exist: %s",
				time_rec.tm_earn);
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
		    	roll_back(e_mesg);
			continue;
		}
		seq_over(EARN);
	
		if(earnings.ea_reg_hgh[0] == 'H'){
		  if(err == UNDEF){
			for(j=0 ; j<7 ; j++) {
			  pp_earn.pe_high_units += time_rec.tm_units[j];
			  pp_earn.pe_week_hunits[time_rec.tm_week-1]
				 += time_rec.tm_units[j];
			}
			pp_earn.pe_high_inc = time_rec.tm_tot_amt;
			pp_earn.pe_week_hinc[time_rec.tm_week-1]
				 = time_rec.tm_tot_amt;
		  }
		  else{
			for(j=0 ; j<7 ; j++) {
			  pp_earn.pe_high_units += time_rec.tm_units[j];
			  pp_earn.pe_week_hunits[time_rec.tm_week-1]
				 += time_rec.tm_units[j];
			}
			pp_earn.pe_high_inc += time_rec.tm_tot_amt;
			pp_earn.pe_week_hinc[time_rec.tm_week-1]
				 += time_rec.tm_tot_amt;
		  }
		}
		else if(earnings.ea_reg_hgh[0] == 'R'){
		  if(err == UNDEF){
			for(j=0 ; j<7 ; j++) {
			  pp_earn.pe_reg_units += time_rec.tm_units[j];
			  pp_earn.pe_week_units[time_rec.tm_week-1]
				 += time_rec.tm_units[j];
			}
			if(strcmp(pay_param.pr_vac_earn,time_rec.tm_earn) == 0){
				pp_earn.pe_vac = time_rec.tm_tot_amt;
			}
			else {
				pp_earn.pe_reg_inc2 = time_rec.tm_tot_amt;
			}
			pp_earn.pe_week_inc[time_rec.tm_week-1]
				 = time_rec.tm_tot_amt;
		  }
		  else{
			for(j=0 ; j<7 ; j++) {
			  pp_earn.pe_reg_units += time_rec.tm_units[j];
			  pp_earn.pe_week_units[time_rec.tm_week-1]
				 += time_rec.tm_units[j];
			}
			if(strcmp(pay_param.pr_vac_earn,time_rec.tm_earn) == 0){
				pp_earn.pe_vac += time_rec.tm_tot_amt;
			}
			else {
				pp_earn.pe_reg_inc2 += time_rec.tm_tot_amt;
			}
			pp_earn.pe_week_inc[time_rec.tm_week-1]
				 += time_rec.tm_tot_amt;
		    }
		}
		/**********					*********/
		/* Determine the G/L Account for the Time Information	*/

		gl_acct.gl_fund = time_rec.tm_fund;
		gl_acct.gl_cc = time_rec.tm_cost;

		strcpy(gl_acct.gl_type, "S");
		strcpy(gl_acct.gl_class, time_rec.tm_class);
		strcpy(gl_acct.gl_earn, time_rec.tm_earn);
		gl_acct.gl_acct[0] = '\0';
		flg_reset(GLACCT);

		retval = get_n_glacct(&gl_acct,BROWSE,0,FORWARD,e_mesg);
		if(retval < 0 && retval != EFL){
		  	DispError((char *)&s_sth,e_mesg) ;
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			seq_over(GLACCT);
			roll_back(e_mesg);
		  	return(ERROR);
		}
		if(retval == EFL || gl_acct.gl_fund != time_rec.tm_fund ||
		   gl_acct.gl_cc != time_rec.tm_cost ||
		   strcmp(gl_acct.gl_type,"S")!=0 ||
		   strcmp(gl_acct.gl_class,time_rec.tm_class)!=0 ||
		   strcmp(gl_acct.gl_earn,time_rec.tm_earn)!=0){
			sprintf(e_mesg,"G/L Account Not Setup For Fund: %d, CC: %d, Type: S, Class: %s, Earn Code: %s", time_rec.tm_fund, 
			  time_rec.tm_cost,time_rec.tm_class,
			  time_rec.tm_earn);
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
			continue;
		}
		seq_over(GLACCT);
		jr_ent.jr_fund = gl_acct.gl_fund;
		retval = GetJr(gl_acct.gl_fund);
		if(retval < 0){
		  	return(ERROR);
		}
		jr_ent.jr_fund = gl_acct.gl_fund;
		jr_ent.jr_date = pp_earn.pe_date;
		strcpy(jr_ent.jr_acct,gl_acct.gl_acct);
		strcpy(jr_ent.jr_emp_numb,emp_rec.em_numb);
		strcpy(jr_ent.jr_type,"E");
		strcpy(jr_ent.jr_code,time_rec.tm_earn);
		strcpy(jr_ent.jr_class,time_rec.tm_class);
		strcpy(jr_ent.jr_pay_sen,"P");

		jr_ent.jr_amount = D_Roundoff(time_rec.tm_tot_amt);

		/*  if no income return	*/
		if(jr_ent.jr_amount != 0) {
			retval = put_jr_ent(&jr_ent,ADD,e_mesg);	
			if(retval < 0) {
			 	DispError((char *)&s_sth,e_mesg);
				retval = PrntRec(e_mesg);
				if(retval < 0)
		  			DispError((char *)&s_sth,e_mesg) ;
				roll_back(e_mesg);
			  	return(ERROR);
			}
			retval = commit(e_mesg);
			if(retval < 0) {
		  		DispError((char *)&s_sth,e_mesg);
				retval = PrntRec(e_mesg);
				if(retval < 0)
	  				DispError((char *)&s_sth,e_mesg) ;
				roll_back(e_mesg);
		  		return(ERROR);
			}
		}

		strcpy(pp_earn.pe_chq_type,"R");
		if(err == UNDEF){
		  	retval = put_pp_earn(&pp_earn,ADD,e_mesg);	
		}
		else{
		  	retval = put_pp_earn(&pp_earn,UPDATE,e_mesg);	
		}
		if(retval < 0) {
		 	DispError((char *)&s_sth,e_mesg);
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			return(ERROR);
		}
		retval = commit(e_mesg);
		if(retval < 0) {
		  	DispError((char *)&s_sth,e_mesg);
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
		  	return(ERROR);
		}
	}
	seq_over(TIME);
	close(TIME);
	
	return(NOERROR);
}
/*-----------------------------------------------------------------------*/
Calc_Adv()
{
	int	i, j, retval, err;
	int	gl_true;

	strcpy(man_chq.mc_emp_numb,s_sth.s_emp1);
	man_chq.mc_date = 0;
	man_chq.mc_chq_numb = 0;

	flg_reset(MAN_CHQ);

 	for( ; ; ) {
	
		retval = get_n_man_chq(&man_chq,BROWSE,0,FORWARD,e_mesg);
		if(retval == EFL)
			break ;
		if(retval < 0){
			DispError((char *)&s_sth,e_mesg) ;
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			seq_over(MAN_CHQ);
			return(ERROR);
		}
	
	  	if(strcmp(man_chq.mc_emp_numb,s_sth.s_emp2) > 0) 
			break;

		if(man_chq.mc_date != s_sth.s_paydate &&
		   s_sth.s_paydate != man_chq.mc_chq_numb)  
			continue;

		strcpy(emp_rec.em_numb,man_chq.mc_emp_numb);

		retval = get_employee(&emp_rec,BROWSE,0,e_mesg);
		if(retval != NOERROR){
	  		DispError((char *)&s_sth,e_mesg) ;
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			if(retval == UNDEF)	continue;
	  		return(ERROR);
	  	}
	  	if(emp_rec.em_term_dt!=0)
			continue;

	  	if(strcmp(emp_rec.em_status,"ACT")!=0){
			sprintf(e_mesg,"Employee Status: %s",emp_rec.em_status);
			retval = PrntRec(e_mesg);
			if(retval < 0)
				DispError((char *)&s_sth,e_mesg);
			continue;
	  	}

	 	if((strcmp(emp_rec.em_barg,s_sth.s_barg1) < 0) ||
	   	  (strcmp(emp_rec.em_barg,s_sth.s_barg2) > 0))
			continue;

	  	if((strcmp(emp_rec.em_pos,s_sth.s_pos1) < 0) ||
	   	  (strcmp(emp_rec.em_pos,s_sth.s_pos2) > 0))
	  		continue ;

		sprintf(e_mesg,"Employee #: %s", emp_rec.em_numb);
		fomen(e_mesg);
		fflush(stdout) ;

		/*******************			*****************/
		/*  Calculating Gross Earnings for the Employee		*/
	
		gl_acct.gl_fund = man_chq.mc_fund;
		gl_acct.gl_cc = emp_rec.em_cc;

		strcpy(gl_acct.gl_type, "S");
		strcpy(gl_acct.gl_class, emp_rec.em_class);
		strcpy(gl_acct.gl_earn, man_chq.mc_ded_code);
		gl_acct.gl_acct[0] = '\0';
		flg_reset(GLACCT);

		retval = get_n_glacct(&gl_acct,BROWSE,0,FORWARD,e_mesg);
		if(retval < 0 && retval != EFL){
		  	DispError((char *)&s_sth,e_mesg) ;
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			seq_over(GLACCT);
			roll_back(e_mesg);
		  	return(ERROR);
		}
		if(retval == EFL || gl_acct.gl_fund != man_chq.mc_fund ||
		   gl_acct.gl_cc != emp_rec.em_cc ||
		   strcmp(gl_acct.gl_type,"S")!=0 ||
		   strcmp(gl_acct.gl_class,emp_rec.em_class)!=0 ||
		   strcmp(gl_acct.gl_earn,man_chq.mc_ded_code)!=0){
			sprintf(e_mesg,"G/L Account Not Setup For Fund: %d, CC: %d, Type: S, Class: %s, Earn Code: %s", man_chq.mc_fund, 
			  emp_rec.em_cc,emp_rec.em_class,
			  man_chq.mc_ded_code);
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
			continue;
		}
		seq_over(GLACCT);
		jr_ent.jr_fund = gl_acct.gl_fund;
		retval = GetJr(gl_acct.gl_fund);
		if(retval < 0){
		  	return(ERROR);
		}
		jr_ent.jr_fund = gl_acct.gl_fund;
		jr_ent.jr_date = pp_earn.pe_date;
		strcpy(jr_ent.jr_acct,man_chq.mc_acct);
		strcpy(jr_ent.jr_emp_numb,emp_rec.em_numb);
		strcpy(jr_ent.jr_type,"M");
		strcpy(jr_ent.jr_code,man_chq.mc_ded_code);
		strcpy(jr_ent.jr_class,emp_rec.em_class);
		strcpy(jr_ent.jr_pay_sen,"P");

		if(s_sth.s_paydate == man_chq.mc_date) {
			jr_ent.jr_amount = D_Roundoff(man_chq.mc_amount);
		}
		else{
			jr_ent.jr_amount = D_Roundoff(man_chq.mc_amount);
			jr_ent.jr_amount *= -1;
		}

		/*  if no income return	*/
		if(jr_ent.jr_amount != 0) {
			retval = put_jr_ent(&jr_ent,ADD,e_mesg);	
			if(retval < 0) {
			 	DispError((char *)&s_sth,e_mesg);
				retval = PrntRec(e_mesg);
				if(retval < 0)
		  			DispError((char *)&s_sth,e_mesg) ;
				roll_back(e_mesg);
			  	return(ERROR);
			}
			retval = commit(e_mesg);
			if(retval < 0) {
		  		DispError((char *)&s_sth,e_mesg);
				retval = PrntRec(e_mesg);
				if(retval < 0)
	  				DispError((char *)&s_sth,e_mesg) ;
				roll_back(e_mesg);
		  		return(ERROR);
			}
		}

		retval = commit(e_mesg);
		if(retval < 0) {
		  	DispError((char *)&s_sth,e_mesg);
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
		  	return(ERROR);
		}
	}
	seq_over(MAN_CHQ);
	close(MAN_CHQ);
	
	return(NOERROR);
}
/*-----------------------------------------------------------------------*/
/*  Calculating Benefits for the Employee		*/
static	
Calc_Resp()
{
	double	amount, tot_amount, tot_income, reg_inc, temp_total;
	char	accno[19];
	short	last_jr, last_fund;
	long	last_date, temp_mod, modula;
	int	i, j, retval, err, no_weeks, add_cent;

	strcpy(emp_extra.ee_numb,emp_rec.em_numb);
	emp_extra.ee_class[0] = '\0'; 
	flg_reset(EMP_EXTRA);

	for(;;){
		retval = get_n_emp_extra(&emp_extra,BROWSE,0,FORWARD,e_mesg);
		if(retval < 0){
			if(retval == EFL) break;
		  	DispError((char *)&s_sth,e_mesg) ;
			retval = PrntRec(e_mesg);
			if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
		    	seq_over(EMP_EXTRA);
		  	return(ERROR);
		}

		if(strcmp(emp_extra.ee_numb,emp_rec.em_numb) != 0)
			break;

		strcpy(class.c_code,emp_extra.ee_class);
		class.c_date = s_sth.s_rundate;
		flg_reset(CLASSIFICATION);

		retval = get_n_class(&class,BROWSE,0,BACKWARD,e_mesg);
		if(retval < 0 && retval != EFL){
	  	  	DispError((char *)&s_sth,e_mesg) ;
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
		  	seq_over(CLASSIFICATION);
	  	  	return(ERROR);
		}
		if(strcmp(class.c_code,emp_extra.ee_class) != 0 ||
		   retval == EFL){
			sprintf(e_mesg,"Class Code Does Not Exist: %s",
			        emp_extra.ee_class);
	  	  	DispError((char *)&s_sth,e_mesg) ;
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			continue;
		}
		seq_over(CLASSIFICATION);

		strcpy(pp_earn.pe_numb, emp_rec.em_numb);
		pp_earn.pe_pp = s_sth.s_payper1;
		pp_earn.pe_date = s_sth.s_paydate;

		err = get_pp_earn(&pp_earn,UPDATE,0,e_mesg);
		if(err < 0 && err != UNDEF){
		  	DispError((char *)&s_sth,e_mesg) ;
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
		  	return(ERROR);
		}
		if(err == UNDEF){
			InitPpEarn();
		}
		pp_earn.pe_cc = emp_rec.em_cc;
		tot_income = D_Roundoff(pp_earn.pe_reg_inc1 + pp_earn.pe_vac +
				 pp_earn.pe_reg_inc2 + pp_earn.pe_high_inc);
		amount = D_Roundoff(class.c_yrly_inc / 
				(double)pay_period.pp_numb); 

		if(err == UNDEF){
			pp_earn.pe_reg_inc1 = amount;
			add_cent = 0;
			temp_total = D_Roundoff(amount);
			temp_mod = (temp_total * 100.0) + 0.005;
			modula = (temp_mod % 2);
			if(modula == 1){
				add_cent = 1;
				temp_total -= 0.01;
			}
			temp_total = D_Roundoff(temp_total/(double)no_weeks);
			for(i=0; i<no_weeks; i++){
			  if(add_cent == 1 && i == 0)
			  	pp_earn.pe_week_inc[i] =
					D_Roundoff(temp_total + 0.01);
			  else
			  	pp_earn.pe_week_inc[i] =
					D_Roundoff(temp_total);
			}
		  	retval = put_pp_earn(&pp_earn,ADD,e_mesg);	
		}
		else {
			pp_earn.pe_reg_inc1 += amount;
			add_cent = 0;
			temp_total = D_Roundoff(amount);
			temp_mod = (temp_total * 100.0) + 0.005;
			modula = (temp_mod % 2);
			if(modula == 1){
				add_cent = 1;
				temp_total -= 0.01;
			}
			temp_total = D_Roundoff(temp_total/(double)no_weeks);
			for(i=0; i<no_weeks; i++){
			  if(add_cent == 1 && i == 0)
			  	pp_earn.pe_week_inc[i] +=
					D_Roundoff(temp_total + 0.01);
			  else
			  	pp_earn.pe_week_inc[i] +=
					D_Roundoff(temp_total);
			}
		  	retval = put_pp_earn(&pp_earn,UPDATE,e_mesg);	
		}

		strcpy(jr_ent.jr_emp_numb,emp_rec.em_numb);
		strcpy(jr_ent.jr_type,"E");
		jr_ent.jr_fund = LV_SHORT;
		jr_ent.jr_no = LV_SHORT;
		flg_reset(JR_ENT);

		for( ; ; ){
		  retval = get_n_jr_ent(&jr_ent,BROWSE,2,FORWARD,e_mesg);
		  if(retval < 0){
			if(retval == EFL) break;
		  	DispError((char *)&s_sth,e_mesg) ;
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			seq_over(JR_ENT);
		  	return(ERROR);
		  }
		  if((strcmp(jr_ent.jr_emp_numb,emp_rec.em_numb) != 0) ||
			strcmp(jr_ent.jr_type,"E") != 0 )
			break;
		  
		  last_jr = jr_ent.jr_no;

		  strcpy(accno,jr_ent.jr_acct);
		  tot_amount = jr_ent.jr_amount;
		  retval = GetJr(accno);
		  if(retval < 0) {
		  	return(ERROR);
		  }
	 	  	
		  strcpy(jr_ent.jr_emp_numb,emp_rec.em_numb);
		  strcpy(jr_ent.jr_type,"X");
		  strcpy(jr_ent.jr_code,emp_extra.ee_class);
		  strcpy(jr_ent.jr_class,emp_extra.ee_class);
		  jr_ent.jr_date = s_sth.s_paydate;
		  strcpy(jr_ent.jr_acct,accno);
		strcpy(jr_ent.jr_pay_sen,"P");
  
		  jr_ent.jr_amount = D_Roundoff((amount * tot_amount) /
							 tot_income);

		  retval = put_jr_ent(&jr_ent,ADD,e_mesg);	
		  if(retval < 0) {
		 	DispError((char *)&s_sth,e_mesg);
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
		  	return(ERROR);
		  }
		  retval = commit(e_mesg);
		  if(retval < 0) {
		  	DispError((char *)&s_sth,e_mesg);
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
		  	return(ERROR);
		  }
		  strcpy(jr_ent.jr_emp_numb,emp_rec.em_numb);
		  strcpy(jr_ent.jr_type,"E");
		  jr_ent.jr_no = last_jr++;
		  flg_reset(JR_ENT);
		}
		seq_over(JR_ENT);
	}
	seq_over(EMP_EXTRA);
	close(EMP_EXTRA);

	return(NOERROR);
} 

/*-----------------------------------------------------------------------*/
/*  Calculating Benefits for the Employee		*/
	
Calc_Ben()
{
	int	i, j, retval, err, last_date;
	double	amount, tot_amount,tot_income, tot_ben;
	char	accno[19];
	short	last_jr, last_fund;

	strcpy(pp_earn.pe_numb, emp_rec.em_numb);
	pp_earn.pe_pp = s_sth.s_payper1;
	pp_earn.pe_date = s_sth.s_paydate;

	retval = get_pp_earn(&pp_earn,UPDATE,0,e_mesg);
	if(retval < 0 && retval != UNDEF){
		  DispError((char *)&s_sth,e_mesg) ;
		  retval = PrntRec(e_mesg);
		  if(retval < 0)
	  		DispError((char *)&s_sth,e_mesg) ;
		  roll_back(e_mesg);
		  return(ERROR);
	}
	tot_income = D_Roundoff(pp_earn.pe_reg_inc1 + pp_earn.pe_vac +
				 pp_earn.pe_reg_inc2 + pp_earn.pe_high_inc);

	if(tot_income <= 0 || retval == UNDEF){
		roll_back(e_mesg);
		return(NOERROR);
	}
	tot_ben = 0;
	strcpy(emp_ben.eb_numb,emp_rec.em_numb);
	emp_ben.eb_code[0] = '\0'; 
	emp_ben.eb_pp_code[0] = '\0'; 
	flg_reset(EMP_BEN);

	for( ; ; ){
		retval = get_n_emp_ben(&emp_ben,BROWSE,0,FORWARD,e_mesg);
		if(retval < 0){
			if(retval == EFL) break;
		  	DispError((char *)&s_sth,e_mesg) ;
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			seq_over(EMP_BEN);
		  	return(ERROR);
		}
		if(strcmp(pp_earn.pe_numb, emp_rec.em_numb) != 0)
			break;

		strcpy(benefit.bn_code, emp_ben.eb_code);
		strcpy(benefit.bn_pp_code, emp_ben.eb_pp_code);
		retval = get_benefit(&benefit,BROWSE,0,e_mesg);
		if(retval < 0){
			DispError((char *)&s_sth,e_mesg) ;
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			continue;
		}
		strcpy(pp_ben.pb_numb,emp_ben.eb_numb);
		pp_ben.pb_pp = s_sth.s_payper1;
		pp_ben.pb_date = s_sth.s_paydate;
		strcpy(pp_ben.pb_code,emp_ben.eb_code);
		err = get_pp_ben(&pp_ben,BROWSE,0,e_mesg);
		if(err < 0 && err != UNDEF){
			DispError((char *)&s_sth,e_mesg) ;
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
		  	return(ERROR);
		}
		if(err != UNDEF){
		    if(strcmp(benefit.bn_amt_flag,"F") == 0){
			pp_ben.pb_amount += benefit.bn_amount;
		    }
		    else {
			if(strcmp(benefit.bn_amt_flag,"P") == 0)
			  pp_ben.pb_amount += (tot_income *
							 benefit.bn_amount);
		    }
		}
		else{
		  if(strcmp(benefit.bn_amt_flag,"F") == 0){
			pp_ben.pb_amount = benefit.bn_amount;
		  }
		  else{
			if(strcmp(benefit.bn_amt_flag,"P") == 0)
		    	pp_ben.pb_amount = (tot_income *
						 benefit.bn_amount);
		  }
		}
		tot_ben += pp_ben.pb_amount;
		strcpy(jr_ent.jr_emp_numb,emp_rec.em_numb);
		strcpy(jr_ent.jr_type,"E");
		jr_ent.jr_fund = 0;
		jr_ent.jr_no = 0;
		
		flg_reset(JR_ENT);
		for( ; ; ){
		  retval = get_n_jr_ent(&jr_ent,BROWSE,2,FORWARD,e_mesg);
		  if(retval < 0){
			if(retval == EFL) break;
		  	DispError((char *)&s_sth,e_mesg) ;
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			seq_over(JR_ENT);
		  	return(ERROR);
		  }
		  if((strcmp(jr_ent.jr_emp_numb,emp_rec.em_numb) != 0) ||
			(strcmp(jr_ent.jr_type,"E") != 0))
			break;

		  last_fund = jr_ent.jr_fund;
		  last_jr = jr_ent.jr_date;
		  last_date = jr_ent.jr_date;

		  strcpy(accno,jr_ent.jr_acct);
		  tot_amount = jr_ent.jr_amount;
		  retval = GetJr(jr_ent.jr_fund);
		  if(retval < 0) {
		  	return(ERROR);
		  }

		  strcpy(jr_ent.jr_emp_numb, emp_rec.em_numb);
		  jr_ent.jr_fund = last_fund;
		  strcpy(jr_ent.jr_acct,accno);
		  jr_ent.jr_date = last_date;
		  strcpy(jr_ent.jr_code,pp_ben.pb_code);
		  jr_ent.jr_class[0] = '\0';
		  strcpy(jr_ent.jr_type,"B");
		strcpy(jr_ent.jr_pay_sen,"P");
  
		 jr_ent.jr_amount = D_Roundoff((pp_ben.pb_amount * tot_amount) /
							 tot_income);

		  retval = put_jr_ent(&jr_ent,ADD,e_mesg);	
		  if(retval < 0) {
		 	DispError((char *)&s_sth,e_mesg);
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
		  	return(ERROR);
		  }
	  	  retval = commit(e_mesg);
	  	  if(retval < 0) {
	 		DispError((char *)&s_sth,e_mesg);
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
	  		return(ERROR);
		  }
		  strcpy(jr_ent.jr_emp_numb, emp_rec.em_numb);
		  strcpy(jr_ent.jr_type,"E");
		  jr_ent.jr_no = last_jr ++;
		  flg_reset(JR_ENT);
		}
		seq_over(JR_ENT);
	
		if(err == UNDEF){
		  	retval = put_pp_ben(&pp_ben,ADD,e_mesg);	
		}
		else{
		  	retval = put_pp_ben(&pp_ben,UPDATE,e_mesg);	
		}
		if(retval < 0) {
		 	DispError((char *)&s_sth,e_mesg);
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
		  	return(ERROR);
		}
		retval = commit(e_mesg);
		if(retval < 0) {
		 	DispError((char *)&s_sth,e_mesg);
		  	retval = PrntRec(e_mesg);
		  	if(retval < 0)
	  			DispError((char *)&s_sth,e_mesg) ;
			roll_back(e_mesg);
		  	return(ERROR);
		}
	}
	seq_over(EMP_BEN);
	close_file(EMP_BEN);

	pp_earn.pe_cc = emp_rec.em_cc;
	pp_earn.pe_ben = D_Roundoff(tot_ben);
	retval = put_pp_earn(&pp_earn,UPDATE,e_mesg);	
	if(retval < 0) {
	 	DispError((char *)&s_sth,e_mesg);
		retval = PrntRec(e_mesg);
		if(retval < 0)
  			DispError((char *)&s_sth,e_mesg) ;
		roll_back(e_mesg);
		return(ERROR);
	}
	retval = commit(e_mesg);
	if(retval < 0) {
	  	DispError((char *)&s_sth,e_mesg);
		retval = PrntRec(e_mesg);
		if(retval < 0)
  			DispError((char *)&s_sth,e_mesg) ;
		roll_back(e_mesg);
	  	return(ERROR);
	}
	return(NOERROR);
}
/*-----------------------------------------------------------------------*/
InitPpEarn()
{
	int i;

	pp_earn.pe_cc = 0;			/* Cost Center	*/
	pp_earn.pe_reg_units = 0;		/* Regular units      */
	pp_earn.pe_high_units = 0;		/* High units         */
	pp_earn.pe_reg_inc1 = 0;		/* Reg income		*/
	pp_earn.pe_reg_inc2 = 0;		/* Reg income		*/
	pp_earn.pe_high_inc = 0;		/* High income    */
	pp_earn.pe_ben = 0;			/* Benefits	*/
	pp_earn.pe_def_inc = 0;		/* Deffered income    */
	pp_earn.pe_cpp = 0;			/* CPP contribution */
	pp_earn.pe_cpp_pen = 0;		/* CPP pensionable earnings	*/
	pp_earn.pe_uic = 0;			/* UIC premiums 	*/
	pp_earn.pe_uic_ins = 0;		/* UIC insurable earnings	*/
	pp_earn.pe_num_ins_wk = 0;	/* Number of insurable weeks in */
	pp_earn.pe_reg1 = 0;		/* Registered pen plan contr rate1 */
	pp_earn.pe_reg2 = 0;		/* Registered pen plan contr rate2 */
	pp_earn.pe_reg3 = 0;		/* Registered pen plan contr rate3 */
	pp_earn.pe_tax = 0;			/* Income tax		*/
	pp_earn.pe_net = 0;			/* Net Income 		*/
	pp_earn.pe_vac = 0;			/* Vacation Pay		*/
	pp_earn.pe_chq_no = 0;		/* Cheque No 		*/
	pp_earn.pe_cp_chq_no = 0;		/* Cheque No for rerun	*/
	pp_earn.pe_chq_type[0] = '\0';		/* Type M(anual) or R(egular) */
	pp_earn.pe_accno[0] = '\0';		/* Account Number */
	pp_earn.pe_uic_employer = 0;	/* Amount paid by employee */
	pp_earn.pe_reg_prior = 0;
	pp_earn.pe_reg_opt = 0;
	pp_earn.pe_reg_nonm = 0;
	for(i=0; i<5; i++){
		pp_earn.pe_week_inc[i] = 0.0;
		pp_earn.pe_week_hinc[i] = 0.0;	/*  income		*/
		pp_earn.pe_week_units[i] = 0.0;
		pp_earn.pe_week_hunits[i] = 0.0;	/* High units         */
		pp_earn.pe_week_vac[i] = 0.0;
		pp_earn.pe_wk_def_inc[i] = 0.0;
		pp_earn.pe_week_cpp[i] = 0.0;
		pp_earn.pe_wk_cpp_pen[i] = 0.0;
		pp_earn.pe_week_uic[i] = 0.0;
		pp_earn.pe_week_reg1[i] = 0.0;
		pp_earn.pe_week_reg2[i] = 0.0;
		pp_earn.pe_week_reg3[i] = 0.0;
		pp_earn.pe_wk_reg_pr[i] = 0.0;
		pp_earn.pe_wk_reg_opt[i] = 0.0;
		pp_earn.pe_wk_reg_nonm[i] = 0.0;
		pp_earn.pe_week_tax[i] = 0.0;
		pp_earn.pe_week_net[i] = 0.0;
	}
	
	return(NOERROR);

}
/*-----------------------------------------------------------------------*/
GetJr(fund)
short	fund;
{
	int	retval;

	jr_ent.jr_no = HV_SHORT;
	flg_reset(JR_ENT);

	retval = get_n_jr_ent(&jr_ent,UPDATE,0,BACKWARD,e_mesg);
	if(retval < 0 && retval != EFL){
	  	DispError((char *)&s_sth,e_mesg) ;
		retval = PrntRec(e_mesg);
		if(retval < 0)
	  		DispError((char *)&s_sth,e_mesg) ;
		seq_over(JR_ENT);
		roll_back(e_mesg);
	  	return(ERROR);
	}
	if(retval == EFL || jr_ent.jr_no < 1 || jr_ent.jr_fund != fund){
	  jr_ent.jr_fund = fund;
	  jr_ent.jr_no = 1;
	}
	else 
	  jr_ent.jr_no ++;

	return(NOERROR);
}
/*-----------------------------------------------------------------*/
static
InitPrinter1()

{
	char	resp[2] ;
	char	discfile[15] ;

	/* Always to Printer */
	STRCPY(resp,"P");
	discfile[0]= '\0';
	PG_SIZE = 60;

	if( opn_prnt( resp, discfile, 1, e_mesg, 1 /* spool */)<0 ){
		return(REPORT_ERR);
	}
	pgcnt = 0;		/* Page count is zero */
	LNSZ = 132;		/* line size in no. of chars */
	linecnt = PG_SIZE;	/* Page size in no. of lines */

	return(NOERROR) ;
}
/******************************************************************************
Prints the headings
******************************************************************************/
static
PrntHdg()	/* Print heading  */
{
	long	sysdt ;
	int	offset;

	if( pgcnt && term < 99)   /* new page and display */
		if(next_page()<0) return(EXIT);	
		
	if( pgcnt || term < 99) { /* if not the first page or display */
		if( rite_top()<0 ) return( -1 );	/* form_feed */
	}
	else
		linecnt = 0;
	pgcnt++; 			/* increment page no */

	mkln( 1, PROG_NAME, 10 );
#ifdef ENGLISH
	mkln( 103, "Date:", 5 );
#else
	mkln( 103, "Date:", 5 );
#endif
	sysdt = get_date() ;
	tedit( (char *)&sysdt,"____/__/__",line+cur_pos, R_LONG ); 
	cur_pos += 10;

#ifdef ENGLISH
	mkln( 122, "PAGE:", 5 );
#else
	mkln( 122, "PAGE:", 5 );
#endif
	tedit( (char *)&pgcnt,"__0_",  line+cur_pos, R_SHORT ); 
	cur_pos += 4;
	if(prnt_line() < 0 )	return(REPORT_ERR);
 
	offset = ( LNSZ-strlen(pa_rec.pa_co_name) )/2;
	mkln( offset, pa_rec.pa_co_name, strlen(pa_rec.pa_co_name) );
	if( prnt_line()<0 )	return(REPORT_ERR);

#ifdef ENGLISH
	mkln((LNSZ-29)/2,"PAYROLL SELECTION AUDIT TRAIL", 29 );
#else
	mkln((LNSZ-26)/2,"TRANSLATE        ", 26 );
#endif
	if(prnt_line() < 0 )	return(REPORT_ERR);
	if(prnt_line() < 0 )	return(REPORT_ERR);

	mkln(3,"EMPLOYEE",8);
	mkln(14,"EMPLOYEE NAME",13);
	mkln(54,"COMMENT",7);

	if(prnt_line() < 0 )	return(REPORT_ERR);
	if(prnt_line() < 0 )	return(REPORT_ERR);

	return(NOERROR);
}
/****************************************************************************/
static
PrntRec(err_mesg)
char	*err_mesg;
{
	char	txt_line[132];
	int	retval;

	mkln(1,emp_rec.em_numb,12);
	sprintf(txt_line,"%s, %s",
		emp_rec.em_last_name,
		emp_rec.em_first_name);
	mkln(15,txt_line,22);
	mkln(40,err_mesg,90);
	if(prnt_line() < 0 )	return(REPORT_ERR);
	mkln(40,err_mesg+91,90);
	if(prnt_line() < 0 )	return(REPORT_ERR);
	if(prnt_line() < 0 )	return(REPORT_ERR);
			
	else if(linecnt > PG_SIZE) {
		if((retval=PrntHdg()) == EXIT)	
			return(retval);
	}

	return(NOERROR);
}
/******************   END OF PROGRAM *******************************/
