/*-----------------------------------------------------------------------
Source Name: time.c
System     : Personnel/Payroll System.
Created  On: August 11, 1992.
Created  By: Eugene Roy

DESCRIPTION:
	Program To input the Time.

MODIFICATIONS:        

Programmer     YY/MM/DD       Description of modification
------------------------------------------------------------------------*/
#define	MAIN		/* Main program. This is to declare Switches */
#define MAINFL		TIME			/* main file used */

#define	SYSTEM		"TIME"			/* Sub System Name */
#define	MOD_DATE	"11-AUG-92"		/* Progran Last Modified */

#include <stdio.h>
#include <cfomstrc.h>
#include <bfs_defs.h>
#include <bfs_com.h>
#include <bfs_pp.h>

/* User Interface define constants */
#ifdef ENGLISH
#define ADDREC		'A'
#define CHANGE		'C'
#define DELETE		'D'
#define INQUIRE		'I'
#define EXITOPT		'E'
#define	NEXT		'N'
#define	PREV		'P'

#define	YES		'Y'
#define NO		'N'
#define ADDITEMS	'A'
#define VACITEMS	'V'
#define SCREENEDIT	'S'
#define DELITEM		'D'
#define REACTITEM	'R'
#define	CANCEL		'C'

#define ACTIVE		"ACT"
#define INACTIVE	"DEL"
#else
#define ADDREC		'R'
#define CHANGE		'C'
#define DELETE		'E'
#define INQUIRE		'I'
#define EXITOPT		'F'
#define	NEXT		'S'
#define	PREV		'P'

#define	YES		'O'
#define NO		'N'
#define ADDITEMS	'A'
#define VACITEMS	'V'
#define SCREENEDIT	'S'
#define DELITEM		'D'
#define REACTITEM	'R'
#define	CANCEL		'A'

#define ACTIVE		"ACT"
#define INACTIVE	"ELI"
#endif

/* PROFOM Releted declarations */

#define	SCR_NAME	"time"	/* PROFOM screen Name */

#define	PAGESIZE	1		/* No of Items */
/* PROFOM Screen STH file */

/* Field PROFOM numbers */

#define FN_FLD		400	/* Fn: */
#define EMP_FLD		500	/* employee code */

#define KEY_START	500	/* Key Start Field */
#define KEY_END		600	/* Key End Field */

#define CHG_FLD		700

#define	ITEM_ST_FLD	1200	/* Item 1 Start Field */
#define	END_FLD		4800	/* Last Field of the screen */

#define EMP_NAME	900	/* Employee Name */
#define EMP_STATUS	1000	/* Employee Status */
#define PAGE_FLD	1100	/* Page# Field */

#define PAYPER_FLD	1300
#define WEEK_FLD	1400
#define FUND_FLD	1500
#define CLASS_FLD	1600
#define	EARN_FLD	1800
#define	TRANS_FLD	2000
#define	EXP_FLD		2200
#define	CC_FLD		2400
#define ADJ_FLD		2600
#define	UNIT1_FLD	2700
#define	UNIT2_FLD	2800
#define	UNIT3_FLD	2900
#define	UNIT4_FLD	3000
#define	UNIT5_FLD	3100
#define	UNIT6_FLD	3200
#define	UNIT7_FLD	3300
#define	ATT1_FLD	3400
#define	ATT2_FLD	3500
#define	ATT3_FLD	3600
#define	ATT4_FLD	3700
#define	ATT5_FLD	3800
#define	ATT6_FLD	3900
#define	ATT7_FLD	4000
#define	RATE_FLD	4100
#define	TOTAL_FLD	4200
#define	TEACH_FLD	4300
#define	COMMENT_FLD	4500
#define STATUS_FLD	4600	/* Offset of Status in item line */

/* certif.sth - header for C structure generated by PROFOM EDITOR */

typedef	struct	{	/* Start Fld 900, Endfld 5300 and Step 300 */
	
	short	s_no;
	short	s_pp;		/* 1200 NUMERIC 9 */
	short	s_week;		/* 1300 NUMERIC 9 */
	short	s_fund;		/* 1400 NUMERIC 9 */
	char	s_class[7]; 	/* 1600 STRING X(6) */
	char	s_cl_desc[31] ;	/* 3700 STRING X(30) */
	char	s_earn[7]; 	/* 1700 STRING X(6) */
	char	s_ea_desc[31] ;	/* 3700 STRING X(30) */
	char	s_trans[7]; 	/* 1800 STRING X(6) */
	char	s_tr_desc[31] ;	/* 3700 STRING X(30) */
	char	s_exp[7]; 	/* 1900 STRING X(6) */
	char	s_ex_desc[31] ;	/* 3700 STRING X(30) */
	short	s_cc;		/* 3600 NUMERIC 9 */
	char	s_cc_desc[31] ;	/* 3700 STRING X(30) */
	char	s_adj_flag[2]; 	/* 1500 STRING X(1) */
	double	s_units[7];	/* 2000-2600 NUMERIC 99.99 */
	char	s_att[7][4];	/* 2700-3300 NUMERIC 99.99 */
	double	s_rate;		/* 3400 NUMERIC 9,999,999.99 */
	double	s_total;	/* 3500 NUMERIC 9,999,999.99 */
	char	s_teach[13] ;	/* 3800 STRING X(10) */
	char	s_t_desc[31] ;	/* 3900 STRING X(30) */
	char	s_comment[46];
	char	s_status[6]; 	/* 4000 STRING X(3) */
}	S_item ;

typedef struct	{

	char	s_pgname[11];	/* 100 STRING X(10) */
	long	s_rundate;	/* 300 DATE YYYYFMMFDD */
	char	s_fn[2];	/* 400 STRING X */
	char	s_emp[13];	/* 500 STRING X(12) */
	long	s_pay_date;	/* 600 DATE YYYYFMMFDD */
	short	s_field;	/* 600 NUMERIC 99 */
	char	s_emp_name[36];	/* 900 STRING X(30) */
	char	s_stat[4];	/* 1000 STRING X */
	short	s_page;		/* 1100 NUMERIC 99 */

	S_item	s_items[PAGESIZE] ;	/* Start Fld 1000, End Fld 6900  */

	char	s_mesg[78];	/* 7000 STRING X(77) */
	char	s_resp[2];	/* 7100 STRING X */
} s_struct;

static	s_struct  s_sth,image;	/* PROFOM Screen Structure */
static	struct  stat_rec  sr;		/* PROFOM status rec */

static	char 	e_mesg[180];  		/* dbh will return err msg in this */

double	D_Roundoff();

int	Validation() ;
int	WindowHelp() ;
double	D_Roundoff() ;

int	Argc;
char	**Argv;

typedef struct Page {
	S_item	Items[PAGESIZE] ;	/* Items Information */
	struct	Page	*PrevPage ;	/* ptr to previous page */
	struct	Page	*NextPage ;	/* ptr to next page */
	char	I_Status[PAGESIZE][2];	/* item status ie A(DD) C(hange) */
	short	NoItems;		/* number of Items on the page */
	short	Pageno;			/* Page number */
}	Page;

static	Page	*FirstPage,		/* Address of First Page */
		*CurPage,		/* Address of Current Page */
		*CurLast,		/* Address of Curr. record last page */
		*LastPage;		/* Address of Last Page of Memory
					   Allocated */

static	Time	time_rec, pre_time_rec;		/* Time Entry record */
static	Emp	emp_rec;			/* Employee record */
static	Sen_par	sen_par;
static	Emp_sched1	emp_sched1;
static	Pay_param pay_param;
static	Pay_per	pay_period;
static	Pay_per_it	pay_per_it;
static	Ctl_rec	control;
static	Position position;
static	Class	class;
static	Earn	earnings;
static	Trans	trans;
static	Trans_item	trans_item;
static	Exp	expense;
static	Exp_item	exp_item;
static	Att	att;
static	Sch_rec	school;
static	Cert	cert;
static	Barg_unit	barg_unit;
static	Emp_at_his	att_his;

double	sick_bal,sick_bank,vac_bal;
short	d_month[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

void	free() ;
char	*malloc() ;
int 	first_time =0;
int	vac_pay	= 0;
int	updt_mode = 0;
/*------------------------------------------------------------------------*/
main(argc,argv)
int argc;
char *argv[];
{
	int 	retval;

	/* These two are passed to execute() when it is called */
	Argc = argc;
	Argv = argv;

	retval = Initialize(argc,argv);	/* Initialization routine */

	if (retval == NOERROR) retval = Process();

	CloseRtn();			/* return to menu */
	if (retval < NOERROR) exit(-1);
	exit(0);
}

/*-------------------------------------------------------------------*/
/* Initialize PROFOM */

Initialize(argc, argv)
int	argc ;
char	*argv[] ;
{
	int	err ;

	/*
	*	Initialize DBH Environment
	*/
	strncpy(SYS_NAME,SYSTEM,50);	/* Sub system name */
	strncpy(CHNG_DATE,MOD_DATE,10);	/* Modification Date */

	proc_switch(argc, argv, MAINFL) ; 	/* Process Switches */

	/*
	*	Initialize PROFOM & Screen
	*/
	strcpy(sr.termnm,terminal);	/* Copy Terminal Name */
	fomin(&sr);
	ret(err_chk(&sr)) ;		/* Check for PROFOM Error */
	fomcf(1,1);			/* Enable Snap screen option */

	err = InitScreen() ;		/* Initialize Screen */
	if(NOERROR != err) return(err) ;

	FirstPage = '\0';
	LastPage = '\0';

	return(NOERROR) ;
}	/* Initialize() */

/*--------------------------------------------------------------------------*/
/* Close nessary files and environment before exiting program               */

CloseRtn() 
{
	/* Free the linked list for the end */
	for( ;LastPage != FirstPage ; ) {
		LastPage = LastPage->PrevPage;
		free((char *)LastPage->NextPage);
		LastPage->NextPage = '\0';
	}
	if(FirstPage != '\0') {
		free((char *)FirstPage);
	}

	FirstPage = LastPage = '\0';

	/* Set terminal back to normal mode from PROFOM */
	fomcs();
	fomrt();

	close_dbh();	/* Close files */

	return(NOERROR);
}	/* CloseRtn() */
/*----------------------------------------------------------------*/
/* Initialize screen before going to process options */

InitScreen()
{
	int	err ;

	/* move screen name to Profom status structure */
	strcpy(sr.scrnam,NFM_PATH);
	strcat(sr.scrnam,SCR_NAME) ;

	strcpy(s_sth.s_pgname,PROG_NAME);

	s_sth.s_rundate = get_date();	/* get Today's Date in YYYYMMDD format*/
	s_sth.s_field = HV_SHORT ;

	s_sth.s_emp[0] = HV_CHAR ;
	s_sth.s_pay_date = HV_LONG ;

	s_sth.s_mesg[0] = HV_CHAR ;
	s_sth.s_resp[0] = HV_CHAR ;

	/* Move High Values to data fields and Display the screen */
	err = ClearScreen() ;
	if(NOERROR != err) return(err) ;

	return(NOERROR) ;
}	/* InitScreen() */
/*-------------------------------------------------------------------*/
/* Get Option from user and call corresponding function */

Process()
{
	int err;
	err = get_pay_param(&pay_param,BROWSE,1,e_mesg);
	if(err < 0) {
  		DispError((char *)&s_sth,e_mesg);
		return(err);
	}

	for( ; ; ){
		FirstPage = '\0';	
		CurPage = '\0';
		CurLast = '\0';
		LastPage = '\0';

		/* Get the Fn: option from the user */
		err = ReadFunction();
		if(err < 0) return(err);

		err = ProcFunction() ;	/* Process Function */

		if(err == 1) continue;
		if(QUIT == err)		return(NOERROR) ;    /* Exit */
		if(NOACCESS == err)	fomen(e_mesg);	     /* security */
		if(PROFOM_ERR == err)	return(PROFOM_ERR);  /* PROFOM ERROR */
		if(DBH_ERR == err) {
			DispError((char *)&s_sth,e_mesg);
#ifdef ENGLISH
			sprintf(e_mesg,"%s %d Dberror: %d Errno: %d",
				"System Error... Iserror:",
				iserror, dberror, errno);
#else
			sprintf(e_mesg,"%s %d Dberror: %d Errno: %d",
				"Erreur du systeme... Iserror:",
				iserror, dberror, errno);
#endif
			DispError((char *)&s_sth,e_mesg);
			return(DBH_ERR); /* DBH ERROR */
		}
		FreeList();
	}      /*   end of the for( ; ; )       */
}	/* Process() */
/*----------------------------------------------------------------*/
/* Display the Function (Fn:) options and get the option from the user */

ReadFunction()
{
	/* Display Fn: options */
#ifdef ENGLISH
	fomer("A(dd), C(hange), D(elete), I(nquire), N(ext), P(rev), E(xit)");
#else
	fomer("R(ajouter), C(hanger), I(nterroger), S(uivant), P(recedent), F(in)");
#endif
	/* Read Fn: field to get the option */
	sr.nextfld = FN_FLD ;
	fomrf( (char *)&s_sth );
	ret(err_chk(&sr));	/* Check for PROFOM error */

	return(NOERROR) ;
}	/* ReadFunction() */
/*----------------------------------------------------------------*/
/* Process the user selected Fn: option */

ProcFunction()
{
	int retval;

	switch (s_sth.s_fn[0]) {
	case ADDREC  :			/* ADD */
		CHKACC(retval,ADD,e_mesg);
		retval= Add();
		if(retval < 0) return(retval);
		break;

	case CHANGE  :			/* CHANGE */
		CHKACC(retval,UPDATE,e_mesg);
		retval= Change();
		if(retval < 0) return(retval);
		break;

	case DELETE  :			/* CHANGE */
		CHKACC(retval,UPDATE,e_mesg);
		retval= Delete();
		if(retval < 0) return(retval);
		break;

	case INQUIRE  :			/* Inquire */
		CHKACC(retval,BROWSE,e_mesg);
		retval= Inquire();
		if(retval < 0) return(retval);
		break;

	case NEXT  :			/* Next */
		CHKACC(retval,BROWSE,e_mesg);
		retval= Next(FORWARD);
		if(retval < 0) return(retval);
		break;

	case PREV  :			/* Previous */
		CHKACC(retval,BROWSE,e_mesg);
		retval= Next(BACKWARD);
		if(retval < 0) return(retval);
		break;

	case EXITOPT  :			/* Exit */
		return( QUIT ) ;
	}  /*   end of the switch statement */

	return(NOERROR);
}	/* ProcFunction() */
/*----------------------------------------------------------------------*/
/* Adding.  Get the unique Key, accept details and update the files */
Add()
{
	int	err ;

	FirstPage = NULL;
	LastPage = NULL;
	CurLast = NULL;

	err = ClearScreen();
	if(err < 0) return(err) ;

	err = ReadKey();
	if(err != NOERROR) return(err) ;

	strcpy(time_rec.tm_numb,s_sth.s_emp);
	time_rec.tm_date = s_sth.s_pay_date;
	time_rec.tm_no = 0;
	flg_reset(TIME);

	err = get_n_ptime(&time_rec,BROWSE,0,FORWARD,e_mesg);

	if(err != ERROR) {
		if(err != EFL) {
			if((strcmp(time_rec.tm_numb,s_sth.s_emp)==0) &&
		   		(time_rec.tm_date == s_sth.s_pay_date )) {
				fomen("Time for Employee Already Exists");
				get();
				err = ClearScreen();
				return(NOERROR);
			}
		}
	}

	err = ClearScreen();
	if(err < 0) return(err) ;
	
	strcpy(e_mesg,emp_rec.em_last_name);
	strcat(e_mesg,", ");
	strcat(e_mesg,emp_rec.em_first_name);
	strncpy(s_sth.s_emp_name,e_mesg,28);
	strcpy(s_sth.s_stat,emp_rec.em_status);
	if ( WriteFields((char *)&s_sth,EMP_NAME, EMP_STATUS) < 0 ) 
		return(-1);
	/* Get area records i.e. Build list */
	err = BuildEmp();
	if(err < 0 && err != EFL) {
		return(err);
	}
	if(err == 1) return(1);

	err = ShowItems(CurPage);
	if(err < 0) {
		return(err);
	}

	err = GetDetails();
	if(PROFOM_ERR == err || DBH_ERR == err) return(err) ;
	if(err < 0 || CANCEL == err) {
		roll_back(e_mesg) ;	
		return(ClearScreen()); 
	}

	return(NOERROR);
}	/* Add() */
/*----------------------------------------------------------------------*/
/* Get record to change, make changes and rewrite changes to file.	*/

Change()
{
	int	err ;

	err = SelectRecord() ;
	if(NOERROR != err) return(err);

	for( ; ; ) {
		err = ConfirmItems() ;
		if(err != YES) {
			roll_back(e_mesg);
			break;
		}

		err = ProcItemUpdates(UPDATE) ;
		if(err==NOERROR) break;
		if(err==LOCKED) {
			roll_back(e_mesg) ;
			continue;
		}
		if (err < 0) {
			roll_back(e_mesg);
			return(err) ;
		}
	}

	return(NOERROR) ;
}	/* Change() */
/*-----------------------------------------------------------------------*/
/* Delete. Employee's time entry Records.  */
/*-----------------------------------------------------------------------*/

Delete()
{
	int	err ;

	err = SelectRecord() ;
	if(NOERROR != err) return(err) ;
	
	for( ; ; ) {
		err = ConfirmItems() ;
		if(err != YES) {
			roll_back(e_mesg);
			break;
		}

		err = ProcItemUpdates(P_DEL) ;
		if(err==NOERROR) break;
		if(err==LOCKED) {
			roll_back(e_mesg) ;
			continue;
		}
		if (err < 0) {
			roll_back(e_mesg);
			return(err) ;
		}
	}

	return(NOERROR) ;
}	/* Delete() */
/*-----------------------------------------------------------------------*/
/* Show Employee time entry based on users input */

Inquire()
{
	int	err ;

	err = SelectRecord() ;
	if(NOERROR != err) return(err) ;

	err = ConfirmItems() ;
	
	return(NOERROR) ;
}	/* Inquire() */
/*----------------------------------------------------------*/
/* Show the next or previous Employees time entry           */

Next(direction)
int	direction ;
{
	int err;

	strcpy(time_rec.tm_numb,s_sth.s_emp);
	time_rec.tm_date = s_sth.s_pay_date;
	time_rec.tm_no = 0;
	if(flg_start(TIME) != direction) {
		if (direction == FORWARD) 
			time_rec.tm_date += 1;
		else
			time_rec.tm_date -= 1;
		flg_reset(TIME);
	}

	err = get_n_ptime(&time_rec,BROWSE,0,direction,e_mesg);
	if(err < 0 && err != EFL) {
		DispError((char *)&s_sth,e_mesg);
		return(err);
	}

	if(err == EFL) {
		fomer("No More Records...");
		get();
		err = NOERROR;	
	}
	else {
		strcpy(s_sth.s_emp,time_rec.tm_numb);
		s_sth.s_pay_date = time_rec.tm_date;
		ret(WriteFields((char *)&s_sth,KEY_START,KEY_END));

		Right_Justify_Numeric(time_rec.tm_numb,
				sizeof(time_rec.tm_numb)-1);
		strcpy(emp_rec.em_numb, time_rec.tm_numb);
		err = get_employee(&emp_rec,BROWSE,0,e_mesg);
		if(err < 0) {
			if(err == EFL)
				strcpy(s_sth.s_emp_name,"Not Setup in File "); 
			else {	
				DispError((char *)&s_sth,e_mesg);
				return(err);
			}
		}
		else {
			strcpy(e_mesg,emp_rec.em_last_name);
			strcat(e_mesg,", ");
			strcat(e_mesg,emp_rec.em_first_name);
			strncpy(s_sth.s_emp_name,e_mesg,28);
			strcpy(s_sth.s_stat,emp_rec.em_status); 
		}
		if ( WriteFields((char *)&s_sth,EMP_NAME, EMP_STATUS) < 0 ) 
			return(-1);

		/* Get time records i.e. Build list */
		err = BuildList();
		if(err < 0 && err != EFL) {
			return(err);
		}
	
		err = ShowItems(CurPage);
		if(err < 0) {
			return(err);
		}
	}

	return( err ) ;
}	/* Next() */
/*----------------------------------------------------------------------*/
/* Read employee number and pay date to read file 			*/

ReadKey()
{
	int	i;
	char	emp_code[13];
	long	pay_date;
	
	/* In Add mode turn off dup control for key fields.
	   Other modes reverse it */
	if(s_sth.s_fn[0] == ADDREC){	/* ADD */
		SetDupBuffers(KEY_START,KEY_START,0); /* Off Dup Control */
		SetDupBuffers(KEY_END,KEY_END,1); /* Off Dup Control */
	}
	else {
		SetDupBuffers(KEY_START,KEY_END,1);
	}

#ifdef ENGLISH
	strcpy(s_sth.s_mesg,"Press ESC-F to Go Back to Fn:");
#else
	strcpy(s_sth.s_mesg,"Appuyer sur ESC-F pour retourner a Fn:");
#endif
	DispMesgFld((char *)&s_sth);

	strcpy(emp_code,s_sth.s_emp);
	pay_date = s_sth.s_pay_date;
	s_sth.s_emp[0] = LV_CHAR;
	s_sth.s_pay_date = LV_LONG;

	i = ReadFields((char *)&s_sth,KEY_START, KEY_END,
		Validation, WindowHelp,1) ;
	if(PROFOM_ERR == i || DBH_ERR == i) return(i) ;
	if(RET_USER_ESC == i){
		strcpy(s_sth.s_emp, emp_code);
		s_sth.s_pay_date = pay_date;
		ret( WriteFields((char *)&s_sth,KEY_START, KEY_END) ) ;

		s_sth.s_mesg[0] = HV_CHAR;
		DispMesgFld((char *)&s_sth);

		return(RET_USER_ESC) ;
	}

	return(NOERROR);
}	/*  ReadKey() */
/*------------------------------------------------------------*/
/* Read the Area Details from the User */

GetDetails()
{
	int	retval ;

	first_time = 0;
	retval = AddItems();
	if(NOERROR != retval) return(retval) ;

	for( ; ; ) {
		retval = ConfirmItems() ;
		if(retval != YES) break;

		retval = ProcItemUpdates(ADD) ;
		if(retval < 0) {
			if(retval == LOCKED) continue;
			break;
		}
		break;
	}
	if(retval < 0) return(retval);
	return(NOERROR) ;
}	/* GetDetails() */
/*------------------------------------------------------------*/
/* Read Item Details from the User */

AddItems()
{
	int	retval;
	int	j;
	double	temp_calc, total_units;
	int	i, err ;

	/* If the last node of po is Partial filled then Show Page */
	if(CurLast != '\0' && CurLast->NoItems < PAGESIZE ) {
		ret( ShowItems(CurLast) ) ;
		i = CurLast->NoItems ;
		CurPage = CurLast ;
	}
	else {
		/* Calculate the page# */
		if(CurLast != '\0') {
			i = PAGESIZE ;
			CurPage = CurLast ;
		}
		else {
			s_sth.s_page = 1 ;
			ret( WriteFields((char *)&s_sth,PAGE_FLD, PAGE_FLD) ) ;
			i = 0 ;
		}
	}

	SetDupBuffers(ITEM_ST_FLD, END_FLD - 200, 0);

	for( ; ; ) {
		if(PAGESIZE == i) {	/* Page Full */

			/* Move High Values to All items except first */
			for(i-- ; i > 0 ; i--)
				InitItem(i,HV_CHAR,HV_SHORT,HV_DOUBLE) ;

			/* Calculate the page# */
			s_sth.s_page = CurLast->Pageno + 1 ;

			ret( WriteFields((char *)&s_sth,PAGE_FLD, 
				(END_FLD - 200)) ) ;

			i = 0 ;
		}

		err = ReadItem(i,ADD,0) ;	/* Read Each Item Line */
		if(PROFOM_ERR == err || DBH_ERR == err) return(err) ;
		if(NOERROR != err) break ;	/* ESC-F */

/*		if(strcmp(pay_param.pr_prov,"NB") == 0) {
    	  	if(((strcmp(position.p_type, "CA") == 0) ||
       	     	      (strcmp(position.p_type, "SU") == 0)) ||
		      (position.p_ctr_lgth == 10)){

		     strcpy(earnings.ea_code,s_sth.s_items[i].s_earn);
		     earnings.ea_date = s_sth.s_rundate;
		     flg_reset(EARN);

		     retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
		     if((retval < 0 ||
			strcmp(earnings.ea_code,
				s_sth.s_items[i].s_earn) != 0)){
			fomer("Earnings Code Does Not Exist");
		    	return(ERROR);
		     }
		     if(earnings.ea_vac[0] == 'Y'){
	
		       retval = ConfirmVac();
		       if(retval == YES){

			if(PAGESIZE == i) i = 0;
			if(0 == i){*/	/* First Item in the Page *//*
			  if((retval = MakeFreshPage()) < 0) return(retval) ;
			}
		
			scpy((char*)&(CurPage->Items[i]),
			    (char*)&(s_sth.s_items[i]), sizeof(S_item)); 

			CurPage->I_Status[i][0] = ADDITEMS;

			i++ ;

			CurPage->NoItems = i;

			if(PAGESIZE == i) {*/	/* Page Full *//*

			 */ /* Move High Values to All items except first *//*
			  for(i-- ; i > 0 ; i--)
				InitItem(i,HV_CHAR,HV_SHORT,HV_DOUBLE) ;

			*/  /* Calculate the page# *//*
			  s_sth.s_page = CurLast->Pageno + 1 ;

			  ret( WriteFields((char *)&s_sth,PAGE_FLD, 
				(END_FLD - 200)) ) ;

			  i = 0 ;
			}

		        err = ReadItem(i,ADD,1);
			if(PROFOM_ERR == err || DBH_ERR == err) return(err) ;
			if(NOERROR != err) break ;*/	/* ESC-F *//*
		       }
		     }
		}
		}*/

		if(PAGESIZE == i) i = 0;
		if(0 == i)	/* First Item in the Page */
		if((retval = MakeFreshPage()) < 0) return(retval) ;

		/* Copy the Item to List */
		scpy((char*)&(CurPage->Items[i]),
			(char*)&(s_sth.s_items[i]),sizeof(S_item)) ; 

		CurPage->I_Status[i][0] = ADDITEMS;

		i++ ;

		CurPage->NoItems = i;
	}
	if((err=ShowItems(CurPage))<0) return(err) ;

	return(NOERROR) ;
}	/* AddItems() */
/*------------------------------------------------------------*/
/* Read Item Details from the User */

VacItems()
{
	int	retval;
	int	j;
	double	temp_calc, total_units;
	int	i, err ;

	/* If the last node of po is Partial filled then Show Page */
	if(CurLast != '\0' && CurLast->NoItems < PAGESIZE ) {
		ret( ShowItems(CurLast) ) ;
		i = CurLast->NoItems ;
		CurPage = CurLast ;
	}
	else {
		/* Calculate the page# */
		if(CurLast != '\0') {
			i = PAGESIZE ;
			CurPage = CurLast ;
		}
		else {
			s_sth.s_page = 1 ;
			ret( WriteFields((char *)&s_sth,PAGE_FLD, PAGE_FLD) ) ;
			i = 0 ;
		}
	}

	SetDupBuffers(ITEM_ST_FLD, END_FLD - 200, 0);

	for( ; ; ) {
		if(PAGESIZE == i) {	/* Page Full */

			/* Move High Values to All items except first */
			for(i-- ; i > 0 ; i--)
				InitItem(i,HV_CHAR,HV_SHORT,HV_DOUBLE) ;

			/* Calculate the page# */
			s_sth.s_page = CurLast->Pageno + 1 ;

			ret( WriteFields((char *)&s_sth,PAGE_FLD, 
				(END_FLD - 200)) ) ;

			i = 0 ;
		}

		err = ReadItem(i,ADD,1) ;	/* Read Each Item Line */
		if(PROFOM_ERR == err || DBH_ERR == err) return(err) ;
		if(NOERROR != err) break ;	/* ESC-F */

		if(PAGESIZE == i) i = 0;
		if(0 == i)	/* First Item in the Page */
		if((retval = MakeFreshPage()) < 0) return(retval) ;

		/* Copy the Item to List */
		scpy((char*)&(CurPage->Items[i]),
			(char*)&(s_sth.s_items[i]),sizeof(S_item)) ; 

		CurPage->I_Status[i][0] = ADDITEMS;

		i++ ;

		CurPage->NoItems = i;
	}
	if((err=ShowItems(CurPage))<0) return(err) ;

	return(NOERROR) ;
}	/* AddItems() */
/*-----------------------------------------------------------------------*/
/*	Get the next node in linked list to add invoice items. If the
*	(Cur. invc last page) = (Last Page in linked List) or no
*	nodes in list, allocate node and add to linked list
*/

MakeFreshPage()
{
	Page	*tempptr ;

	/* If, no node is allocated yet or Current invoice used all the nodes,
	   then allocate new node */

	if( LastPage == '\0' || CurLast == LastPage ){
		tempptr= (Page *)malloc((unsigned)sizeof(Page)) ;

		if( tempptr == '\0' ){
			DispError((char*)&s_sth,"Memory Allocation Error");
			return(ERROR);
		}
		tempptr->NextPage = '\0' ;

		if( LastPage == '\0' ){	/* No node is allocated Yet */
			tempptr->PrevPage = '\0' ;
			tempptr->Pageno = 1 ;
			FirstPage = tempptr ;
		}
		else {				/* Not a first node in list */
			tempptr->Pageno = LastPage->Pageno + 1 ;
			LastPage->NextPage = tempptr ;
			tempptr->PrevPage = LastPage ;
		}
		LastPage = tempptr ;
	}

	if(CurLast == '\0')
		CurLast = FirstPage ;
	else
		CurLast = CurLast->NextPage ;

	CurLast->NoItems = 0 ;
	CurPage = CurLast ;

	return(NOERROR);
}	/* MakeFreshPage() */
/*----------------------------------------------------------*/
/* Get the key and show the record */

SelectRecord()
{
	int	err ;

	err = ReadKey();
	if(err != NOERROR) return(err) ;

	/* Get area records i.e. Build list */
	err = BuildList();
	if(err < 0 && err != EFL) {
		return(err);
	}
	if(err == 1) return(1);

	err = ShowItems(CurPage);
	if(err < 0) {
		return(err);
	}

	return(NOERROR);
}	/* SelectRecord() */
/*--------------------------------------------------------------*/
/* Read all time entry info for the key's given 		*/

BuildList()
{
	int retval;
	int idex, j ;
	int count = 0;
	double	temp_calc, tot_units;

	CurLast = CurPage = '\0';
	idex = 0;

	strcpy(time_rec.tm_numb,s_sth.s_emp);
	time_rec.tm_date = s_sth.s_pay_date;
	time_rec.tm_no = 0;
	flg_reset(TIME);

	for( ; ; ) {
		retval = get_n_ptime(&time_rec,BROWSE,0,FORWARD,e_mesg);
		if(retval < 0) {
			if(retval == EFL) break;
			DispError((char *)&s_sth,e_mesg);
			return(retval);
		}
		count ++;

		if(strcmp(time_rec.tm_numb,s_sth.s_emp)!=0) { 
			break;
		}
		if( time_rec.tm_date != s_sth.s_pay_date ) {
			break;
		}

		if(PAGESIZE == idex) idex = 0;
		if(idex == 0) {
			if((retval = MakeFreshPage()) < 0) return(retval);
		}
		CurPage->Items[idex].s_no = time_rec.tm_no;
		CurPage->Items[idex].s_pp = time_rec.tm_pp;
		CurPage->Items[idex].s_week = time_rec.tm_week;
		CurPage->Items[idex].s_fund = time_rec.tm_fund;

		strcpy(CurPage->Items[idex].s_class,time_rec.tm_class);
		GetClass(time_rec.tm_class);
		strcpy(CurPage->Items[idex].s_cl_desc,class.c_desc);

		GetPos(class.c_pos);

		strcpy(CurPage->Items[idex].s_earn,time_rec.tm_earn);
		strcpy(earnings.ea_code,CurPage->Items[idex].s_earn);
		earnings.ea_date = s_sth.s_rundate;
		flg_reset(EARN);

		retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
		if((retval < 0 ||
			strcmp(earnings.ea_code,
				CurPage->Items[idex].s_earn) != 0)){
			fomer("Earnings Code Does Not Exist");
			if(retval != UNDEF) return(ERROR);
		}
		strcpy(CurPage->Items[idex].s_ea_desc,earnings.ea_desc);

		if(time_rec.tm_trans[0] == '\0') {
			CurPage->Items[idex].s_trans[0] = HV_CHAR;
			CurPage->Items[idex].s_tr_desc[0] = HV_CHAR;
		}
		else
			strcpy(CurPage->Items[idex].s_trans,time_rec.tm_trans);

		if(CurPage->Items[idex].s_trans[0] != HV_CHAR) {
		strcpy(trans.tr_code,CurPage->Items[idex].s_trans);
		retval = get_trans(&trans,BROWSE,0,e_mesg);
		if(retval < 0) {
			DispError((char *)&s_sth,
					"Transaction Code Does not Exist");
			if(retval != UNDEF) return(ERROR);
		}
		strcpy(CurPage->Items[idex].s_tr_desc,trans.tr_desc);
		}

		if(time_rec.tm_exp[0] == '\0') {
			CurPage->Items[idex].s_exp[0] = HV_CHAR;
			CurPage->Items[idex].s_ex_desc[0] = HV_CHAR;
		}
		else
			strcpy(CurPage->Items[idex].s_exp,time_rec.tm_exp);

		if(CurPage->Items[idex].s_exp[0] != HV_CHAR) {
		strcpy(expense.ex_code,CurPage->Items[idex].s_exp);
		retval = get_exp(&expense,BROWSE,0,e_mesg);
		if(retval < 0) {
			DispError((char *)&s_sth,
				"Expense Code Does not Exist");
			if(retval != UNDEF) return(ERROR);
		}
		strcpy(CurPage->Items[idex].s_ex_desc,expense.ex_desc);
		}

		strcpy(CurPage->Items[idex].s_teach,time_rec.tm_teach);
		strcpy(CurPage->Items[idex].s_t_desc,"             ");

		CurPage->Items[idex].s_adj_flag[0] = HV_CHAR;
		if(time_rec.tm_adj[0] == '\0')
			CurPage->Items[idex].s_adj_flag[0] = HV_CHAR;
		for(j=0 ; j<7 ; j++){ 
			if(time_rec.tm_att[j][0] == '\0')
				CurPage->Items[idex].s_att[j][0] = 
					'\0';
			else
				strcpy(CurPage->Items[idex].s_att[j],
					time_rec.tm_att[j]);
		}

		tot_units = 0;
		for(j=0 ; j<7 ; j++) {
			CurPage->Items[idex].s_units[j] = time_rec.tm_units[j];
			tot_units += time_rec.tm_units[j];
		}

		CurPage->Items[idex].s_total = time_rec.tm_tot_amt;
		if(tot_units !=0) {
	 		temp_calc = class.c_yrly_inc/class.c_units;  
			CurPage->Items[idex].s_rate = temp_calc * 
				earnings.ea_amount;   
		}
		else
			CurPage->Items[idex].s_rate = 0;
		CurPage->Items[idex].s_cc = time_rec.tm_cost;
		strcpy(CurPage->Items[idex].s_status,time_rec.tm_stat);
		strcpy(CurPage->Items[idex].s_comment,time_rec.tm_comment);

		school.sc_numb = CurPage->Items[idex].s_cc;
		retval = get_sch(&school,BROWSE,0,e_mesg);
		if(retval < 0) {
			DispError((char *)&s_sth,
				"Cost Center Number Does not Exist");
			if(retval != UNDEF) return(ERROR);
		}
		strcpy(CurPage->Items[idex].s_cc_desc,school.sc_name);

		CurPage->I_Status[idex][0] = ' ';
		CurPage->NoItems++;
		idex++;
	}
	seq_over(TIME);
	if(idex==0 && s_sth.s_fn[0] != ADDREC) {
		fomen("Could Not Find Time Entry for the Date Given - Please Re-enter");
		get();
		return(1);
	}
	if(CurLast != '\0') {
		CurPage = FirstPage;
	}

	if(retval == EFL) return(retval);
	return(NOERROR);
}

/*------------------------------------------------------------*/
BuildEmp()
{
	int retval;
	int i;
	int j, seq_no;
	double	temp_calc, total_units;

	CurLast = CurPage = NULL;
	i = 0;
	seq_no = 0;

	strcpy(earnings.ea_code,pay_param.pr_reg_earn);
	earnings.ea_date = s_sth.s_rundate;
	flg_reset(EARN);

	retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
	if((retval < 0 ||
		strcmp(earnings.ea_code, pay_param.pr_reg_earn) != 0)){
		fomer("Earnings Code Does Not Exist");
		if(retval != UNDEF) return(ERROR);
	}

	strcpy(barg_unit.b_code,emp_rec.em_barg);
	barg_unit.b_date = get_date();
	flg_reset(BARG);

	retval = get_n_barg(&barg_unit,BROWSE,0,BACKWARD,e_mesg);
	if(retval == EFL ||
		strcmp(barg_unit.b_code, emp_rec.em_barg) != 0){
  		DispError((char *)&s_sth,"Bargaining Unit does not Exist");
		return(NOERROR);
	}
	if(retval < 0){
  		DispError((char *)&s_sth,e_mesg);
  		return(ERROR);
	}
	seq_over(BARG);

	strcpy(pay_per_it.ppi_code, barg_unit.b_pp_code);
	pay_per_it.ppi_st_date = s_sth.s_pay_date;
	flg_reset(PAY_PER_ITEM);

	retval = get_n_pp_it(&pay_per_it,BROWSE, 1, BACKWARD, e_mesg) ;
	if(retval == EFL ||
	      strcmp(pay_per_it.ppi_code, barg_unit.b_pp_code) != 0){ 
  		DispError((char *)&s_sth,"Pay Period Item does not Exist");
		return(NOERROR);
	}
	if(retval < 0){
  		DispError((char *)&s_sth,e_mesg);
  		return(ERROR);
	}
	seq_over(PAY_PER_ITEM);

	strcpy(emp_sched1.es_numb,emp_rec.em_numb);
	emp_sched1.es_week = 0;
	emp_sched1.es_class[0] = '\0';
	emp_sched1.es_fund = 0;
	flg_reset(EMP_SCHED1);

	for( ; ; ) {
		retval = get_n_emp_sched1(&emp_sched1,BROWSE,0,FORWARD,e_mesg);
		if(retval < 0) {
			if(retval == EFL) break;
			DispError((char *)&s_sth,e_mesg);
			return(retval);
		}

		if(strcmp(emp_sched1.es_numb,emp_rec.em_numb)!=0) { 
			break;
		}

		if(PAGESIZE == i) i = 0;
		if(i == 0) {
			if((retval = MakeFreshPage()) < 0) return(retval);
		}
		GetClass(emp_sched1.es_class);

		GetPos(class.c_pos);
	    	if(((strcmp(position.p_type, "FT") == 0) ||
	       	   (strcmp(position.p_type, "PT") == 0)) && 
		    strcmp(pay_param.pr_prov,"NB") == 0)
			continue;

		seq_no ++;
		CurPage->Items[i].s_no = seq_no;
		CurPage->Items[i].s_pp = pay_per_it.ppi_numb;
		CurPage->Items[i].s_week = emp_sched1.es_week;
		CurPage->Items[i].s_fund = emp_sched1.es_fund;
		CurPage->Items[i].s_adj_flag[0] = HV_CHAR;

		strcpy(CurPage->Items[i].s_class,emp_sched1.es_class);
		strcpy(CurPage->Items[i].s_cl_desc, class.c_desc) ;
		strcpy(CurPage->Items[i].s_earn,pay_param.pr_reg_earn);
		strcpy(CurPage->Items[i].s_ea_desc, earnings.ea_desc) ;

		if(strcmp(pay_param.pr_prov,"NB") == 0) {
			strcpy(trans_item.tri_class,CurPage->Items[i].s_class);
			strcpy(trans_item.tri_earn,CurPage->Items[i].s_earn);

			retval = get_trans_it(&trans_item,BROWSE,1,e_mesg);
			if(retval < 0) {
			  	fomer("Transaction Code Does not Exist");
			}
			strcpy(CurPage->Items[i].s_trans,trans_item.tri_code);
		}
		else {
			CurPage->Items[i].s_trans[0] = HV_CHAR;
			CurPage->Items[i].s_tr_desc[0] = HV_CHAR;
		}

		if(strcmp(pay_param.pr_prov,"NB") == 0) {
			strcpy(exp_item.exi_class,CurPage->Items[i].s_class);
			strcpy(exp_item.exi_earn,CurPage->Items[i].s_earn);

			retval = get_exp_it(&exp_item,BROWSE,1,e_mesg);
			if(retval < 0) {
			  	fomer("Transaction Code Does not Exist");
			}
			strcpy(CurPage->Items[i].s_exp,exp_item.exi_code);
		}
		else {
			CurPage->Items[i].s_exp[0] = HV_CHAR;
			CurPage->Items[i].s_ex_desc[0] = HV_CHAR;
		}

		if(class.c_units != 0){
	 	  temp_calc = class.c_yrly_inc/class.c_units;  
		  CurPage->Items[i].s_rate = temp_calc;
		}
		else
		  CurPage->Items[i].s_rate = 0;
		CurPage->Items[i].s_total = emp_sched1.es_amount;	

		for(j=0 ; j<7 ; j++) {
		  CurPage->Items[i].s_units[j] = emp_sched1.es_units[j];
		 /* CurPage->Items[i].s_att[j][0] = HV_CHAR; */
		  CurPage->Items[i].s_att[j][0] = '\0';
		}

		CurPage->Items[i].s_cc = emp_sched1.es_cost;

		school.sc_numb = CurPage->Items[i].s_cc;
		retval = get_sch(&school,BROWSE,0,e_mesg);
		if(retval < 0) {
			fomer("Cost Center Number Does not Exist");
		}
		strcpy(CurPage->Items[i].s_cc_desc,school.sc_name);

		CurPage->Items[i].s_teach[0] = '\0';
		CurPage->Items[i].s_t_desc[0] = '\0';
		CurPage->Items[i].s_comment[0] = '\0';

		strcpy(CurPage->Items[i].s_status,ACTIVE);

		CurPage->I_Status[i][0] = ' ';
		CurPage->NoItems++;
		i++;
	}
	seq_over(EMP_SCHED1);

	if(CurLast != NULL) {
		CurPage = FirstPage;
	}

	if(retval == EFL) return(retval);
	return(NOERROR);
}
/*-----------------------------------------------------------------------*/
/* Take the confirmation from user for the items part of the screen      */
/*-----------------------------------------------------------------------*/

ConfirmVac()
{
	int	err ;

#ifdef ENGLISH
	err = GetOption((char *)&s_sth,
		"Calculate Vacation Pay (Y/N)?", "YN") ;
#else
	err = GetOption((char *)&s_sth,
		"Calculate Vacation Pay (O/N)?", "ON") ;
#endif
	return(err) ;

}	/* ConfirmVac() */
/*------------------------------------------------------------*/
/* Show all the items on the current page 		      */

ShowItems(pageptr)
Page	*pageptr ;
{
	int	i, j, retval;

	if(pageptr != '\0') {
		/* Copy the items to screen */
		scpy((char*)s_sth.s_items, (char*)pageptr->Items,
			(pageptr->NoItems * sizeof(S_item)) );

		i = pageptr->NoItems ;
		s_sth.s_page   = pageptr->Pageno ;

	}
	else {
		s_sth.s_page = HV_SHORT ;
		i = 0 ;
	}

	/* Move High Values to remaining Items */
	for( ; i < PAGESIZE ; i++ ){
		InitItem(i,HV_CHAR,HV_SHORT,HV_DOUBLE);
	}

	ret( WriteFields((char *)&s_sth, PAGE_FLD, (END_FLD - 200)) );

	return(NOERROR) ;
}	/* ShowItems() */
/*-----------------------------------------------------------------------*/ 
/* Process all the items in the link list and write any changes to the   */
/* daily attendance file.						 */
/*-----------------------------------------------------------------------*/ 

ProcItemUpdates(mode)
int	mode;
{
	Page	*temppage;
	int	i;
	int	retval;
	int	write_mode;

	if(CurLast != '\0') {
	   for(temppage=FirstPage; temppage!='\0';temppage=temppage->NextPage) {
	      for(i =0; i< temppage->NoItems; i++) {
		 retval = GetMode(temppage,i,mode,&write_mode);
		 if(write_mode == NOOP) {
			continue;
		 }
		 retval = WriteRecords(temppage,i,write_mode);
  		 if(retval < 0) {
			if(retval == LOCKED) return(LOCKED);
		   	break;
		 }
	      }
	      if(temppage == CurLast) break;
	   }
	}
	return(NOERROR);
}
/*----------------------------------------------------------------------*/ 
/* Getting the mode which the record should be read to allow updates 	*/

GetMode(temppage,item_no,mode,write_mode)
Page	*temppage;
int	item_no;
int	mode;
int	*write_mode;
{
	if(mode == ADD) {
		if(strcmp(temppage->Items[item_no].s_status,INACTIVE)==0) {
			*write_mode = NOOP;
		}
		else {
			*write_mode = ADD;
		}
	}
	else if(mode == UPDATE) {
		if(strcmp(temppage->Items[item_no].s_status,INACTIVE)==0) {
			*write_mode = P_DEL;
		}
		else if(temppage->I_Status[item_no][0] == ADDITEMS) {
			*write_mode = ADD;
		}
		else if(temppage->I_Status[item_no][0] == CHANGE) {
			*write_mode = UPDATE;
		}
		else if(temppage->I_Status[item_no][0] == ' ') {
			*write_mode = NOOP;
		}
	}
	else if(mode == P_DEL) {
		*write_mode = P_DEL;
	}

	return(NOERROR);
}
/*-----------------------------------------------------------------------*/ 
/* Write the Time record to the file.			 		 */ 
/*-----------------------------------------------------------------------*/ 

WriteRecords(temppage,item_no,mode)
Page	*temppage;
int	item_no;
int	mode;
{
	int	j, retval;
	int	curr_day, curr_month, curr_year, leap_year;
	int	i;
	long	temp_date;
	int	month, day;
	int	err ;

	strcpy(barg_unit.b_code,emp_rec.em_barg);
	barg_unit.b_date = get_date();
	flg_reset(BARG);

	retval = get_n_barg(&barg_unit,BROWSE,0,BACKWARD,e_mesg);
	if(retval < 0 || strcmp(barg_unit.b_code,emp_rec.em_barg)!=0){
		DispError((char *)&s_sth,"Error Reading Bargaining Unit File");
		return(-1);
	}
	seq_over(BARG);

	strcpy(sen_par.sn_position,emp_rec.em_pos);
	sen_par.sn_eff_date = get_date();
	flg_reset(SEN_PAR);

	retval = get_n_sen_par(&sen_par, BROWSE, 0, BACKWARD, e_mesg);
	if(retval < 0) {
  		DispError((char *)&s_sth,e_mesg);
		return(NOERROR);
	}
	seq_over(SEN_PAR);
	if(strcmp(sen_par.sn_position,emp_rec.em_pos)!=0){
		DispError((char *)&s_sth,"Seniority Parameter Record Not on File");
		return(NOERROR);
	}

	strcpy(time_rec.tm_numb,s_sth.s_emp);
	time_rec.tm_date = s_sth.s_pay_date;
	time_rec.tm_no = temppage->Items[item_no].s_no ;
	if(mode != ADD) {
		scpy((char *)&pre_time_rec,(char *)&time_rec,
			sizeof(pre_time_rec));

		retval = get_ptime(&time_rec,UPDATE,0,e_mesg) ;
		if(retval < 0 && retval != UNDEF) {
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		}
		if(mode == UPDATE && retval == UNDEF) mode = ADD;
	}
	/* Move New Fields into record */
	time_rec.tm_pp = temppage->Items[item_no].s_pp ;

	strcpy(pay_per_it.ppi_code,barg_unit.b_pp_code);
	pay_per_it.ppi_numb = time_rec.tm_pp;
	pay_per_it.ppi_year = 9999;
	flg_reset(PAY_PER_ITEM);

	retval = get_n_pp_it(&pay_per_it,BROWSE,3,BACKWARD,e_mesg);
	if(retval < 0 || strcmp(pay_per_it.ppi_code,barg_unit.b_pp_code)!=0 ||
		pay_per_it.ppi_numb != time_rec.tm_pp){
	  	fomer("Error Reading Pay Period Item File") ;
	  	return(NOERROR);
	}
	seq_over(PAY_PER_ITEM);
	
	time_rec.tm_year = pay_per_it.ppi_year;
	time_rec.tm_week = temppage->Items[item_no].s_week ;
	time_rec.tm_fund = temppage->Items[item_no].s_fund ;
	if(temppage->Items[item_no].s_adj_flag[0] == HV_CHAR)
		time_rec.tm_adj[0] = '\0';
	else
		strcpy(time_rec.tm_adj,temppage->Items[item_no].s_adj_flag);

	if(temppage->Items[item_no].s_trans[0] == HV_CHAR)
		time_rec.tm_trans[0] = '\0';
	else
		strcpy(time_rec.tm_trans,temppage->Items[item_no].s_trans);
	if(temppage->Items[item_no].s_exp[0] == HV_CHAR)
		time_rec.tm_exp[0] = '\0';
	else
		strcpy(time_rec.tm_exp,temppage->Items[item_no].s_exp);
	strcpy(time_rec.tm_class,temppage->Items[item_no].s_class);
	strcpy(time_rec.tm_earn,temppage->Items[item_no].s_earn);
	time_rec.tm_cost = temppage->Items[item_no].s_cc;

	att_his.eah_date = pay_per_it.ppi_st_date;
	if(time_rec.tm_week == 2){
		for(i=0;i<7;i++){
			curr_day = (att_his.eah_date % 100);
			curr_month = ((att_his.eah_date/100)%100);
			curr_year = att_his.eah_date / 10000;
			curr_day++;
			leap_year = curr_year % 4;
		    	if(leap_year == 0 && curr_month == 2){	
			  if(curr_day > 29){
				if(curr_month == 12){
					curr_year++;
				curr_month = 1;
				}
		 	  else
				curr_month++;
				curr_day = 1;
			  }
			}
			else {
			  if(curr_day > d_month[curr_month-1]){
				if(curr_month == 12){
					curr_year++;
					curr_month = 1;
				}
				else
					curr_month++;
				curr_day = 1;
			  }
			}
			att_his.eah_date=(curr_year*10000)+(curr_month*100)+
				curr_day;
		}
	}	

	for(j=0 ; j<7 ; j++) {
	  if(temppage->Items[item_no].s_units[j] == HV_DOUBLE) 
		time_rec.tm_units[j] = 0;
	  else
		time_rec.tm_units[j] = temppage->Items[item_no].s_units[j];
	
/*	  if(temppage->Items[item_no].s_att[j][0] == HV_CHAR) 
		time_rec.tm_att[j][0] = '\0';*/

	  	if(mode == ADD){
		  strcpy(att.at_code,temppage->Items[item_no].s_att[j]);
		  retval = get_att(&att,BROWSE,1,e_mesg);
		  if(retval < 0 && retval != UNDEF){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		  }
		  if(retval == 0) {
		    strcpy(att_his.eah_numb,time_rec.tm_numb);
		    retval = get_emp_at(&att_his,BROWSE,0,e_mesg) ;
		    if(retval < 0 && retval != UNDEF){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		    }
		    if(retval == UNDEF){

		    	strcpy(att_his.eah_code,
			  temppage->Items[item_no].s_att[j]);
			strcpy(att_his.eah_teach, 
			  temppage->Items[item_no].s_teach);
			if(att_his.eah_teach[0] == HV_CHAR)
				att_his.eah_teach[0] = '\0';
			att_his.eah_hours = 
			          temppage->Items[item_no].s_units[j];
			att_his.eah_sen_hours = sen_par.sn_num_hrs_day;
			att_his.eah_vacproc[0] = NULL;
	
			retval = put_emp_at(&att_his,ADD,e_mesg) ;
			if(retval < 0) {
				DispError((char *)&s_sth,e_mesg);
				roll_back(e_mesg);
				return(retval);
			}
		    }
		  }
		}
		if(mode == P_DEL){
		  strcpy(att.at_code,time_rec.tm_att[j]);
		  retval = get_att(&att,BROWSE,1,e_mesg);
		  if(retval < 0 && retval != UNDEF){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		  }
		  if(retval == 0) {
		    strcpy(att_his.eah_numb,time_rec.tm_numb);
		    retval = get_emp_at(&att_his,UPDATE,0,e_mesg) ;
		    if(retval < 0){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		    }
		    retval = put_emp_at(&att_his,P_DEL,e_mesg) ;
		    if(retval < 0) {
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		    }
		  }
		}
		if(mode == UPDATE){
		  strcpy(att.at_code,time_rec.tm_att[j]);
		  retval = get_att(&att,BROWSE,1,e_mesg);
		  if(retval < 0 && retval != UNDEF){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		  }
		  if(retval == 0) {
		    strcpy(att_his.eah_numb,time_rec.tm_numb);
		    retval = get_emp_at(&att_his,UPDATE,0,e_mesg) ;
		    if(retval < 0){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		    }
		    retval = put_emp_at(&att_his,P_DEL,e_mesg) ;
		    if(retval < 0) {
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		    }
		  }
		  strcpy(att.at_code,temppage->Items[item_no].s_att[j]);
		  retval = get_att(&att,BROWSE,1,e_mesg);
		  if(retval < 0 && retval != UNDEF){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		  }
		  if(retval == 0) {
		    strcpy(att_his.eah_numb,time_rec.tm_numb);
		    retval = get_emp_at(&att_his,BROWSE,0,e_mesg) ;
		    if(retval < 0 && retval != UNDEF){
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		    }
		    if(retval == UNDEF){
		    	strcpy(att_his.eah_code,
			  temppage->Items[item_no].s_att[j]);
			strcpy(att_his.eah_teach, 
			  temppage->Items[item_no].s_teach);
			if(att_his.eah_teach[0] == HV_CHAR)
				att_his.eah_teach[0] = '\0';
			att_his.eah_hours = 
			          temppage->Items[item_no].s_units[j];
			att_his.eah_vacproc[0] = NULL;
	
			retval = put_emp_at(&att_his,ADD,e_mesg) ;
			if(retval < 0) {
				DispError((char *)&s_sth,e_mesg);
				roll_back(e_mesg);
				return(retval);
			}
		    }
		  }
		}
		strcpy(time_rec.tm_att[j],temppage->Items[item_no].s_att[j]);

		/* increment the attendance date */
		curr_day = (att_his.eah_date % 100);
		curr_month = ((att_his.eah_date/100)%100);
		curr_year = att_his.eah_date / 10000;
		curr_day++;
		leap_year = curr_year % 4;
		if(leap_year == 0 && curr_month == 2){	
		  if(curr_day > 29){
			if(curr_month == 12){
				curr_year++;
				curr_month = 1;
			}
			else
				curr_month++;
			curr_day = 1;
		  }
		}
		else {
		  if(curr_day > d_month[curr_month-1]){
			if(curr_month == 12){
				curr_year++;
				curr_month = 1;
			}
			else
				curr_month++;
			curr_day = 1;
		  }
		}
	        att_his.eah_date=(curr_year*10000)+(curr_month*100)+
					curr_day;
	}

	time_rec.tm_tot_amt = temppage->Items[item_no].s_total ;
	time_rec.tm_tot_amt = D_Roundoff(time_rec.tm_tot_amt);
	
	strcpy(time_rec.tm_teach,temppage->Items[item_no].s_teach);
	if(temppage->Items[item_no].s_comment[0] == HV_CHAR)
		time_rec.tm_comment[0] = '\0';
	else
		strcpy(time_rec.tm_comment,temppage->Items[item_no].s_comment);
	strcpy(time_rec.tm_stat,temppage->Items[item_no].s_status);

	retval = put_ptime(&time_rec,mode,e_mesg) ;
	if(retval < 0) {
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(retval);
	}

	if(mode != ADD) {
		retval = rite_audit((char*)&s_sth,TIME,mode,(char*)&time_rec,
			(char*)&pre_time_rec,e_mesg);
		if(retval==LOCKED) {
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg) ;
			return(LOCKED) ;
		}
		if(retval < 0 ){
			DispError((char *)&s_sth,"ERROR: Saving Records"); 
			DispError((char *)&s_sth,e_mesg);
			roll_back(e_mesg);
			return(retval);
		}
	}

	retval = commit(e_mesg) ;
	if(retval < 0) {
		DispError((char *)&s_sth,"ERROR: Saving Records"); 
		DispError((char *)&s_sth,e_mesg);
		roll_back(e_mesg);
		return(retval);
	}
	return(NOERROR);
}
/*------------------------------------------------------------*/
CheckBank()
{
	int	i, j, retval;

	strcpy(sen_par.sn_position,class.c_pos);
	sen_par.sn_eff_date = get_date();
	flg_reset(SEN_PAR);

	retval = get_n_sen_par(&sen_par, BROWSE, 0, BACKWARD, e_mesg);
	if(retval < 0) {
  		DispError((char *)&s_sth,e_mesg);
		return(NOERROR);
	}
	seq_over(SEN_PAR);
	if(strcmp(sen_par.sn_position,emp_rec.em_pos)!=0){
		DispError((char *)&s_sth,"Seniority Parameter Record Not on File");
		return(NOERROR);
	}

	sick_bal = emp_rec.em_sic_ent;
	sick_bank = emp_rec.em_sic_bk;
	vac_bal = emp_rec.em_vac_ent;

	for(i=0;i<12;i++){
		sick_bal += emp_rec.em_sck_acc[i];
		sick_bal += emp_rec.em_vac_acc[i];
	}

	strcpy(att_his.eah_numb,emp_rec.em_numb);
	att_his.eah_date = pay_param.pr_fisc_st_dt;
	flg_reset(EMP_ATT);

	for(;;) {
		retval=get_n_emp_at(&att_his,BROWSE,0,FORWARD,e_mesg);
		if(retval < 0) {
			if(retval == EFL) break;
			DispError((char *)&s_sth,e_mesg);
			seq_over(EMPLOYEE);
			return(retval);
		}
		if(strcmp(emp_rec.em_numb,att_his.eah_numb) != 0)
			break;

		if(att_his.eah_date > pay_param.pr_fisc_end_dt)
			break;

		strcpy(att.at_code, att_his.eah_code);

		retval = get_att(&att,BROWSE,1,e_mesg);
		if(retval < 0)  {
			fomen(e_mesg);
			get();
			return(retval);
		}

		if(strcmp(att.at_sick, "Y") == 0){
			if(strcmp(att.at_code, "S11") == 0)
				sick_bal -= .5;
			else if(strcmp(att.at_code, "S12") == 0)
				sick_bal -= 1;
			else
				sick_bal -= att_his.eah_hours / 
				att_his.eah_sen_hours;
		}
		if(strcmp(att.at_sckbank, "Y") == 0){
			sick_bank -= att_his.eah_hours / 
				att_his.eah_sen_hours;
		}
		if(strcmp(att.at_vac, "Y") == 0){
			vac_bal -= att_his.eah_hours / 
				att_his.eah_sen_hours;
		}
	}

	return(NOERROR) ;
}
/*------------------------------------------------------------*/
/* Read details of given item# */
/*------------------------------------------------------------*/
ReadItem(item_no,mode,vac_flg)
int	item_no ;
int	mode ;
int	vac_flg;
{
	int	i;
	int	retval;
	int	att_flg, rate_flg, updt_flg, add_flg;
	double	temp_calc;

#ifdef ENGLISH
	strcpy(s_sth.s_mesg,"Press ESC-F to Terminate");
#else
	strcpy(s_sth.s_mesg,"Appuyer sur ESC-F pour terminer");
#endif
	DispMesgFld((char *)&s_sth);

	att_flg = 0;
	rate_flg = 0;
	add_flg = 0;
	updt_flg = 0;

	if(s_sth.s_fn[0] == 'A' || mode == ADD)
		add_flg = 1;

	if(mode == ADD){
		if(SetDupBuffers(PAYPER_FLD, STATUS_FLD,0)<0) 
			return(PROFOM_ERR);
		if(vac_flg == 0)
			DispFld(item_no);
		else
			DispVac(item_no);
	}
	else{
		if(SetDupBuffers(PAYPER_FLD, STATUS_FLD,1)<0) 
			return(PROFOM_ERR);
		if(strcmp(s_sth.s_items[item_no].s_earn, 
						pay_param.pr_vac_earn) == 0)
			vac_flg = 1;
/*
		if(s_sth.s_fn[0] != 'A'){
			retval = CheckTime(item_no);
	  		if(retval < 0 && retval != UNDEF) return(retval);
			if(retval == UNDEF) add_flg = 1;
		}
*/
	}
	if(vac_flg == 1 || mode == UPDATE)
		updt_flg = 1;

	if(add_flg == 1){

	  /* Read Pay Period Number	*/
	  if(SetDupBuffers(PAYPER_FLD,PAYPER_FLD,1)<0) 
		return(PROFOM_ERR);
	  s_sth.s_items[item_no].s_pp = LV_SHORT;
	  retval = ReadCurFld(PAYPER_FLD, PAYPER_FLD,mode);
	  if(retval < 0 || retval == RET_USER_ESC) return(retval);

	  /* Read Week Number	*/
	  if(SetDupBuffers(WEEK_FLD, WEEK_FLD,1)<0) 
		return(PROFOM_ERR);
	  s_sth.s_items[item_no].s_week = LV_SHORT;
	  retval = ReadCurFld(WEEK_FLD, WEEK_FLD,mode);
	  if(retval < 0 || retval == RET_USER_ESC) return(retval);
	}
	  /* Read Fund Number	*/
	  if(SetDupBuffers(FUND_FLD, FUND_FLD,1)<0) 
		return(PROFOM_ERR);
	  s_sth.s_items[item_no].s_fund = LV_SHORT;
	  retval = ReadCurFld(FUND_FLD, FUND_FLD,mode);
	  if(retval < 0 || retval == RET_USER_ESC) return(retval);

	  /* Read Classification Code	*/
	  if(SetDupBuffers(CLASS_FLD, CLASS_FLD,1)<0) 
		return(PROFOM_ERR);
	  s_sth.s_items[item_no].s_class[0] = LV_CHAR;
	  retval = ReadCurFld(CLASS_FLD, CLASS_FLD,mode);
	  if(retval < 0 || retval == RET_USER_ESC) return(retval);

	  if ( WriteFields((char *)&s_sth, CLASS_FLD, CLASS_FLD+100) < 0 )  
		return(-1);

	  if(updt_flg == 0){
	    strcpy(pay_period.pp_code,barg_unit.b_pp_code);
	    pay_period.pp_year = get_date() / 10000;
	    flg_reset(PAY_PERIOD);

	    retval = get_n_pay_per(&pay_period,BROWSE,0,FORWARD,e_mesg);
	    if(retval < 0){
		    DispError((char *)&s_sth,e_mesg);
		    return(retval);
	    }
	    if(strcmp(pay_period.pp_code,barg_unit.b_pp_code)!=0){
#ifdef ENGLISH
	    	sprintf(e_mesg,"Pay Period Code %s Not on File",
			    	barg_unit.b_pp_code);
#else
		    sprintf(e_mesg,"Pay Period Code %s Not on File",
	    			barg_unit.b_pp_code);
#endif
		    DispError((char *)&s_sth,e_mesg);
		    return(ERROR);
	    }
	    seq_over(PAY_PERIOD);
	    if(class.c_units != 0){
		temp_calc = class.c_yrly_inc / class.c_units;
		s_sth.s_items[item_no].s_rate = temp_calc;
	    }
	    else{
		if(class.c_yrly_inc != 0){
 			temp_calc = class.c_yrly_inc /
			 (double)pay_period.pp_numb;
			temp_calc = D_Roundoff(temp_calc);
		}
		else{
			strcpy(cert.cr_code,emp_rec.em_cert);
			strcpy(cert.cr_level,emp_rec.em_level);
			cert.cr_date = get_date();
			flg_reset(CERT);
		
			retval = get_n_cert(&cert,BROWSE,0,BACKWARD,e_mesg);
				seq_over(CERT);
			temp_calc = (cert.cr_income /
					 (double)pay_period.pp_numb);
       		 	temp_calc = D_Roundoff(temp_calc);
		}
		s_sth.s_items[item_no].s_total = temp_calc;
	    }

	    if ( WriteFields((char *)&s_sth, RATE_FLD, TOTAL_FLD) < 0 )  
		return(-1);
	  }
	
	  /* Read Earnings Code	*/
	  sr.curfld = 1800;
	  if(SetDupBuffers(EARN_FLD, EARN_FLD,1)<0) 
		return(PROFOM_ERR);
	  s_sth.s_items[item_no].s_earn[0] = LV_CHAR;
	  retval = ReadCurFld(EARN_FLD, EARN_FLD,mode);
	  if(retval < 0 || retval == RET_USER_ESC) return(retval);
	  if ( WriteFields((char *)&s_sth, EARN_FLD, EARN_FLD+100) < 0 )  
		return(-1);

	  if(updt_flg == 0){
	    if(strcmp(earnings.ea_type ,"P") == 0){ 
		s_sth.s_items[item_no].s_rate =
		 s_sth.s_items[item_no].s_rate * earnings.ea_amount;   
	    }
	    if ( WriteFields((char *)&s_sth, RATE_FLD, RATE_FLD) < 0 )  
		return(-1);

/*	    strcpy(trans_item.tri_class,s_sth.s_items[item_no].s_class);
	    strcpy(trans_item.tri_earn,s_sth.s_items[item_no].s_earn);

	    retval = get_trans_it(&trans_item,BROWSE,1,e_mesg);
	    if(retval < 0) {
		fomer("Transaction Code Does not Exist");
		s_sth.s_items[item_no].s_trans[0] = LV_CHAR;
		return(ERROR);
	    }
	    strcpy(s_sth.s_items[item_no].s_trans,trans_item.tri_code);
	    strcpy(trans.tr_code,s_sth.s_items[item_no].s_trans);
	    retval = get_trans(&trans,BROWSE,0,e_mesg);
	    if(retval < 0) {
		DispError((char *)&s_sth,
				"Transaction Code Does not Exist");
		if(retval != UNDEF) return(ERROR);
	    }
	    strcpy(s_sth.s_items[item_no].s_tr_desc,trans.tr_desc);

	    strcpy(exp_item.exi_class,s_sth.s_items[item_no].s_class);
	    strcpy(exp_item.exi_earn,s_sth.s_items[item_no].s_earn);

	    retval = get_exp_it(&exp_item,BROWSE,1,e_mesg);
	    if(retval < 0) {
		fomer("Transaction Code Does not Exist");
	  	s_sth.s_items[item_no].s_exp[0] = LV_CHAR;
	  	return(ERROR);
	    }
	    strcpy(s_sth.s_items[item_no].s_exp,exp_item.exi_code);
	    strcpy(expense.ex_code,s_sth.s_items[item_no].s_exp);
	    retval = get_exp(&expense,BROWSE,0,e_mesg);
	    if(retval < 0) {
		DispError((char *)&s_sth,
			"Expense Code Does not Exist");
		if(retval != UNDEF) return(ERROR);
	    }
	    strcpy(s_sth.s_items[item_no].s_ex_desc,expense.ex_desc);

	    if ( WriteFields((char *)&s_sth, TRANS_FLD, EXP_FLD+100) < 0 )  
		return(-1);*/
	  }
	  /* Overtime bank will increment em_vac_bk in employee file */
	  /* Income will be 0 for that time entry 		       */
	  if(strcmp(s_sth.s_items[item_no].s_earn,"OB10") == 0 ||
	     strcmp(s_sth.s_items[item_no].s_earn,"OB15") == 0 ||
	     strcmp(s_sth.s_items[item_no].s_earn,"OB20") == 0) {
		s_sth.s_items[item_no].s_rate = 0;
		s_sth.s_items[item_no].s_total = 0;
	  }
	  if ( WriteFields((char *)&s_sth, RATE_FLD, TOTAL_FLD) < 0 )  
		return(-1);

	  /* Read Transaction Code	*/
	  if(strcmp(pay_param.pr_prov,"NB") == 0) {
		  sr.curfld = 2000;
		  if(SetDupBuffers(TRANS_FLD, TRANS_FLD,1)<0) 
			return(PROFOM_ERR);
		  s_sth.s_items[item_no].s_trans[0] = LV_CHAR;
		  retval = ReadCurFld(TRANS_FLD, TRANS_FLD,mode);
		  if(retval < 0 || retval == RET_USER_ESC) return(retval);
		  if(WriteFields((char *)&s_sth,TRANS_FLD,TRANS_FLD+100) < 0 )
			return(-1);

		  /* Read Expense Code	*/
		  sr.curfld = 2200;
		  if(SetDupBuffers(EXP_FLD, EXP_FLD,1)<0) 
			return(PROFOM_ERR);
		  s_sth.s_items[item_no].s_exp[0] = LV_CHAR;
		  retval = ReadCurFld(EXP_FLD, EXP_FLD,mode);
		  if(retval < 0 || retval == RET_USER_ESC) return(retval);
		  if ( WriteFields((char *)&s_sth,EXP_FLD, EXP_FLD+100) < 0 )  
			return(-1);
	  }

	  /* Read Cost Center Number	*/
	  if(SetDupBuffers(CC_FLD, CC_FLD,1)<0) 
		return(PROFOM_ERR);
	  s_sth.s_items[item_no].s_cc = LV_SHORT;
	  retval = ReadCurFld(CC_FLD, CC_FLD,mode);
	  if(retval < 0 || retval == RET_USER_ESC) return(retval);
	  if ( WriteFields((char *)&s_sth,CC_FLD, CC_FLD+100) < 0 )  
		return(-1);
	  GetPos(class.c_pos);
	
	  if(strcmp(pay_param.pr_prov,"NB") == 0) {
		  if((strcmp(position.p_type,"FT") == 0) ||
			(strcmp(position.p_type,"PT") == 0)){

			/* Read Adjustment Flag	*/
			if(SetDupBuffers(ADJ_FLD, ADJ_FLD,1)<0) 
				return(PROFOM_ERR);
			s_sth.s_items[item_no].s_adj_flag[0] = LV_CHAR;
			retval = ReadCurFld(ADJ_FLD, ADJ_FLD,mode);
			if(retval < 0) return(retval);

/*			retval = CalcRate();
			if(retval < 0) return(retval);*/
			if(WriteFields((char *)&s_sth,RATE_FLD,RATE_FLD) < 0 )
				return(-1);
		  }
	}
/*	if(trans.tr_lp_sum[0] != 'Y' && vac_flg == 0){*/
	if(earnings.ea_lump_sum[0] == 'Y') {
		for(i=0;i<7; i++) {
			s_sth.s_items[item_no].s_units[i] = HV_DOUBLE;
		}
		if(WriteFields((char *)&s_sth,UNIT1_FLD,UNIT7_FLD) < 0)
		return(-1);
	}
	else {
		/* Read Units	*/
		if(SetDupBuffers(UNIT1_FLD, UNIT7_FLD,1)<0) 
			return(PROFOM_ERR);
		for(i=0;i<7; i++)
			s_sth.s_items[item_no].s_units[i] = LV_DOUBLE;
		retval = ReadCurFld(UNIT1_FLD, UNIT7_FLD,mode);
		if(retval < 0 || retval == RET_USER_ESC) return(retval);

		rate_flg = 1;
		if(s_sth.s_items[item_no].s_rate != 0){
			retval = Calc_Total(item_no);
		  	if(retval < 0){
		 	   	return(ERROR);
		 	}
		}
		if ( WriteFields((char *)&s_sth, TOTAL_FLD, TOTAL_FLD) < 0 )  
			return(-1);
	}
	att_flg = 1;

	if(att_flg == 1){
		retval = CheckBank();
		if(retval < 0)	return(ERROR);

		/* Read Attendance Codes	*/
		if(SetDupBuffers(ATT1_FLD, ATT7_FLD,1)<0) 
			return(PROFOM_ERR);
		for(i=0;i<7; i++)
			s_sth.s_items[item_no].s_att[i][0] = LV_CHAR;

		for(;;) {
			retval = ReadCurFld(ATT1_FLD, ATT1_FLD,mode);
			if(retval < 0 || retval == RET_USER_ESC) return(retval);
	
			if(s_sth.s_items[item_no].s_att[0][0] == '\0')
				break;

			if(strcmp(att.at_sick, "Y")==0){ 
				if(strcmp(att.at_code, "S11") == 0)
					sick_bal -= .5;
				else if(strcmp(att.at_code, "S12") == 0)
					sick_bal -= 1;
				else
					sick_bal -=
					  s_sth.s_items[item_no].s_units[0] /
					  sen_par.sn_num_hrs_day;
				if(sick_bal <= 0){ 
					retval = GetOption((char *)&s_sth,
					"Balance less that 0, Change (Y/N)" ,"YN");
	    				if(retval == YES) {
						s_sth.s_items[item_no].s_att[0][0] = 
						LV_CHAR;
						continue;	
					}
					else
						break;
				}
				else
					break;
			}
			if(strcmp(att.at_sckbank, "Y") == 0) {
				sick_bank -= s_sth.s_items[item_no].s_units[0] /
					sen_par.sn_num_hrs_day;
		 		if(sick_bank <= 0){ 
					fomen("Sick Bank can't be less than zero");	get();
					s_sth.s_items[item_no].s_att[0][0] = LV_CHAR;
					continue;	
				}
				else
					break;
			}
			if(strcmp(att.at_vac, "Y")==0){ 
				vac_bal -= s_sth.s_items[item_no].s_units[0] /
					sen_par.sn_num_hrs_day;
		 		if(vac_bal <= 0){ 
					fomen("Vacation Balance less than zero");	get();
					break;
				}
				else
					break;
			}
			break;
		}

		for(;;) {
			retval = ReadCurFld(ATT2_FLD, ATT2_FLD,mode);
			if(retval < 0 || retval == RET_USER_ESC) return(retval);
	
			if(s_sth.s_items[item_no].s_att[1][0] == '\0')
				break;

			if(strcmp(att.at_sick, "Y")==0){ 
				if(strcmp(att.at_code, "S11") == 0)
					sick_bal -= .5;
				else if(strcmp(att.at_code, "S12") == 0)
					sick_bal -= 1;
				else
					sick_bal -=
					  s_sth.s_items[item_no].s_units[1] /
					  sen_par.sn_num_hrs_day;
				if(sick_bal <= 0){ 
					retval = GetOption((char *)&s_sth,
					"Balance less that 0, Change (Y/N)" ,"YN");
	    				if(retval == YES) {
						s_sth.s_items[item_no].s_att[1][0] = 
						LV_CHAR;
						continue;	
					}
					else
						break;
				}
				else
					break;
			}
			if(strcmp(att.at_sckbank, "Y") == 0) {
				sick_bank -= s_sth.s_items[item_no].s_units[1] /
					sen_par.sn_num_hrs_day;
		 		if(sick_bank <= 0){ 
					fomen("Bank can't be less than zero");	get();
					s_sth.s_items[item_no].s_att[1][0] = LV_CHAR;
					continue;	
				}
				else
					break;
			}
			if(strcmp(att.at_vac, "Y")==0){ 
				vac_bal -= s_sth.s_items[item_no].s_units[1] /
					sen_par.sn_num_hrs_day;
		 		if(vac_bal <= 0){ 
					fomen("Vacation Balance less than zero");	get();
					break;
				}
				else
					break;
			}
			break;
		}

		for(;;) {
			retval = ReadCurFld(ATT3_FLD, ATT3_FLD,mode);
			if(retval < 0 || retval == RET_USER_ESC) return(retval);
	
			if(s_sth.s_items[item_no].s_att[2][0] == '\0')
				break;

			if(strcmp(att.at_sick, "Y")==0){ 
				if(strcmp(att.at_code, "S11") == 0)
					sick_bal -= .5;
				else if(strcmp(att.at_code, "S12") == 0)
					sick_bal -= 1;
				else
					sick_bal -=
					  s_sth.s_items[item_no].s_units[2] /
					  sen_par.sn_num_hrs_day;
				if(sick_bal <= 0){ 
					retval = GetOption((char *)&s_sth,
					"Balance less that 0, Change (Y/N)" ,"YN");
	    				if(retval == YES) {
						s_sth.s_items[item_no].s_att[2][0] = 
						LV_CHAR;
						continue;	
					}
					else
						break;
				}
				else
					break;
			}
			if(strcmp(att.at_sckbank, "Y") == 0) {
				sick_bank -= s_sth.s_items[item_no].s_units[2] /
					sen_par.sn_num_hrs_day;
		 		if(sick_bank <= 0){ 
					fomen("Bank can't be less than zero");	get();
					s_sth.s_items[item_no].s_att[2][0] = LV_CHAR;
					continue;	
				}
				else
					break;
			}
			if(strcmp(att.at_vac, "Y")==0){ 
				vac_bal -= s_sth.s_items[item_no].s_units[2] /
					sen_par.sn_num_hrs_day;
		 		if(vac_bal <= 0){ 
					fomen("Vacation Balance less than zero");	get();
					break;
				}
				else
					break;
			}
			break;
		}

		for(;;) {
			retval = ReadCurFld(ATT4_FLD, ATT4_FLD,mode);
			if(retval < 0 || retval == RET_USER_ESC) return(retval);
	
			if(s_sth.s_items[item_no].s_att[3][0] == '\0')
				break;

			if(strcmp(att.at_sick, "Y")==0){ 
				if(strcmp(att.at_code, "S11") == 0)
					sick_bal -= .5;
				else if(strcmp(att.at_code, "S12") == 0)
					sick_bal -= 1;
				else
					sick_bal -=
					  s_sth.s_items[item_no].s_units[3] /
					  sen_par.sn_num_hrs_day;
				if(sick_bal <= 0){ 
					retval = GetOption((char *)&s_sth,
					"Balance less that 0, Change (Y/N)" ,"YN");
	    				if(retval == YES) {
						s_sth.s_items[item_no].s_att[3][0] = 
						LV_CHAR;
						continue;	
					}
					else
						break;
				}
				else
					break;
			}
			if(strcmp(att.at_sckbank, "Y") == 0) {
				sick_bank -= s_sth.s_items[item_no].s_units[3] /
					sen_par.sn_num_hrs_day;
		 		if(sick_bank <= 0){ 
					fomen("Bank can't be less than zero");	get();
					s_sth.s_items[item_no].s_att[3][0] = LV_CHAR;
					continue;	
				}
				else
					break;
			}
			if(strcmp(att.at_vac, "Y")==0){ 
				vac_bal -= s_sth.s_items[item_no].s_units[3] /
					sen_par.sn_num_hrs_day;
		 		if(vac_bal <= 0){ 
					fomen("Vacation Balance less than zero");	get();
					break;
				}
				else
					break;
			}
			break;
		}

		for(;;) {
			retval = ReadCurFld(ATT5_FLD, ATT5_FLD,mode);
			if(retval < 0 || retval == RET_USER_ESC) return(retval);
	
			if(s_sth.s_items[item_no].s_att[4][0] == '\0')
				break;

			if(strcmp(att.at_sick, "Y")==0){ 
				if(strcmp(att.at_code, "S11") == 0)
					sick_bal -= .5;
				else if(strcmp(att.at_code, "S12") == 0)
					sick_bal -= 1;
				else
					sick_bal -=
					  s_sth.s_items[item_no].s_units[4] /
					  sen_par.sn_num_hrs_day;
				if(sick_bal <= 0){ 
					retval = GetOption((char *)&s_sth,
					"Balance less that 0, Change (Y/N)" ,"YN");
	    				if(retval == YES) {
						s_sth.s_items[item_no].s_att[4][0] = 
						LV_CHAR;
						continue;	
					}
					else
						break;
				}
				else
					break;
			}
			if(strcmp(att.at_sckbank, "Y") == 0) {
				sick_bank -= s_sth.s_items[item_no].s_units[4] /
					sen_par.sn_num_hrs_day;
		 		if(sick_bank <= 0){ 
					fomen("Bank can't be less than zero");	get();
					s_sth.s_items[item_no].s_att[4][0] = LV_CHAR;
					continue;	
				}
				else
					break;
			}
			if(strcmp(att.at_vac, "Y")==0){ 
				vac_bal -= s_sth.s_items[item_no].s_units[4] /
					sen_par.sn_num_hrs_day;
		 		if(vac_bal <= 0){ 
					fomen("Vacation Balance less than zero");	get();
					break;
				}
				else
					break;
			}
			break;
		}

		for(;;) {
			retval = ReadCurFld(ATT6_FLD, ATT6_FLD,mode);
			if(retval < 0 || retval == RET_USER_ESC) return(retval);
	
			if(s_sth.s_items[item_no].s_att[5][0] == '\0')
				break;

			if(strcmp(att.at_sick, "Y")==0){ 
				if(strcmp(att.at_code, "S11") == 0)
					sick_bal -= .5;
				else if(strcmp(att.at_code, "S12") == 0)
					sick_bal -= 1;
				else
					sick_bal -=
					  s_sth.s_items[item_no].s_units[5] /
					  sen_par.sn_num_hrs_day;
				if(sick_bal <= 0){ 
					retval = GetOption((char *)&s_sth,
					"Balance less that 0, Change (Y/N)" ,"YN");
	    				if(retval == YES) {
						s_sth.s_items[item_no].s_att[5][0] = 
						LV_CHAR;
						continue;	
					}
					else
						break;
				}
				else
					break;
			}
			if(strcmp(att.at_sckbank, "Y") == 0) {
				sick_bank -= s_sth.s_items[item_no].s_units[5] /
					sen_par.sn_num_hrs_day;
		 		if(sick_bank <= 0){ 
					fomen("Bank can't be less than zero");	get();
					s_sth.s_items[item_no].s_att[5][0] = LV_CHAR;
					continue;	
				}
				else
					break;
			}
			if(strcmp(att.at_vac, "Y")==0){ 
				vac_bal -= s_sth.s_items[item_no].s_units[5] /
					sen_par.sn_num_hrs_day;
		 		if(vac_bal <= 0){ 
					fomen("Vacation Balance less than zero");	get();
					break;
				}
				else
					break;
			}
			break;
		}

		for(;;) {
			retval = ReadCurFld(ATT7_FLD, ATT7_FLD,mode);
			if(retval < 0 || retval == RET_USER_ESC) return(retval);
	
			if(s_sth.s_items[item_no].s_att[6][0] == '\0')
				break;

			if(strcmp(att.at_sick, "Y")==0){ 
				if(strcmp(att.at_code, "S11") == 0)
					sick_bal -= .5;
				else if(strcmp(att.at_code, "S12") == 0)
					sick_bal -= 1;
				else
					sick_bal -=
					  s_sth.s_items[item_no].s_units[6] /
					  sen_par.sn_num_hrs_day;
				if(sick_bal <= 0){ 
					retval = GetOption((char *)&s_sth,
					"Balance less that 0, Change (Y/N)" ,"YN");
	    				if(retval == YES) {
						s_sth.s_items[item_no].s_att[6][0] = 
						LV_CHAR;
						continue;	
					}
					else
						break;
				}
				else
					break;
			}
			if(strcmp(att.at_sckbank, "Y") == 0) {
				sick_bank -= s_sth.s_items[item_no].s_units[6] /
					sen_par.sn_num_hrs_day;
		 		if(sick_bank <= 0){ 
					fomen("Bank can't be less than zero");	get();
					s_sth.s_items[item_no].s_att[6][0] = LV_CHAR;
					continue;	
				}
				else
					break;
			}
			if(strcmp(att.at_vac, "Y")==0){ 
				vac_bal -= s_sth.s_items[item_no].s_units[6] /
					sen_par.sn_num_hrs_day;
		 		if(vac_bal <= 0){ 
					fomen("Vacation Balance less than zero");	get();
					break;
				}
				else
					break;
			}
			break;
		}
	}
	if(class.c_units != 0)
		rate_flg = 1;
	
	if(rate_flg == 1 && vac_flg == 0 && s_sth.s_items[item_no].s_rate!=0){
		/* Read Rate	*/
		if(SetDupBuffers(RATE_FLD, RATE_FLD,1)<0) 
			return(PROFOM_ERR);
		s_sth.s_items[item_no].s_rate = LV_DOUBLE;
		retval = ReadCurFld(RATE_FLD, RATE_FLD,mode);
		if(retval < 0 || retval == RET_USER_ESC) return(retval);

		if(s_sth.s_items[item_no].s_rate != 0){
			retval = Calc_Total(item_no);
		  	if(retval < 0){
		 	   	return(ERROR);
		 	}
		}
		if ( WriteFields((char *)&s_sth, TOTAL_FLD, TOTAL_FLD) < 0 )  
			return(-1);
	}

	/* Read Total	*/
/*	if(s_sth.s_items[item_no].s_total!=0){*/
		if(SetDupBuffers(TOTAL_FLD, TOTAL_FLD,1)<0) 
			return(PROFOM_ERR);
		s_sth.s_items[item_no].s_total = LV_DOUBLE;
		retval = ReadCurFld(TOTAL_FLD, TOTAL_FLD,mode);
		if(retval < 0 || retval == RET_USER_ESC) return(retval);
/*	}*/

	if(vac_flg == 0){
		/* Read Teacher Number */
		if(SetDupBuffers(TEACH_FLD, TEACH_FLD,1)<0) 
			return(PROFOM_ERR);
		s_sth.s_items[item_no].s_teach[0] = LV_CHAR;
		retval = ReadCurFld(TEACH_FLD, TEACH_FLD,mode);
		if(retval < 0 || retval == RET_USER_ESC) return(retval);
	
		/* Read Comment */
		if(SetDupBuffers(COMMENT_FLD, COMMENT_FLD,1)<0) 
			return(PROFOM_ERR);
		s_sth.s_items[item_no].s_comment[0] = LV_CHAR;
		retval = ReadCurFld(COMMENT_FLD, COMMENT_FLD,mode);
		if(retval < 0 || retval == RET_USER_ESC) return(retval);
	}

	return(NOERROR) ;
}	/* ReadItem() */
/*-----------------------------------------------------------------------*/ 
CheckTime(item_no)
int	item_no;
{
	int	retval;

	strcpy(time_rec.tm_numb,s_sth.s_emp);
	time_rec.tm_date = s_sth.s_pay_date;
	time_rec.tm_no = s_sth.s_items[item_no].s_no ;

	retval = get_ptime(&time_rec,BROWSE,0,e_mesg) ;
	if(retval < 0 && retval != UNDEF) {
		DispError((char *)&s_sth,e_mesg);
		return(retval);
	}
	return(retval);
}
/*-----------------------------------------------------------------------*/
/* Calculate the employee's salary or rate of pay */
/*static
CalcRate()
{
	int	retval;
	double	nbr_biweek_days = 10;
	double	temp_calc;

	strcpy(sen_par.sn_position,class.c_pos);
	sen_par.sn_eff_date = get_date();
	flg_reset(SEN_PAR);

	retval=get_n_sen_par(&sen_par,BROWSE,0,BACKWARD,e_mesg);
	if(retval < 0) {
		DispError((char *)&s_sth,e_mesg);
		if(retval == UNDEF){
			s_sth.s_items[0].s_rate = 0;
			return(NOERROR);
		}
		return(retval);
	}*/
	/* Units Per Year	*/
/*	temp_calc = ((nbr_biweek_days * sen_par.sn_num_hrs_day) *
		      pay_period.pp_numb * (emp_rec.em_perc / 100.0)); 
	
	temp_calc = D_Roundoff(temp_calc);
	
	if(temp_calc != 0)
		s_sth.s_items[0].s_rate = 
				D_Roundoff(class.c_yrly_inc / temp_calc);
	else
		s_sth.s_items[0].s_rate = 0;

	return(NOERROR);
}*/
/*----------------------------------------------------------------*/
/* Set Duplication buffers for fields 				  */
SetDupBuffers( firstfld, lastfld, value )
int	firstfld, lastfld;	/* field numbers range */
int	value;			/* ENABLE or DISABLE */
{
	int i ;

	for( i=firstfld; i<=lastfld; i+=100 )
		fomca1( i, 19, value);
	if( value==0 )
		return(0);
	sr.nextfld = firstfld;
	sr.endfld = lastfld;
	fomud( (char *)&s_sth );
	ret( err_chk(&sr) );

	return( 0 );
}
/*----------------------------------------------------------------*/
/* Validation function() for Key and Header fields when PROFOM returns
  RET_VAL_CHK */

Validation()
{
	int	i;
	int	retval;
	int	fld_no;
	int	item_no, st_fld;
	double	temp_calc;

	item_no = 0;
	switch(sr.curfld){
	case KEY_START:
		Right_Justify_Numeric(s_sth.s_emp,
			sizeof(s_sth.s_emp)-1);
		strcpy(emp_rec.em_numb,s_sth.s_emp);
		retval = get_employee(&emp_rec,BROWSE,0,e_mesg);
		if(retval < 0) {
			fomer("Employee Number Does not Exist");
			s_sth.s_emp[0] = LV_CHAR;
			return(ERROR);
		}
		strcpy(e_mesg,emp_rec.em_last_name);
		strcat(e_mesg,", ");
		strcat(e_mesg,emp_rec.em_first_name);
		strncpy(s_sth.s_emp_name,e_mesg,28);
		strcpy(s_sth.s_stat,emp_rec.em_status); 

		if ( WriteFields((char *)&s_sth,
					EMP_NAME, EMP_STATUS) < 0 ) 
			return(-1);
		strcpy(barg_unit.b_code,emp_rec.em_barg);
		barg_unit.b_date = get_date();
		flg_reset(BARG);

		retval = get_n_barg(&barg_unit,BROWSE,0,BACKWARD,e_mesg);
		if(retval == EFL ||
			strcmp(barg_unit.b_code, emp_rec.em_barg) != 0){
			sprintf(e_mesg,"Bargaining Unit does no exist: %s",
				emp_rec.em_barg);
  			DispError((char *)&s_sth,e_mesg);
			s_sth.s_emp[0] = LV_CHAR;
			return(-1);
		}
		if(retval < 0){
  			DispError((char *)&s_sth,e_mesg);
			s_sth.s_emp[0] = LV_CHAR;
  			return(-1);
		}
		seq_over(BARG);
		break;
	case KEY_END:
		break;
	case PAYPER_FLD:
		strcpy(pay_period.pp_code, barg_unit.b_pp_code);
		pay_period.pp_year = get_date() / 10000;
		flg_reset(PAY_PERIOD);

		retval = get_n_pay_per(&pay_period,BROWSE, 0,FORWARD, e_mesg) ;
		if(retval < 0 || 
		   strcmp(pay_period.pp_code, barg_unit.b_pp_code) != 0){
			fomer("Pay Period Number Does Not Exist");
			s_sth.s_items[item_no].s_pp = LV_SHORT;
			return(ERROR);
		}
		if(s_sth.s_items[item_no].s_pp == 0){
			fomer("Invalid Pay Period Number");
			s_sth.s_items[item_no].s_pp = LV_SHORT;
			return(ERROR);
		}
		seq_over(PAY_PERIOD);
		break;
	case WEEK_FLD:
		if((s_sth.s_items[item_no].s_week <= 0) ||
			 (s_sth.s_items[item_no].s_week >= 5)){ 
			fomer("Invalid Week Number");
			s_sth.s_items[item_no].s_week = LV_SHORT;
			return(ERROR);
		}
		break;
	case FUND_FLD:
		control.fund = s_sth.s_items[item_no].s_fund;
		retval = get_ctl(&control,BROWSE,0,e_mesg);
		if(retval < 0) {
			fomer("Fund Number Does not Exist");
			s_sth.s_items[item_no].s_fund = LV_SHORT;
			return(ERROR);
		}
		break;
	case CLASS_FLD:
		Right_Justify_Numeric(s_sth.s_items[item_no].s_class,
				sizeof(s_sth.s_items[item_no].s_class)-1);
		retval = GetClass(s_sth.s_items[item_no].s_class);
		if(retval == EFL){
			fomer(
			"Classification Code Does Not Exist - Please Re-enter");
			s_sth.s_items[item_no].s_class[0] = LV_CHAR;
		    	return(ERROR);
		}
	  	strcpy(s_sth.s_items[item_no].s_cl_desc,class.c_desc);
		break;
	case EARN_FLD:
		Right_Justify_Numeric(s_sth.s_items[item_no].s_earn,
			sizeof(s_sth.s_items[item_no].s_earn)-1);
		strcpy(earnings.ea_code,s_sth.s_items[item_no].s_earn);
		earnings.ea_date = s_sth.s_rundate;
		flg_reset(EARN);

		retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
		if((retval < 0 ||
	 	    strcmp(earnings.ea_code,
			s_sth.s_items[item_no].s_earn) != 0)){
			fomer("Earnings Code Does Not Exist - Please Re-enter");
			s_sth.s_items[item_no].s_earn[0] = LV_CHAR;
	    		return(ERROR);
	  	}
	  	strcpy(s_sth.s_items[item_no].s_ea_desc,earnings.ea_desc);
	  	break;
	case TRANS_FLD:
		Right_Justify_Numeric(s_sth.s_items[item_no].s_trans,
			sizeof(s_sth.s_items[item_no].s_trans)-1);
		strcpy(trans.tr_code,s_sth.s_items[item_no].s_trans);
		retval = get_trans(&trans,BROWSE,0,e_mesg);
		if(retval < 0) {
			fomer("Transaction Code Does not Exist");
			s_sth.s_items[item_no].s_trans[0] = LV_CHAR;
			return(ERROR);
		}
	  	strcpy(s_sth.s_items[item_no].s_tr_desc,trans.tr_desc);
		break;
	case EXP_FLD:
		Right_Justify_Numeric(s_sth.s_items[item_no].s_exp,
			sizeof(s_sth.s_items[item_no].s_exp)-1);
		strcpy(expense.ex_code,s_sth.s_items[item_no].s_exp);
		retval = get_exp(&expense,BROWSE,0,e_mesg);
		if(retval < 0) {
			fomer("Expense Code Does not Exist");
			s_sth.s_items[item_no].s_exp[0] = LV_CHAR;
			return(ERROR);
		}
	  	strcpy(s_sth.s_items[item_no].s_ex_desc,expense.ex_desc);
		break;
	case CC_FLD:
		Right_Justify_Numeric(s_sth.s_items[item_no].s_cc,
			sizeof(s_sth.s_items[item_no].s_cc)-1);
		school.sc_numb = s_sth.s_items[item_no].s_cc;
		retval = get_sch(&school,BROWSE,0,e_mesg);
		if(retval < 0) {
			fomer("Cost Center Number Does not Exist");
			s_sth.s_items[item_no].s_cc = LV_SHORT;
			return(ERROR);
		}
		strcpy(s_sth.s_items[item_no].s_cc_desc,school.sc_name);
		break;
	case ADJ_FLD:
		if((strcmp(s_sth.s_items[item_no].s_adj_flag,"A") != 0) &&
		     (strcmp(s_sth.s_items[item_no].s_adj_flag,"D") != 0)){ 	
			fomer("Invalid Entry");
			s_sth.s_items[item_no].s_adj_flag[0] = LV_CHAR;
			return(ERROR);
		}

	 	if(strcmp(s_sth.s_items[item_no].s_adj_flag,"A") == 0){
			for( i=0; i<7 ; i++) {
				s_sth.s_items[item_no].s_att[i][0] = '\0' ;
			}
			s_sth.s_items[item_no].s_rate = 0 ;
		}
		else{
			s_sth.s_items[item_no].s_rate = 0 ;
		}
		break;
	case ATT1_FLD:
		Right_Justify_Numeric(s_sth.s_items[item_no].s_att[0],
			sizeof(s_sth.s_items[item_no].s_att[0])-1);
		if(s_sth.s_items[item_no].s_att[0][0] == '\0'){
			sr.curfld += 100;
			break;
		}
	  	retval = Att_Val(item_no,0);
		if(retval < 0) {
			s_sth.s_items[item_no].s_att[0][0] = LV_CHAR;
			return(ERROR);
		}
		break;
	case ATT2_FLD:
		Right_Justify_Numeric(s_sth.s_items[item_no].s_att[1],
			sizeof(s_sth.s_items[item_no].s_att[1])-1);
		if(s_sth.s_items[item_no].s_att[1][0] == '\0'){
			sr.curfld += 100;
			break;
		}
	  	retval = Att_Val(item_no,1);
		if(retval < 0) {
			s_sth.s_items[item_no].s_att[1][0] = LV_CHAR;
			return(ERROR);
		}
		break;
	case ATT3_FLD:
		Right_Justify_Numeric(s_sth.s_items[item_no].s_att[2],
			sizeof(s_sth.s_items[item_no].s_att[2])-1);
		if(s_sth.s_items[item_no].s_att[2][0] == '\0'){
			sr.curfld += 100;
			break;
		}
	  	retval = Att_Val(item_no,2);
		if(retval < 0) {
			s_sth.s_items[item_no].s_att[2][0] = LV_CHAR;
			return(ERROR);
		}
		break;
	case ATT4_FLD:
		Right_Justify_Numeric(s_sth.s_items[item_no].s_att[3],
			sizeof(s_sth.s_items[item_no].s_att[3])-1);
		if(s_sth.s_items[item_no].s_att[3][0] == '\0'){
			sr.curfld += 100;
			break;
		}
	  	retval = Att_Val(item_no,3);
		if(retval < 0) {
			s_sth.s_items[item_no].s_att[3][0] = LV_CHAR;
			return(ERROR);
		}
		break;
	case ATT5_FLD:
		Right_Justify_Numeric(s_sth.s_items[item_no].s_att[4],
			sizeof(s_sth.s_items[item_no].s_att[4])-1);
		if(s_sth.s_items[item_no].s_att[4][0] == '\0'){
			sr.curfld += 100;
			break;
		}
	  	retval = Att_Val(item_no,4);
		if(retval < 0) {
			s_sth.s_items[item_no].s_att[4][0] = LV_CHAR;
			return(ERROR);
		}
		break;
	case ATT6_FLD:
		Right_Justify_Numeric(s_sth.s_items[item_no].s_att[5],
			sizeof(s_sth.s_items[item_no].s_att[5])-1);
		if(s_sth.s_items[item_no].s_att[5][0] == '\0'){
			sr.curfld += 100;
			break;
		}
  		retval = Att_Val(item_no,5);
		if(retval < 0) {
			s_sth.s_items[item_no].s_att[5][0] = LV_CHAR;
			return(ERROR);
		}
		break;
	case ATT7_FLD:
		Right_Justify_Numeric(s_sth.s_items[item_no].s_att[6],
			sizeof(s_sth.s_items[item_no].s_att[6])-1);
		if(s_sth.s_items[item_no].s_att[6][0] == '\0'){
			sr.curfld += 100;
			break;
		}
	  	retval = Att_Val(item_no,6);
		if(retval < 0) {
			s_sth.s_items[item_no].s_att[6][0] = LV_CHAR;
				return(ERROR);
		}
		break;
	case RATE_FLD:
		if(s_sth.s_items[item_no].s_rate != 0){
  		    retval = Calc_Total(item_no);
  		    if(retval < 0)
 		   	return(ERROR);
		}
		break;
	case TEACH_FLD:
		if(s_sth.s_items[item_no].s_teach[0] == '\0'){
			sr.curfld += 100;
			break;
		}
		Right_Justify_Numeric(s_sth.s_items[item_no].s_teach,
			sizeof(s_sth.s_items[item_no].s_teach)-1);
		strcpy(emp_rec.em_numb,s_sth.s_items[item_no].s_teach);
		retval = get_employee(&emp_rec,BROWSE,0,e_mesg);
		if(retval < 0) {
			fomer("Employee Number Does not Exist");
			s_sth.s_items[item_no].s_teach[0] = LV_CHAR;
			return(ERROR);
		}
		strcpy(e_mesg,emp_rec.em_last_name);
		strcat(e_mesg,", ");
		strcat(e_mesg,emp_rec.em_first_name);
		strncpy(s_sth.s_items[item_no].s_t_desc,e_mesg,28);

		Right_Justify_Numeric(s_sth.s_emp,
			sizeof(s_sth.s_emp)-1);

		strcpy(emp_rec.em_numb,s_sth.s_emp);
		retval = get_employee(&emp_rec,BROWSE,0,e_mesg);
		if(retval < 0) {
			fomer("Employee Number Does not Exist");
			s_sth.s_items[item_no].s_teach[0] = LV_CHAR;
			return(ERROR);
		}
		if ( WriteFields((char *)&s_sth,
					TEACH_FLD, TEACH_FLD+100) < 0 ) 
			return(-1);
		break;
	default:
#ifdef ENGLISH
		sprintf(e_mesg,"No Validity Check for Field#  %d",sr.curfld);
#else
		sprintf(e_mesg,"Pas de controle de validite pour le Champ#  %d",sr.curfld);
#endif

		fomen(e_mesg);
		get();
		return(ERROR) ;
	}	/* Switch sr.curfld */

	return(NOERROR) ;
}	/* Validation() */
/*----------------------------------------------------------------*/
/* Validation function() for Units				*/

Calc_Total(item_no)
int	item_no;
{
	int	i;
	int	retval;
	double	total_units;
	double	temp_total;

	strcpy(earnings.ea_code,s_sth.s_items[item_no].s_earn);
	earnings.ea_date = s_sth.s_rundate;
	flg_reset(EARN);

	retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
	if(retval < 0){
		fomer("Earnings Code Does Not Exist - Please Re-enter");
	    	return(ERROR);
	}

	total_units = 0;
	if(earnings.ea_lump_sum[0] == 'N') {
		for( i=0; i<7 ; i++) {
		 	total_units += s_sth.s_items[item_no].s_units[i];
		}
		if(strcmp(s_sth.s_items[item_no].s_adj_flag,
				DELETE) == 0) total_units = total_units * (-1);
		if(strcmp(earnings.ea_type ,"P") == 0){ 
		   temp_total = (total_units * 
			s_sth.s_items[item_no].s_rate);   
			
		}
		else if(strcmp(earnings.ea_type ,"F") == 0){
			temp_total = (total_units *
			s_sth.s_items[item_no].s_rate) + earnings.ea_amount;
		}
		s_sth.s_items[item_no].s_total = D_Roundoff(temp_total);
	}

	return(NOERROR);
}
/*----------------------------------------------------------------*/
/* Validation function() for Attendance codes.			*/

Att_Val(item_no,unit)
int	item_no;
int	unit;
{
	int	retval;

 	if(strcmp(pay_param.pr_att_pay,"Y") == 0){

		strcpy(att.at_code,s_sth.s_items[item_no].s_att[unit]);
		retval = get_att(&att,BROWSE,1,e_mesg);
		if(retval < 0) {
			fomer("Attendance Code Does not Exist");
			return(ERROR);
		}
	}
	return(NOERROR);
}

/*----------------------------------------------------------------*/
/* Show Help Windows, if applicable, when user gives ESC-H in key
   and header fields */

WindowHelp()
{
	int	i,retval,fld_no,item_no;
	int	st_fld;
	long	tmp_date;
	double temp_calc;

	tmp_date = 0;
	item_no = 0;

	switch(sr.curfld){
	case EMP_FLD:
		retval = emp_hlp(s_sth.s_emp,7,13);
		if(retval == DBH_ERR) return(retval);
		if(retval >= 0) redraw();
		if(retval == 0) return(ERROR);
		if(retval < 0) return(ERROR);
		strcpy(emp_rec.em_numb,s_sth.s_emp);
		retval = get_employee(&emp_rec,BROWSE,0,e_mesg);
		if(retval < 0) {
			fomer("Employee Number Does not Exist");
			s_sth.s_emp[0] = LV_CHAR;
			return(ERROR);
		}
		strcpy(e_mesg,emp_rec.em_last_name);
		strcat(e_mesg,", ");
		strcat(e_mesg,emp_rec.em_first_name);
		strncpy(s_sth.s_emp_name,e_mesg,28);
		strcpy(s_sth.s_stat,emp_rec.em_status); 

		if ( WriteFields((char *)&s_sth,
					EMP_NAME, EMP_STATUS) < 0 ) 
			return(-1);

		strcpy(barg_unit.b_code,emp_rec.em_barg);
		barg_unit.b_date = get_date();
		flg_reset(BARG);

		retval = get_n_barg(&barg_unit,BROWSE,0,BACKWARD,e_mesg);
		if(retval == EFL ||
			strcmp(barg_unit.b_code, emp_rec.em_barg) != 0){
			sprintf(e_mesg,"Bargaining Unit does no exist: %s",
				emp_rec.em_barg);
  			DispError((char *)&s_sth,e_mesg);
			s_sth.s_emp[0] = LV_CHAR;
			return(-1);
		}
		if(retval < 0){
  			DispError((char *)&s_sth,e_mesg);
			s_sth.s_emp[0] = LV_CHAR;
  			return(ERROR);
		}
		seq_over(BARG);
		break;

	case CLASS_FLD:
		  retval = class_hlp(s_sth.s_items[item_no].s_class,
				&tmp_date,7,13);
		  if(retval == DBH_ERR) return(retval);
		  if(retval >= 0) redraw();
		  if(retval == 0) return(ERROR);
		  if(retval < 0) return(ERROR);
		  retval = GetClass(s_sth.s_items[item_no].s_class);
		  if(retval == EFL){
		    fomer("Classification Code Does Not Exist - Please Re-enter");
			s_sth.s_items[item_no].s_class[0] = LV_CHAR;
		    	return(ERROR);
		  }
	  	  strcpy(s_sth.s_items[item_no].s_cl_desc,class.c_desc);
	
		  break;

	case EARN_FLD:
		  retval = earn_hlp("\0",s_sth.s_items[item_no].s_earn,
				7,13);
		  if(retval == DBH_ERR) return(retval);
		  if(retval >= 0) redraw();
		  if(retval == 0) return(ERROR);
		  if(retval < 0) return(ERROR);
		  strcpy(earnings.ea_code,s_sth.s_items[item_no].s_earn);
		  earnings.ea_date = s_sth.s_rundate;
		  flg_reset(EARN);

		  retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
		  if((retval < 0 ||
		      strcmp(earnings.ea_code,
				s_sth.s_items[item_no].s_earn) != 0)){
			fomer("Earnings Code Does Not Exist - Please Re-enter");
			s_sth.s_items[item_no].s_earn[0] = LV_CHAR;
		    	return(ERROR);
		  }
	  	  strcpy(s_sth.s_items[item_no].s_ea_desc,earnings.ea_desc);
		  break;

	case TRANS_FLD:
			retval = trans_hlp(s_sth.s_items[item_no].s_trans,7,13);
			if(retval == DBH_ERR) return(retval);
			if(retval >= 0) redraw();
			if(retval == 0) return(ERROR);
			if(retval < 0) return(ERROR);
			strcpy(trans.tr_code,s_sth.s_items[item_no].s_trans);
			retval = get_trans(&trans,BROWSE,0,e_mesg);
			if(retval < 0) {
				fomer("Transaction Code Does not Exist");
				s_sth.s_items[item_no].s_trans[0] = LV_CHAR;
				return(ERROR);
			}
	  		strcpy(s_sth.s_items[item_no].s_tr_desc,trans.tr_desc);
			break;

	case EXP_FLD:
			retval = exp_hlp(s_sth.s_items[item_no].s_exp,7,13);
			if(retval == DBH_ERR) return(retval);
			if(retval >= 0) redraw();
			if(retval == 0) return(ERROR);
			if(retval < 0) return(ERROR);
			Right_Justify_Numeric(s_sth.s_items[item_no].s_exp,
				sizeof(s_sth.s_items[item_no].s_exp)-1);
			strcpy(expense.ex_code,s_sth.s_items[item_no].s_exp);
			retval = get_exp(&expense,BROWSE,0,e_mesg);
			if(retval < 0) {
				fomer("Expense Code Does not Exist");
				s_sth.s_items[item_no].s_exp[0] = LV_CHAR;
				return(ERROR);
			}
		  	strcpy(s_sth.s_items[item_no].s_ex_desc,expense.ex_desc);
			break;

	case CC_FLD:
			retval = sch_hlp(&s_sth.s_items[item_no].s_cc,7,13);
			if(retval == DBH_ERR) return(retval);
			if(retval >= 0) redraw();
			if(retval == 0) return(ERROR);
			if(retval < 0) return(ERROR);
			school.sc_numb = s_sth.s_items[item_no].s_cc;
			retval = get_sch(&school,BROWSE,0,e_mesg);
			if(retval < 0) {
				fomer("Cost Center Number Does not Exist");
				s_sth.s_items[item_no].s_cc = LV_SHORT;
				return(ERROR);
			}
			strcpy(s_sth.s_items[item_no].s_cc_desc,school.sc_name);
			break;

	case TEACH_FLD:
			retval = emp_hlp(s_sth.s_items[item_no].s_teach,7,13);
			if(retval == DBH_ERR) return(retval);
			if(retval >= 0) redraw();
			if(retval == 0) return(ERROR);
			if(retval < 0) return(ERROR);
			strcpy(emp_rec.em_numb,s_sth.s_items[item_no].s_teach);
			retval = get_employee(&emp_rec,BROWSE,0,e_mesg);
			if(retval < 0) {
				fomer("Employee Number Does not Exist");
				s_sth.s_items[item_no].s_teach[0] = LV_CHAR;
				return(ERROR);
			}
			Right_Justify_Numeric(s_sth.s_items[item_no].s_teach,
				sizeof(s_sth.s_items[item_no].s_teach)-1);
			strcpy(e_mesg,emp_rec.em_last_name);
			strcat(e_mesg,", ");
			strcat(e_mesg,emp_rec.em_first_name);
			strncpy(s_sth.s_items[item_no].s_t_desc,e_mesg,28);

			Right_Justify_Numeric(s_sth.s_emp,
				sizeof(s_sth.s_emp)-1);

			strcpy(emp_rec.em_numb,s_sth.s_emp);
			retval = get_employee(&emp_rec,BROWSE,0,e_mesg);
			if(retval < 0) {
				fomer("Employee Number Does not Exist");
				s_sth.s_items[item_no].s_teach[0] = LV_CHAR;
				return(ERROR);
			}
			if ( WriteFields((char *)&s_sth,
					TEACH_FLD, TEACH_FLD+100) < 0 ) 
			return(-1);
			break;
	case ATT1_FLD:
			GetAtHlp(item_no,0);
			break;
	case ATT2_FLD:
			GetAtHlp(item_no,1);
			break;
	case ATT3_FLD:
			GetAtHlp(item_no,2);
			break;
	case ATT4_FLD:
			GetAtHlp(item_no,3);
			break;
	case ATT5_FLD:
			GetAtHlp(item_no,4);
			break;
	case ATT6_FLD:
			GetAtHlp(item_no,5);
			break;
	case ATT7_FLD:
			GetAtHlp(item_no,6);
			break;

	default :
			fomer("No Help Window for This Field");
			break;
	}	

	return(NOERROR) ;
}	/* HdrAndKeyWindowHelp() */
/*-----------------------------------------------------------------------*/
GetAtHlp(item_no,i)
int	item_no,i;
{
	int	retval;

	retval = att_hlp(s_sth.s_items[item_no].s_att[i],7,13);
	if(retval == DBH_ERR) return(retval);
	if(retval >= 0) redraw();
	if(retval == 0) return(ERROR);
	if(retval < 0) return(ERROR);
	strcpy(att.at_code,s_sth.s_items[item_no].s_att[i]);

	retval = get_att(&att,BROWSE,1,e_mesg);
	if(retval < 0) {
		fomer(e_mesg);
		s_sth.s_items[item_no].s_att[i][0] = LV_CHAR;
		return(ERROR);
	}
	return(NOERROR);
}

/*-----------------------------------------------------------------------*/
/* Take the confirmation from user for the items part of the screen      */
/*-----------------------------------------------------------------------*/

ConfirmItems()
{
	int	err ;

	/* Options:
	     YSLNPC
	*/

	for( ; ; ) {
	    if(s_sth.s_fn[0] == DELETE) {
#ifdef ENGLISH
			err = GetOption((char *)&s_sth,"Y(es), C(ancel)","YC");
#else
			err = GetOption((char *)&s_sth,"O(ui), A(nnul)","OA");
#endif 
	    }
	    else if(s_sth.s_fn[0] != INQUIRE) {
		if(strcmp(pay_param.pr_prov,"NB") == 0) {
#ifdef ENGLISH
			err = GetOption((char *)&s_sth,
		"Y(es), A(dd), V(ac), S(creen), D(el), R(ctvt), N(ext), P(rev), C(an)"
		,"YAVSLDRNPC");
#else
			err = GetOption((char *)&s_sth,
		"O(ui), R(jter), V(ac), S(creen), E(lim), V(ifier), S(uiv), P(rec), A(nnul)"
		,"ORVSLSEVPA");
#endif
		}
		else {
#ifdef ENGLISH
			err = GetOption((char *)&s_sth,
		"Y(es), A(dd), S(creen), D(el), R(ctvt), N(ext), P(rev), C(an)"
		,"YASLDRNPC");
#else
			err = GetOption((char *)&s_sth,
		"O(ui), R(jter), S(creen), E(lim), V(ifier), S(uiv), P(rec), A(nnul)"
		,"ORSLSEVPA");
#endif
		}
	    }
	    else {
#ifdef ENGLISH
			err = GetOption((char *)&s_sth,
		"Y(es), N(ext), P(rev)","YNP");
#else
			err = GetOption((char *)&s_sth,
		"O(ui), S(uiv), P(rec)" ,"OSP");
#endif
	    }
	    switch(err) {
	    case  YES  :
		return(YES);
	    case  ADDITEMS:
		err = AddItems();
		break;
	    case  VACITEMS:
		err = VacItems();
		break;
	    case  SCREENEDIT:
		err = ScreenEdit();
		break;
	    case  DELITEM:
	    case  REACTITEM:
		err = ChangeStatus(err);
		break;
	    case  NEXT:
		if(CurPage == CurLast || CurLast == '\0') {
#ifdef ENGLISH
			fomer("No More Pages....");
#else
			fomer("Plus de pages....");
#endif
			continue;
		}
		CurPage = CurPage->NextPage ;
		err = ShowItems(CurPage);
		break;
	    case  PREV:
		if(CurLast == '\0' || CurPage == FirstPage) {
#ifdef ENGLISH
			fomer("No More Pages....");
#else
			fomer("Plus de pages....");
#endif
			continue;
		}
		CurPage = CurPage->PrevPage ;
		err = ShowItems(CurPage);
		break;
	    case  CANCEL :
#ifdef ENGLISH
		err = GetOption((char *)&s_sth,
				"Confirm the Cancel (Y/N)?", "YN") ;
#else
		err = GetOption((char *)&s_sth,
				"Confirmer l'annulation (O/N)?", "ON") ;
#endif
		if(err == YES) return(CANCEL) ;
		break ;
	    }	/* switch err */

	    if(err == PROFOM_ERR) return(err) ;
	    if(err == DBH_ERR) return(err) ;
	}	/* for(; ; ) */
}	/* ConfirmItems() */
/*---------------------------------------------------------------------*/
/* Change screen.  Allows editing of the students on the screen        */
/*---------------------------------------------------------------------*/

ScreenEdit()
{
     	int i;
	int retval;

	/* make copy of screen incase user presses ESC-F */
	scpy((char *)&image,(char *)&s_sth,sizeof(s_sth));

#ifdef ENGLISH
	strcpy(s_sth.s_mesg,"Press ESC-F to Terminate");
#else
	strcpy(s_sth.s_mesg,"Appuyer sur ESC-F pour terminer");
#endif
	DispMesgFld((char *)&s_sth);

	if(SetDupBuffers(ITEM_ST_FLD, END_FLD - 200,1)<0) return(PROFOM_ERR);

	for(i=0;i<CurPage->NoItems;i++) {
		if(strcmp(CurPage->Items[i].s_status,INACTIVE) ==0){
			continue;
		}
		retval = ReadItem(i,UPDATE,0);
		if(retval < 0 && retval != RET_USER_ESC) {
			return(retval);
		}

		if(retval == RET_USER_ESC) 
			return(retval);

		scpy((char*)&(CurPage->Items[i]), 
		     (char*)&(s_sth.s_items[i]),sizeof(S_item)) ;
		if(s_sth.s_fn[0] == CHANGE) {
			CurPage->I_Status[i][0] = CHANGE;
		}
	}

     	s_sth.s_mesg[0] = HV_CHAR ;
     	DispMesgFld((char *)&s_sth);

	if(SetDupBuffers(ITEM_ST_FLD, END_FLD-200,0)<0) return(PROFOM_ERR);

	return(NOERROR);
}	/* ScreenEdit() */
/*------------------------------------------------------------------------*/

ChangeStatus(status)
int	status;
{
	int	retval;
	int	st_fld, end_fld;

	/* Get The Field to Be Modified */
#ifdef	ENGLISH
	strcpy(s_sth.s_mesg,"Enter RETURN to Terminate Edit");
#else
	strcpy(s_sth.s_mesg,"Appuyer sur RETURN pour terminer l'ajustement");
#endif
	DispMesgFld((char *)&s_sth); ;
        
     	for (; ;) {
		s_sth.s_field = LV_SHORT;
		retval = ReadFields((char *)&s_sth,CHG_FLD,CHG_FLD,
			(int (*)())'\0',(int (*)())'\0', 1);

		if (retval < 0) return(-1);
		if (retval == RET_USER_ESC) break;	/* User enter ESC-F */

       		if (s_sth.s_field == 0 ) break;  /* Finished changing fields */
		if(s_sth.s_items[0].s_no != s_sth.s_field){
			fomer("Invalid Item Number");
			continue;
		}

		st_fld  = STATUS_FLD;
		end_fld  = STATUS_FLD;

		if(status == DELITEM) {
			if(strcmp(s_sth.s_items[0].s_status,
			   INACTIVE)==0) {
				fomer("Item is Already Deleted");
			}
			else {
				strcpy(s_sth.s_items[0].s_status,
			   		INACTIVE);
			}
		}
		else {
			if(strcmp(s_sth.s_items[0].s_status,
			   ACTIVE)==0) {
				fomer("Item is Already Active");
			}
			else {
				strcpy(s_sth.s_items[0].s_status,
			   		ACTIVE);
			}
		}
		/* Update Linked List */
		scpy((char*)&(CurPage->Items[0]), 
		     (char*)&(s_sth.s_items[0]),sizeof(S_item)) ;
		
		ret(WriteFields((char *)&s_sth,st_fld,end_fld));
	}

     	s_sth.s_field = HV_SHORT ;
	if ( WriteFields((char *)&s_sth,CHG_FLD, CHG_FLD) < 0 ) return(-1);

	return(NOERROR);
}
/*------------------------------------------------------------------------*/
/* Move High values to all data fields and clear the screen */

ClearScreen()
{
	int	i;

	/* Move High Values to Hedaer part */
	s_sth.s_emp_name[0] = HV_CHAR;
	s_sth.s_stat[0] = HV_CHAR;
	s_sth.s_page = HV_SHORT;
	
	/* Move High Values to All items */
	for(i = 0 ; i < PAGESIZE ; i++)
		InitItem(i,HV_CHAR,HV_SHORT,HV_DOUBLE);

	ret( WriteFields((char *)&s_sth,ITEM_ST_FLD, (END_FLD - 200)) );

	return(NOERROR);
}	/* ClearScreen() */
/*-------------------------------------------------------------------------*/
/* Initialize Given screen item with either Low values or High values */

InitItem(item_no, t_char, t_short, t_double)
int	item_no ;
char	t_char ;
short	t_short ;
double 	t_double ;
{
	int	i;

	s_sth.s_items[item_no].s_no = t_short ;
	s_sth.s_items[item_no].s_pp = t_short ;
	s_sth.s_items[item_no].s_week = t_short ;
	s_sth.s_items[item_no].s_fund = t_short ;
	s_sth.s_items[item_no].s_class[0] = t_char ;
	s_sth.s_items[item_no].s_earn[0] = t_char ;
	s_sth.s_items[item_no].s_trans[0] = t_char ;
	s_sth.s_items[item_no].s_exp[0] = t_char ;
	s_sth.s_items[item_no].s_cc = t_short ;
	if( t_char == HV_CHAR ) {
		s_sth.s_items[item_no].s_cl_desc[0] = t_char ;
		s_sth.s_items[item_no].s_ea_desc[0] = t_char ;
		s_sth.s_items[item_no].s_tr_desc[0] = t_char ;
		s_sth.s_items[item_no].s_ex_desc[0] = t_char ;
		s_sth.s_items[item_no].s_cc_desc[0] = t_char ;
	}
	s_sth.s_items[item_no].s_adj_flag[0] = t_char ;
	for( i=0; i<7 ; i++) {
		s_sth.s_items[item_no].s_units[i] = t_double ;
		s_sth.s_items[item_no].s_att[i][0] = t_char ;
	}
	s_sth.s_items[item_no].s_rate = t_double ;
	s_sth.s_items[item_no].s_total = t_double ;
	s_sth.s_items[item_no].s_teach[0] = t_char ;
	if( t_char == HV_CHAR ) {
		s_sth.s_items[item_no].s_t_desc[0] = t_char ;
	}
	else {
		s_sth.s_items[item_no].s_t_desc[0] = HV_CHAR ;
	}
	if( strcmp(pay_param.pr_prov,"NB") == 0 )
		s_sth.s_items[item_no].s_comment[0] = t_char ;
	else
		s_sth.s_items[item_no].s_comment[0] = t_char ;
	s_sth.s_items[item_no].s_status[0] = t_char ;

	return(NOERROR) ;
}	/* Inititem() */
/* Free the linked list */

static
FreeList()	
{
	int 	i;

	/* clear the screen items from linked list */

	for(CurPage = FirstPage;CurPage;CurPage = CurPage->NextPage){

		for( i=0; i <= PAGESIZE; i++) {
			if(i >= CurPage->NoItems) break;
			CurPage->Items[i].s_pp = HV_SHORT;
		}
	}

	for( CurPage=LastPage; CurPage; CurPage=LastPage){
		LastPage=LastPage->PrevPage;
		free((char *)CurPage );
	}

	FirstPage = NULL;

	return(NOERROR);
}
/*--------------------------------------------------------------*/
GetPos(pos)
char	*pos;
{
	int	retval;

	strcpy(position.p_code,pos);

	retval = get_position(&position,BROWSE,0,e_mesg);
	if(retval < 0) {
		DispError((char *)&s_sth,e_mesg);
	}

	return(NOERROR);
}
/*--------------------------------------------------------------*/
GetEarn()
{
	int	retval;

	strcpy(earnings.ea_code,time_rec.tm_earn);
	earnings.ea_date = s_sth.s_rundate;
	flg_reset(EARN);

	retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
	if(retval != NOERROR){
	  if(retval == EFL || 
	  strcmp(earnings.ea_code,time_rec.tm_earn) != 0)
		 return(NOERROR);
	    DispError((char *)&s_sth,e_mesg) ;
	}

	return(NOERROR);
}
/*--------------------------------------------------------------*/
GetClass(class_rec)
char	*class_rec;
{
	int	retval;

	strcpy(class.c_code,class_rec);
	class.c_date = s_sth.s_rundate;
	flg_reset(CLASSIFICATION);

	retval = get_n_class(&class,BROWSE,0,BACKWARD,e_mesg);
	if(retval < 0 && retval != EFL){
		DispError((char *)&s_sth, e_mesg);
		return(ERROR);
	}
	if((strcmp(class.c_code,class_rec) != 0) || retval == EFL){
	    	return(EFL);
	}
	return(NOERROR);
}
/*------------------------------------------------------------*/
DispFld(item_no)
int	item_no;
{
	int	i;
	int	retval;

	strcpy(barg_unit.b_code,emp_rec.em_barg);
	barg_unit.b_date = get_date();
	flg_reset(BARG);

	retval = get_n_barg(&barg_unit,BROWSE,0,BACKWARD,e_mesg);
	if(retval == EFL ||
		strcmp(barg_unit.b_code, emp_rec.em_barg) != 0){
  		DispError((char *)&s_sth,"Bargaining Unit does not Exist");
		return(NOERROR);
	}
	if(retval < 0){
  		DispError((char *)&s_sth,e_mesg);
  		return(ERROR);
	}
	seq_over(BARG);

	strcpy(pay_per_it.ppi_code, barg_unit.b_pp_code);
	pay_per_it.ppi_st_date = s_sth.s_pay_date;
	flg_reset(PAY_PER_ITEM);

	retval = get_n_pp_it(&pay_per_it,BROWSE, 1, BACKWARD, e_mesg) ;
	if(retval == EFL ||
	      strcmp(pay_per_it.ppi_code, barg_unit.b_pp_code) != 0){ 
  		DispError((char *)&s_sth,"Pay Period Item does not Exist");
		return(NOERROR);
	}
	if(retval < 0){
  		DispError((char *)&s_sth,e_mesg);
  		return(ERROR);
	}
	seq_over(PAY_PER_ITEM);

	if(s_sth.s_fn[0] == CHANGE) {
		strcpy(time_rec.tm_numb,s_sth.s_emp);
		time_rec.tm_date = s_sth.s_pay_date;
		time_rec.tm_no = 9999;
		flg_reset(TIME);

		retval = get_n_ptime(&time_rec,BROWSE,0,BACKWARD,e_mesg);

		if(retval != NOERROR && retval != EFL) {
			fomen(e_mesg);
			get();
			return(retval);
		}
		if((strcmp(time_rec.tm_numb,s_sth.s_emp)==0) &&
   		  (time_rec.tm_date == s_sth.s_pay_date )) {
			s_sth.s_items[item_no].s_no = time_rec.tm_no + 1;
		}
		else {
			s_sth.s_items[item_no].s_no = 1;
		}
		if(retval == EFL) {
			s_sth.s_items[item_no].s_no = 1;
		}
	}
	else {
		s_sth.s_items[item_no].s_no = s_sth.s_page;
	}

	if(s_sth.s_items[item_no].s_no == CurPage->Items[item_no].s_no)
		s_sth.s_items[item_no].s_no++;

	s_sth.s_items[item_no].s_pp = pay_per_it.ppi_numb;
	s_sth.s_items[item_no].s_week = 1 ;
	s_sth.s_items[item_no].s_fund = 1 ;

	/* Get Classification Code	*/
/*	strcpy(s_sth.s_items[item_no].s_class, emp_rec.em_class) ;
	retval = GetClass(s_sth.s_items[item_no].s_class);
	if(retval == EFL){
		fomer("Classification Code Does Not Exist - Please Re-enter"); 
		s_sth.s_items[item_no].s_class[0] = LV_CHAR;
	    	return(ERROR);
	}
	strcpy(s_sth.s_items[item_no].s_cl_desc, class.c_desc) ;*/

	/* Get Earnings Code	*/
	strcpy(s_sth.s_items[item_no].s_earn, pay_param.pr_reg_earn) ;
	strcpy(earnings.ea_code,s_sth.s_items[item_no].s_earn);
	earnings.ea_date = s_sth.s_rundate;
	flg_reset(EARN);

	retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
	if((retval < 0 ||
		strcmp(earnings.ea_code,
				s_sth.s_items[item_no].s_earn) != 0)){
		fomer("Earnings Code Does Not Exist");
	    	return(ERROR);
	}
	strcpy(s_sth.s_items[item_no].s_ea_desc,earnings.ea_desc);

	/* Get Transaction Code	*/
/*	strcpy(trans_item.tri_class,s_sth.s_items[item_no].s_class);
	strcpy(trans_item.tri_earn,s_sth.s_items[item_no].s_earn);

	retval = get_trans_it(&trans_item,BROWSE,1,e_mesg);
	if(retval < 0) {
	  	fomer("Transaction Code Does not Exist");
	}
	strcpy(s_sth.s_items[item_no].s_trans,trans_item.tri_code);
	strcpy(trans.tr_code,s_sth.s_items[item_no].s_trans);
	retval = get_trans(&trans,BROWSE,0,e_mesg);
	if(retval < 0) {
		DispError((char *)&s_sth,
				"Transaction Code Does not Exist");
		if(retval != UNDEF) return(ERROR);
	}
	strcpy(s_sth.s_items[item_no].s_tr_desc,trans.tr_desc);*/

	/* Get Expense Code	*/
/*	strcpy(exp_item.exi_class,s_sth.s_items[item_no].s_class);
	strcpy(exp_item.exi_earn,s_sth.s_items[item_no].s_earn);

	retval = get_exp_it(&exp_item,BROWSE,1,e_mesg);
	if(retval < 0) {
	  	fomer("Transaction Code Does not Exist");
	}
	strcpy(s_sth.s_items[item_no].s_exp,exp_item.exi_code);

	strcpy(expense.ex_code,s_sth.s_items[item_no].s_exp);
	retval = get_exp(&expense,BROWSE,0,e_mesg);
	if(retval < 0) {
		DispError((char *)&s_sth,
			"Expense Code Does not Exist");
		if(retval != UNDEF) return(ERROR);
	}
	strcpy(s_sth.s_items[item_no].s_ex_desc,expense.ex_desc);*/

	/* Get Cost Center	*/
	s_sth.s_items[item_no].s_cc = emp_rec.em_cc;

	school.sc_numb = s_sth.s_items[item_no].s_cc;
	retval = get_sch(&school,BROWSE,0,e_mesg);
	if(retval < 0) {
		fomer("Cost Center Number Does not Exist");
	}
	strcpy(s_sth.s_items[item_no].s_cc_desc,school.sc_name);

	GetPos(emp_rec.em_pos);
	if(strcmp(pay_param.pr_prov,"NB") == 0) {
		if((strcmp(position.p_type,"FT") == 0) ||
		  (strcmp(position.p_type,"PT") == 0))
			s_sth.s_items[item_no].s_adj_flag[0] = 'A';
	}
	else
		s_sth.s_items[item_no].s_adj_flag[0] = HV_CHAR;

	for( i=0; i<7 ; i++) {
		s_sth.s_items[item_no].s_units[i] = 0 ;
		if(strcmp(pay_param.pr_prov,"NB") == 0)
			s_sth.s_items[item_no].s_att[i][0] = '\0' ;
		else
			s_sth.s_items[item_no].s_att[i][0] = '\0' ;
	}

	s_sth.s_items[item_no].s_rate = 0;
	s_sth.s_items[item_no].s_total = 0 ;

	s_sth.s_items[item_no].s_teach[0] = '\0';
	s_sth.s_items[item_no].s_t_desc[0] = '\0';

	s_sth.s_items[item_no].s_comment[0] = '\0';

	strcpy(s_sth.s_items[item_no].s_status,ACTIVE);

	ret( WriteFields((char *)&s_sth,PAGE_FLD,END_FLD - 200) ) ; 

	return(NOERROR) ;
}
/*------------------------------------------------------------*/
DispVac(item_no)
int	item_no;
{
	int	i;
	int	retval;

	s_sth.s_items[item_no].s_no = s_sth.s_page;
	if(s_sth.s_items[item_no].s_no == CurPage->Items[item_no].s_no)
		s_sth.s_items[item_no].s_no++;

	s_sth.s_items[item_no].s_no = s_sth.s_page;
	s_sth.s_items[item_no].s_pp = CurPage->Items[item_no].s_pp;
	s_sth.s_items[item_no].s_week = CurPage->Items[item_no].s_week;
	s_sth.s_items[item_no].s_fund = CurPage->Items[item_no].s_fund;

	/* Get Classification Code	*/
	strcpy(s_sth.s_items[item_no].s_class, CurPage->Items[0].s_class); 
	retval = GetClass(s_sth.s_items[item_no].s_class);
	if(retval == EFL){
		fomer("Classification Code Does Not Exist - Please Re-enter"); 
		s_sth.s_items[item_no].s_class[0] = LV_CHAR;
	    	return(ERROR);
	}
	strcpy(s_sth.s_items[item_no].s_cl_desc, class.c_desc) ;

	/* Get Earnings Code	*/
	strcpy(s_sth.s_items[item_no].s_earn, pay_param.pr_vac_earn) ;
	strcpy(earnings.ea_code,s_sth.s_items[item_no].s_earn);
	earnings.ea_date = s_sth.s_rundate;
	flg_reset(EARN);

	retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
	if((retval < 0 ||
		strcmp(earnings.ea_code,
				s_sth.s_items[item_no].s_earn) != 0)){
		fomer("Earnings Code Does Not Exist");
	    	return(ERROR);
	}
	strcpy(s_sth.s_items[item_no].s_ea_desc,earnings.ea_desc);

	/* Get Transaction Code	*/
/*	strcpy(s_sth.s_items[item_no].s_trans,pay_param.pr_trans_cd);
	strcpy(trans.tr_code,s_sth.s_items[item_no].s_trans);
	retval = get_trans(&trans,BROWSE,0,e_mesg);
	if(retval < 0) {
		DispError((char *)&s_sth,
				"Transaction Code Does not Exist");
		if(retval != UNDEF) return(ERROR);
	}
	strcpy(s_sth.s_items[item_no].s_tr_desc,trans.tr_desc);*/

	/* Get Expense Code	*/
/*	strcpy(s_sth.s_items[item_no].s_exp,pay_param.pr_exp_cd);
	strcpy(expense.ex_code,s_sth.s_items[item_no].s_exp);
	retval = get_exp(&expense,BROWSE,0,e_mesg);
	if(retval < 0) {
		DispError((char *)&s_sth,
			"Expense Code Does not Exist");
		if(retval != UNDEF) return(ERROR);
	}
	strcpy(s_sth.s_items[item_no].s_ex_desc,expense.ex_desc);*/

	/* Get Cost Center	*/
	s_sth.s_items[item_no].s_cc = CurPage->Items[item_no].s_cc;
	strcpy(s_sth.s_items[item_no].s_cc_desc,
					CurPage->Items[item_no].s_cc_desc); 

	GetPos(emp_rec.em_pos);
	s_sth.s_items[item_no].s_adj_flag[0] = 
				CurPage->Items[item_no].s_adj_flag[0];

	for( i=0; i<7 ; i++) {
		s_sth.s_items[item_no].s_units[i] = 0 ;
		s_sth.s_items[item_no].s_att[i][0] = '\0' ;
	}

	s_sth.s_items[item_no].s_rate = 0;
	s_sth.s_items[0].s_total = D_Roundoff(CurPage->Items[item_no].s_total * 
				 (emp_rec.em_vac_rate / 100.0));

	s_sth.s_items[item_no].s_teach[0] = '\0';
	s_sth.s_items[item_no].s_t_desc[0] = '\0';
	s_sth.s_items[item_no].s_comment[0] = '\0';
	strcpy(s_sth.s_items[item_no].s_status,ACTIVE);

	ret( WriteFields((char *)&s_sth,PAGE_FLD,END_FLD - 200) ) ; 

	return(NOERROR) ;
}	/* DispVac() */
/*------------------------------------------------------------*/
ReadCodes(item_no)
int	item_no;
{
	int	i;
	int	retval;

	/* Get Classification Code	*/
	retval = GetClass(s_sth.s_items[item_no].s_class);
	if(retval == EFL){
		fomer("Classification Code Does Not Exist - Please Re-enter"); 
	    	return(ERROR);
	}

	/* Get Earnings Code	*/
	strcpy(earnings.ea_code,s_sth.s_items[item_no].s_earn);
	earnings.ea_date = s_sth.s_rundate;
	flg_reset(EARN);

	retval = get_n_earn(&earnings,BROWSE,1,BACKWARD,e_mesg);
	if((retval < 0 ||
		strcmp(earnings.ea_code,
				s_sth.s_items[item_no].s_earn) != 0)){
		fomer("Earnings Code Does Not Exist");
	    	return(ERROR);
	}

	/* Get Transaction Code	*/
	strcpy(trans.tr_code,s_sth.s_items[item_no].s_trans);
	retval = get_trans(&trans,BROWSE,0,e_mesg);
	if(retval < 0) {
		DispError((char *)&s_sth,
				"Transaction Code Does not Exist");
		if(retval != UNDEF) return(ERROR);
	}

	/* Get Expense Code	*/
	strcpy(expense.ex_code,s_sth.s_items[item_no].s_exp);
	retval = get_exp(&expense,BROWSE,0,e_mesg);
	if(retval < 0) {
		DispError((char *)&s_sth,
			"Expense Code Does not Exist");
		if(retval != UNDEF) return(ERROR);
	}

	GetPos(emp_rec.em_pos);

	return(NOERROR) ;
}	/* ReadCodes */
/*------------------------------------------------------------*/
/* Read details of given item# */
/*------------------------------------------------------------*/
ReadCurFld(st_fld,end_fld,mode)
int	st_fld,end_fld ;
int	mode;
{
	int	i;
	int	retval;

	retval = ReadFields((char *)&s_sth,st_fld,end_fld,Validation,
							WindowHelp,1);
	if(PROFOM_ERR == retval || DBH_ERR == retval) return(retval) ;
	if(RET_USER_ESC == retval) {
		if(mode == ADD) {
			InitItem(0,HV_CHAR,HV_SHORT,HV_DOUBLE);
			WriteFields((char *)&s_sth,PAYPER_FLD,END_FLD-200);
			return(RET_USER_ESC);
		}
		/* When user gives ESC-F while changing fields, assumption is
		* he completed his changes, and remaining fields are same as
		* old. But, at this point STH will be having low values in the 
		* remaining fields. So move the old values form the linked list.
		*/

		retval = CopyBack((char *)&s_sth,(char *)&image,sr.curfld,
								 END_FLD);
		if(retval == PROFOM_ERR) return(retval);

		return(RET_USER_ESC) ;
	}

	return(NOERROR) ;
}	/* ReadCurFld */
/*-------------------- E n d   O f   P r o g r a m ---------------------*/
